language: d
name: HumanEval_69_search
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = max(lst);\n    auto d = new\
    \ long[m+1];\n    foreach(e; lst)\n        d[e]++;\n    foreach(i; 0..m+1)\n \
    \       if(d[i] >= i)\n            return i;\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8utc_66.d(20): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8utc_66.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = -1;\n    long maxCount =\
    \ 0;\n    foreach(long i; lst)\n    {\n        long count = 0;\n        foreach(long\
    \ j; lst)\n        {\n            if(i == j)\n            {\n                count++;\n\
    \            }\n        }\n        if(count >= i && count > maxCount)\n      \
    \  {\n            max = i;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp930lxzye.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x429105]

    ??:? void tmp930lxzye.__unittest_L40_C1() [0x4288b6]

    ??:? void tmp930lxzye.__modtest() [0x428e88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d113]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431139]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4315e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4310c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf7d]

    ??:? runModuleUnitTests [0x42cee9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429554]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] arr2 = arr.dup;\n    arr2.sort;\n    long[] arr3 = arr2.dup;\n   \
    \ arr3.sort;\n    long[] arr4 = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n\
    \    arr5.sort;\n    long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7\
    \ = arr6.dup;\n    arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n \
    \   long[] arr9 = arr8.dup;\n    arr9.sort;\n    long[] arr10 = arr9.dup;\n  \
    \  arr10.sort;\n    long[] arr11 = arr10.dup;\n    arr11.sort;\n    long[] arr12\
    \ = arr11.dup;\n    arr12.sort;\n    long[] arr13 = arr12.dup;\n    arr13.sort;\n\
    \    long[] arr14 = arr13.dup;\n    arr14.sort;\n    long[] arr15 = arr14.dup;\n\
    \    arr15.sort;\n    long[] arr16 = arr15.dup;\n    arr16.sort;\n    long[] arr17\
    \ = arr16.dup;\n    arr17.sort;\n    long[] arr18 = arr17.dup;\n    arr18.sort;\n\
    \    long[] arr19 = arr18.dup;\n    arr19.sort;\n    long[] arr20 = arr19.dup;\n\
    \    arr20.sort;\n    long[] arr21 = arr20.dup;\n    arr21.sort;\n    long[] arr22\
    \ = arr21.dup;\n    arr22.sort;\n    long[] arr23 = arr22.dup;\n    arr23.sort;\n\
    \    long[] arr24 = arr23.dup;\n    arr24.sort;\n    long[] arr25 = arr24.dup;\n\
    \    arr25.sort;\n    long[] arr26 = arr25.dup;\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsn5icx6.d(71): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsn5icx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort();\n  \
    \  long[] uniq = sorted.uniq;\n    long[] count = sorted.count;\n    long[] result\
    \ = new long[uniq.length];\n    foreach(i, v; uniq)\n    {\n        if(v >= count[i])\n\
    \        {\n            result ~= v;\n        }\n    }\n    if(result.length ==\
    \ 0)\n    {\n        return -1L;\n    }\n    return result.max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4a_bi7fy.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmp4a_bi7fy.d(21): Error: no property `uniq` for type `long[]`

    /tmp/tmp4a_bi7fy.d(22): Error: no property `count` for type `long[]`

    /tmp/tmp4a_bi7fy.d(35): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4a_bi7fy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] lst2 = lst.dup;\n    lst2.sort();\n\
    \    long[] lst3 = lst2.dup;\n    lst3.removeDuplicates();\n    long[] lst4 =\
    \ lst3.dup;\n    lst4.reverse;\n    long[] lst5 = lst4.dup;\n    lst5.removeDuplicates;\n\
    \    lst5.reverse;\n    foreach(long i; lst5)\n    {\n        if(lst2.count(i)\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jf4c2_q.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp8jf4c2_q.d(23): Error: no property `removeDuplicates` for type `long[]`

    /tmp/tmp8jf4c2_q.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp8jf4c2_q.d(27): Error: no property `removeDuplicates` for type `long[]`

    /tmp/tmp8jf4c2_q.d(28): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp8jf4c2_q.d(31): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jf4c2_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = sorted.count(sorted[i]);\n    }\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= sorted[i])\n        {\n            return sorted[i];\n\
    \        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_x3gb10.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp7_x3gb10.d(25): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_x3gb10.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..sorted.length)\n\
    \    {\n        if(i == 0)\n        {\n            freq[i] = 1;\n        }\n \
    \       else if(sorted[i] == sorted[i-1])\n        {\n            freq[i] = freq[i-1]\
    \ + 1;\n        }\n        else\n        {\n            freq[i] = 1;\n       \
    \ }\n    }\n    long[] sortedFreq = freq.dup;\n    sortedFreq.sort;\n    foreach(i;\
    \ 0..sortedFreq.length)\n    {\n        if(sortedFreq[i] >= sorted[i])\n     \
    \   {\n            return sorted[i];\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7cbb8ys.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmpn7cbb8ys.d(39): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7cbb8ys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ freq = new long[sorted.length];\n    long[] freq_sorted = new long[sorted.length];\n\
    \    long[] freq_sorted_index = new long[sorted.length];\n    long[] freq_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index = new\
    \ long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted = new\
    \ long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] fre\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrah2y7l.d(37): Error: semicolon expected, not `unittest`

    /tmp/tmpgrah2y7l.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrah2y7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n/*\n    You are given a non-empty list of positive\
    \ integers. Return the greatest integer that is greater than \n    zero, and has\
    \ a frequency greater than or equal to the value of the integer itself. \n   \
    \ The frequency of an integer is the number of times it appears in the list.\n\
    \    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
    \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong\
    \ search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n\nunittest\n{\n    alias candidate = search;\n\n \
    \   assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7vwitrc.d(80): Error: found `unittest` instead of statement

    /tmp/tmpg7vwitrc.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7vwitrc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] nums2 = new long[lst.length];\n\
    \    long[] freq2 = new long[lst.length];\n    long[] freq3 = new long[lst.length];\n\
    \    long[] nums3 = new long[lst.length];\n    long[] freq4 = new long[lst.length];\n\
    \    long[] nums4 = new long[lst.length];\n    long[] freq5 = new long[lst.length];\n\
    \    long[] nums5 = new long[lst.length];\n    long[] freq6 = new long[lst.length];\n\
    \    long[] nums6 = new long[lst.length];\n    long[] freq7 = new long[lst.length];\n\
    \    long[] nums7 = new long[lst.length];\n    long[] freq8 = new long[lst.length];\n\
    \    long[] nums8 = new long[lst.length];\n    long[] freq9 = new long[lst.length];\n\
    \    long[] nums9 = new long[lst.length];\n    long[] freq10 = new long[lst.length];\n\
    \    long[] nums10 = new long[lst.length];\n    long[] freq11 = new long[lst.length];\n\
    \    long[] nums11 = new long[lst.length];\n    long[] freq12 = new long[lst.length];\n\
    \    long[] nums12 = new long[lst.length];\n    long[] freq13 = new long[lst.length];\n\
    \    long[] nums13 = new long[lst.length];\n    long[] freq14 = new long[lst.length];\n\
    \    long[] nums14 = new long[lst.length];\n    long[] freq15 = new long[lst.length];\n\
    \    long[] nums15 = new long[lst.length];\n    long[] freq16 = new long[lst.length];\n\
    \    long[] nums16 = new long[lst.length];\nunittest\n{\n    alias candidate =\
    \ search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmge6hvn.d(52): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmge6hvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = -1;\n    long maxCount =\
    \ 0;\n    foreach(long i; lst)\n    {\n        long count = 0;\n        foreach(long\
    \ j; lst)\n        {\n            if(i == j)\n            {\n                count++;\n\
    \            }\n        }\n        if(count >= i && count > maxCount)\n      \
    \  {\n            max = i;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp930lxzye.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x429105]

    ??:? void tmp930lxzye.__unittest_L40_C1() [0x4288b6]

    ??:? void tmp930lxzye.__modtest() [0x428e88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d113]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431139]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4315e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4310c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf7d]

    ??:? runModuleUnitTests [0x42cee9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429554]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = lst.groupBy!(a => a);\n   \
    \ auto r = m.filter!(a => a.value.length >= a.key).keys.max;\n    return r > 0\
    \ ? r : -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcoa20_x.d(20): Error: no property `groupBy` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcoa20_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = 0;\n    long maxCount = 0;\n\
    \    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n           \
    \ max = i;\n        }\n    }\n    foreach(long i; lst)\n    {\n        if(i ==\
    \ max)\n        {\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max)\n    {\n        return max;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptebv91ux.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290ed]

    ??:? void tmptebv91ux.__unittest_L45_C1() [0x427e42]

    ??:? void tmptebv91ux.__modtest() [0x428e70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d0fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bf8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431121]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4315d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4310ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf65]

    ??:? runModuleUnitTests [0x42ced1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42953c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmppix8q_7w.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42921e]

    ??:? long tmppix8q_7w.search(long[]) [0x427dd0]

    ??:? void tmppix8q_7w.__unittest_L38_C1() [0x427ea7]

    ??:? void tmppix8q_7w.__modtest() [0x428ef0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431369]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431818]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0b5]

    ??:? runModuleUnitTests [0x42d021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long max = 0;\n    long max_index = 0;\n    long max_value = 0;\n    long\
    \ max_value_index = 0;\n    long max_freq = 0;\n    long max_freq_index = 0;\n\
    \    long max_freq_value = 0;\n    long max_freq_value_index = 0;\n    long max_freq_value_freq\
    \ = 0;\n    long max_freq_value_freq_index = 0;\n    long max_freq_value_freq_value\
    \ = 0;\n    long max_freq_value_freq_value_index = 0;\n    long max_freq_value_freq_value_freq\
    \ = 0;\n    long max_freq_value_freq_value_freq_index = 0;\n    long max_freq_value_freq_value_freq_value\
    \ = 0;\n    long max_freq_value_freq_value_freq_value_index = 0;\n    long max_freq_value_freq_value_freq_value_freq\
    \ = 0;\n    long max_freq_value_freq_value_freq_value_freq_index = 0;\n    long\
    \ max_freq_value_freq_value_freq_value_freq_value = 0;\n    long max_freq_value_freq_value_freq_value_freq_value_index\
    \ = 0;\n    long max_freq_value_freq_value_freq_value_freq_value_freq = 0;\n \
    \   long max_freq_value_freq_value_freq_value_freq_value_freq_index = 0;\n   \
    \ long max_freq_value_freq_value_freq_value_freq_value_freq_value = 0;\n    long\
    \ max_freq_value_freq_value_freq_value_freq_value\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpef03flmk.d(47): Error: semicolon expected, not `unittest`

    /tmp/tmpef03flmk.d(47): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpef03flmk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        arr[i] = lst[i];\n    }\n   \
    \ arr.sort();\n    long[] freq = new long[arr.length];\n    long[] num = new long[arr.length];\n\
    \    long count = 0;\n    long max = 0;\n    foreach(i; 0 .. arr.length)\n   \
    \ {\n        if(arr[i] == arr[i+1])\n        {\n            count++;\n       \
    \ }\n        else\n        {\n            count++;\n            freq[i] = count;\n\
    \            num[i] = arr[i];\n            count = 0;\n        }\n    }\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(num[i] == freq[i])\n        {\n        \
    \    max = num[i];\n        }\n    }\n    if(max == 0)\n    {\n        return\
    \ -1;\n    }\n    else\n    {\n        return max;\n    }\n}\nunittest\n{\n  \
    \  alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzz48qe5v.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzz48qe5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] values = new long[sorted.length];\n\
    \    long count = 1;\n    long value = sorted[0];\n    long index = 0;\n    for\
    \ (long i = 1; i < sorted.length; i++)\n    {\n        if (sorted[i] == value)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     values[index] = value;\n            counts[index] = count;\n           \
    \ index++;\n            value = sorted[i];\n            count = 1;\n        }\n\
    \    }\n    values[index] = value;\n    counts[index] = count;\n    index++;\n\
    \    long[] values_trimmed = new long[index];\n    long[] counts_trimmed = new\
    \ long[index];\n    for (long i = 0; i < index; i++)\n    {\n        values_trimmed[i]\
    \ = values[i];\n        counts_trimmed[i] = counts[i];\n    }\n    long max =\
    \ -1;\n    for (long i = 0; i < index; i++)\n    {\n        if (counts_trimmed[i]\
    \ >= values_trimmed[i])\n        {\n            max = max(max, values_trimmed[i]);\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7f9vvd9a.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmp7f9vvd9a.d(56): Error: function expected before `()`, not `max` of type
    `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f9vvd9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long result = -1L;\n    long max = 0L;\n\
    \    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n           \
    \ max = i;\n        }\n    }\n    long[] arr = new long[max];\n    foreach(long\
    \ i; lst)\n    {\n        arr[i - 1]++;\n    }\n    foreach(long i; arr)\n   \
    \ {\n        if(i >= arr.length)\n        {\n            result = arr.length;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo329s65r.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x429185]

    ??:? void tmpo329s65r.__unittest_L43_C1() [0x427eda]

    ??:? void tmpo329s65r.__modtest() [0x428f08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431381]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431830]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43130d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0cd]

    ??:? runModuleUnitTests [0x42d039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429648]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = new Map!(long, long);\n   \
    \ foreach(i; lst)\n    {\n        if(m.contains(i))\n        {\n            m[i]++;\n\
    \        }\n        else\n        {\n            m[i] = 1;\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; m.keys)\n    {\n        if(i > m[i])\n   \
    \     {\n            continue;\n        }\n        if(i > max)\n        {\n  \
    \          max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjq_l2whs.d(20): Error: template instance `Map!(long, long)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq_l2whs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n    }\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j <\
    \ lst.length; j++)\n        {\n            if (lst[i] == lst[j])\n           \
    \ {\n                freq[i]++;\n            }\n        }\n    }\n    long max\
    \ = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if (max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        foreach(j; lst)\n        {\n            if(i\
    \ == j)\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl3iouyla.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429236]

    ??:? long tmpl3iouyla.search(long[]) [0x427dbd]

    ??:? void tmpl3iouyla.__unittest_L40_C1() [0x427ebb]

    ??:? void tmpl3iouyla.__modtest() [0x428f04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431381]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431830]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43130d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0cd]

    ??:? runModuleUnitTests [0x42d039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] unique = new long[lst.length];\n    int j = 0;\n    foreach(i; lst)\n\
    \    {\n        if(!unique.canFind(i))\n        {\n            unique[j] = i;\n\
    \            j++;\n        }\n        freq[i]++;\n    }\n    long max = -1;\n\
    \    foreach(i; unique)\n    {\n        if(freq[i] >= i && i > max)\n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxd_ktgm0.d(25): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxd_ktgm0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        arr[i]++;\n    }\n    long max = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i >= arr[i] && i > max)\n        {\n    \
    \        max = i;\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphci7dd5a.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42920e]

    ??:? long tmphci7dd5a.search(long[]) [0x427d7e]

    ??:? void tmphci7dd5a.__unittest_L39_C1() [0x427e97]

    ??:? void tmphci7dd5a.__modtest() [0x428ee0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431359]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431808]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0a5]

    ??:? runModuleUnitTests [0x42d011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long max = 0;\n    long max_num\
    \ = 0;\n    long max_freq = 0;\n    long max_freq_num = 0;\n    long max_freq_num_freq\
    \ = 0;\n    long max_freq_num_freq_num = 0;\n    long max_freq_num_freq_num_freq\
    \ = 0;\n    long max_freq_num_freq_num_freq_num = 0;\n    long max_freq_num_freq_num_freq_num_freq\
    \ = 0;\n    long max_freq_num_freq_num_freq_num_freq_num = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq\
    \ = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq_num = 0;\n    long\
    \ max_freq_num_freq_num_freq_num_freq_num_freq_num_freq = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num\
    \ = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num_freq\
    \ = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num\
    \ = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num_freq\
    \ = 0;\n    long max_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num_freq_num\
    \ = 0;\n    long max_freq_\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpurpltnno.d(41): Error: semicolon expected, not `unittest`

    /tmp/tmpurpltnno.d(41): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurpltnno.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmppix8q_7w.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42921e]

    ??:? long tmppix8q_7w.search(long[]) [0x427dd0]

    ??:? void tmppix8q_7w.__unittest_L38_C1() [0x427ea7]

    ??:? void tmppix8q_7w.__modtest() [0x428ef0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431369]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431818]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0b5]

    ??:? runModuleUnitTests [0x42d021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Dictionary!(long, long)();\n\
    \    foreach(e; lst)\n    {\n        if(!d.containsKey(e))\n            d[e] =\
    \ 1;\n        else\n            d[e]++;\n    }\n    long max = -1;\n    foreach(e;\
    \ d.keys)\n    {\n        if(e > d[e])\n            continue;\n        if(e >\
    \ max)\n            max = e;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqf_edxnu.d(20): Error: template instance `Dictionary!(long, long)`
    template `Dictionary` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqf_edxnu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] values = new long[lst.length];\n    long[] sorted = lst.dup;\n   \
    \ sorted.sort;\n    long count = 0;\n    long value = sorted[0];\n    foreach(long\
    \ i; sorted)\n    {\n        if(i == value)\n        {\n            count++;\n\
    \        }\n        else\n        {\n            counts ~= count;\n          \
    \  values ~= value;\n            count = 1;\n            value = i;\n        }\n\
    \    }\n    counts ~= count;\n    values ~= value;\n    foreach(long i; 0..counts.length)\n\
    \    {\n        if(counts[i] >= values[i])\n        {\n            return values[i];\n\
    \        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvwizx_7x.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwizx_7x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] values = new long[sorted.length];\n\
    \    long count = 1;\n    long value = sorted[0];\n    long index = 0;\n    for\
    \ (long i = 1; i < sorted.length; i++) \n    {\n        if (sorted[i] == value)\
    \ \n        {\n            count++;\n        } \n        else \n        {\n  \
    \          counts[index] = count;\n            values[index] = value;\n      \
    \      index++;\n            count = 1;\n            value = sorted[i];\n    \
    \    }\n    }\n    counts[index] = count;\n    values[index] = value;\n    index++;\n\
    \    long[] counts2 = new long[index];\n    long[] values2 = new long[index];\n\
    \    for (long i = 0; i < index; i++) \n    {\n        counts2[i] = counts[i];\n\
    \        values2[i] = values[i];\n    }\n    long[] sorted2 = counts2.dup.sort;\n\
    \    long max = sorted2[sorted2.length - 1];\n    long maxIndex = 0;\n    for\
    \ (long i = 0; i < counts2.length; i++) \n    {\n        if (counts2[i] == max)\
    \ \n        {\n            maxIndex = i;\n            break;\n        }\n    }\n\
    \    long maxValue = values2[maxIndex];\n    if (maxValue > max) \n    {\n   \
    \     return -1;\n    }\n    return maxValue;\n}\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeks2fflo.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpeks2fflo.d(51): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeks2fflo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i == 0)\n        {\n            nums[j]\
    \ = lst[i];\n            freq[j] = 1;\n        }\n        else\n        {\n  \
    \          if (lst[i] == lst[i-1])\n            {\n                freq[j]++;\n\
    \            }\n            else\n            {\n                j++;\n      \
    \          nums[j] = lst[i];\n                freq[j] = 1;\n            }\n  \
    \      }\n    }\n    long max = -1;\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        if (nums[i] > 0 && nums[i] <= freq[i])\n        {\n          \
    \  max = max(max, nums[i]);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx391uy6q.d(49): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx391uy6q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long result = -1L;\n    long max = 0L;\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0..lst.length)\n  \
    \  {\n        counts[i] = 0L;\n        foreach(j; 0..lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                counts[i]++;\n\
    \            }\n        }\n        if(counts[i] >= lst[i] && lst[i] > max)\n \
    \       {\n            max = lst[i];\n            result = lst[i];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = search;\n\n\
    \    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] unique = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long[] result2 = new long[sorted.length];\n\
    \    long[] result3 = new long[sorted.length];\n    long[] result4 = new long[sorted.length];\n\
    \    long[] result5 = new long[sorted.length];\n    long[] result6 = new long[sorted.length];\n\
    \    long[] result7 = new long[sorted.length];\n    long[] result8 = new long[sorted.length];\n\
    \    long[] result9 = new long[sorted.length];\n    long[] result10 = new long[sorted.length];\n\
    \    long[] result11 = new long[sorted.length];\n    long[] result12 = new long[sorted.length];\n\
    \    long[] result13 = new long[sorted.length];\n    long[] result14 = new long[sorted.length];\n\
    \    long[] result15 = new long[sorted.length];\n    long[] result16 = new long[sorted.length];\n\
    \    long[] result17 = new long[sorted.length];\n    long[] result18 = new long[sorted.length];\n\
    \    long[] result19 = new long[sorted.length];\n    long[] result20 = new long[sorted.length];\n\
    \    long[] result21 = new long[sorted.length];\n    long[] result22 = new long[sorted.length];\n\
    \    long[] result23 = new long[sorted.length];\n    long[] result24 = new long[sorted.length];\n\
    \    long[] result25 = new long[sorted.length];\n    long[] result26 = new long[sorted.length];\n\
    \    long[] result27 = new long[sorted.length];\n    long[] result28 = new long[sorted.length];\n\
    \    long[] result29 = new long[sorted.length];\n    long[] result30 = new long[sorted.length];\n\
    \    long[] result31 = new long[sorted.length];\n    long[]\nunittest\n{\n   \
    \ alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2ey5fq7.d(55): Error: no identifier for declarator `long[]`

    /tmp/tmpv2ey5fq7.d(55): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2ey5fq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    int i = 0;\n    foreach(long num;\
    \ lst)\n    {\n        int index = nums.indexOf(num);\n        if(index == -1)\n\
    \        {\n            nums[i] = num;\n            freq[i] = 1;\n           \
    \ i++;\n        }\n        else\n        {\n            freq[index]++;\n     \
    \   }\n    }\n    long result = -1;\n    for(int j = 0; j < i; j++)\n    {\n \
    \       if(freq[j] >= nums[j] && nums[j] > result)\n        {\n            result\
    \ = nums[j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoyqss0za.d(25): Error: no property `indexOf` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyqss0za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ unique = sorted.uniq;\n    long[] freq = unique.map!(x => sorted.count(x));\n\
    \    long[] freq_unique = freq.uniq;\n    long[] freq_freq = freq_unique.map!(x\
    \ => freq.count(x));\n    long[] freq_freq_unique = freq_freq.uniq;\n    long[]\
    \ freq_freq_freq = freq_freq_unique.map!(x => freq_freq.count(x));\n    long[]\
    \ freq_freq_freq_unique = freq_freq_freq.uniq;\n    long[] freq_freq_freq_freq\
    \ = freq_freq_freq_unique.map!(x => freq_freq_freq.count(x));\n    long[] freq_freq_freq_freq_unique\
    \ = freq_freq_freq_freq.uniq;\n    long[] freq_freq_freq_freq_freq = freq_freq_freq_freq_unique.map!(x\
    \ => freq_freq_freq_freq.count(x));\n    long[] freq_freq_freq_freq_freq_unique\
    \ = freq_freq_freq_freq_freq.uniq;\n    long[] freq_freq_freq_freq_freq_freq =\
    \ freq_freq_freq_freq_freq_unique.map!(x => freq_freq_freq_freq_freq.count(x));\n\
    \    long[] freq_freq_freq_freq_freq_freq_unique = freq_freq_freq_freq_freq_freq.uniq;\n\
    \    long[] freq_freq_freq_freq_freq_freq_freq = freq_freq_freq_freq_freq_freq_unique.map!(x\
    \ => freq_freq_freq_fre\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx8thf3d.d(35): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpdx8thf3d.d(36): Error: semicolon expected, not `{`

    /tmp/tmpdx8thf3d.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx8thf3d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ freq = new long[sorted.length];\n    long[] nums = new long[sorted.length];\n\
    \    long[] nums2 = new long[sorted.length];\n    long[] freq2 = new long[sorted.length];\n\
    \    long[] freq3 = new long[sorted.length];\n    long[] nums3 = new long[sorted.length];\n\
    \    long[] freq4 = new long[sorted.length];\n    long[] nums4 = new long[sorted.length];\n\
    \    long[] freq5 = new long[sorted.length];\n    long[] nums5 = new long[sorted.length];\n\
    \    long[] freq6 = new long[sorted.length];\n    long[] nums6 = new long[sorted.length];\n\
    \    long[] freq7 = new long[sorted.length];\n    long[] nums7 = new long[sorted.length];\n\
    \    long[] freq8 = new long[sorted.length];\n    long[] nums8 = new long[sorted.length];\n\
    \    long[] freq9 = new long[sorted.length];\n    long[] nums9 = new long[sorted.length];\n\
    \    long[] freq10 = new long[sorted.length];\n    long[] nums10 = new long[sorted.length];\n\
    \    long[] freq11 = new long[sorted.length];\n    long[] nums11 = new long[sorted.length];\n\
    \    long[] freq12 = new long[sorted.length];\n    long[] nums12 = new long[sorted.length];\n\
    \    long[] freq13 = new long[sorted.length];\n    long[] nums13 = new long[sorted.length];\n\
    \    long[] freq14 = new long[sorted.length];\n    long[] nums14 = new long[sorted.length];\n\
    \    long[] freq15 = new long[sorted.length];\n    long[] nums15 = new long[sorted.length];\n\
    \    long[] freq16 = new long[sorted.length];\n   \nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpufbpuwhr.d(53): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpufbpuwhr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if (freq[i] >= i && i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpub9ofsy7.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42922e]

    ??:? long tmpub9ofsy7.search(long[]) [0x427dd0]

    ??:? void tmpub9ofsy7.__unittest_L39_C1() [0x427eb3]

    ??:? void tmpub9ofsy7.__modtest() [0x428efc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d25b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431379]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431828]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431305]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0c5]

    ??:? runModuleUnitTests [0x42d031]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = sorted.count(sorted[i]);\n    }\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= sorted[i])\n        {\n            return sorted[i];\n\
    \        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_x3gb10.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp7_x3gb10.d(25): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_x3gb10.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.max() +\
    \ 1];\n    foreach(i; lst)\n        counts[i]++;\n    foreach(i; lst)\n      \
    \  if(counts[i] >= i)\n            return i;\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0qnoqao.d(20): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0qnoqao.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] values = new long[sorted.length];\n\
    \    long count = 1;\n    long value = sorted[0];\n    long index = 0;\n    foreach(i;\
    \ 1..sorted.length)\n    {\n        if(sorted[i] == value)\n        {\n      \
    \      count++;\n        }\n        else\n        {\n            counts[index]\
    \ = count;\n            values[index] = value;\n            index++;\n       \
    \     count = 1;\n            value = sorted[i];\n        }\n    }\n    counts[index]\
    \ = count;\n    values[index] = value;\n    index++;\n    long[] counts_sorted\
    \ = counts[0..index].sort;\n    long[] values_sorted = values[0..index].sort;\n\
    \    foreach(i; 0..index)\n    {\n        if(counts_sorted[i] >= values_sorted[i])\n\
    \        {\n            return values_sorted[i];\n        }\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp628i6_1f.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmp628i6_1f.d(44): Error: no property `sort` for type `long[]`

    /tmp/tmp628i6_1f.d(45): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp628i6_1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] unique = new long[sorted.length];\n\
    \    long count = 0;\n    long last = sorted[0];\n    foreach(i, e; sorted)\n\
    \    {\n        if(e != last)\n        {\n            unique[count] = last;\n\
    \            counts[count] = i - count;\n            count = i;\n            last\
    \ = e;\n        }\n    }\n    unique[count] = last;\n    counts[count] = sorted.length\
    \ - count;\n    long max = -1;\n    foreach(i, e; counts)\n    {\n        if(e\
    \ >= unique[i] && e > max)\n        {\n            max = unique[i];\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2pg2mf0f.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pg2mf0f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    long max = -1;\n    foreach(i, e; sorted)\n    {\n        if(e > 0)\n   \
    \     {\n            if(e == sorted[i+1])\n            {\n                freq[i]\
    \ = freq[i+1] + 1;\n                nums[i] = e;\n            }\n            else\n\
    \            {\n                freq[i] = 1;\n                nums[i] = e;\n \
    \           }\n        }\n    }\n    foreach(i, e; freq)\n    {\n        if(e\
    \ >= nums[i])\n        {\n            max = max(max, nums[i]);\n        }\n  \
    \  }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwn_199l.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmptwn_199l.d(45): Error: function expected before `()`, not `max` of type
    `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwn_199l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long[] result2 = new long[lst.length];\n    long[] result3 = new long[lst.length];\n\
    \    long[] result4 = new long[lst.length];\n    long[] result5 = new long[lst.length];\n\
    \    long[] result6 = new long[lst.length];\n    long[] result7 = new long[lst.length];\n\
    \    long[] result8 = new long[lst.length];\n    long[] result9 = new long[lst.length];\n\
    \    long[] result10 = new long[lst.length];\n    long[] result11 = new long[lst.length];\n\
    \    long[] result12 = new long[lst.length];\n    long[] result13 = new long[lst.length];\n\
    \    long[] result14 = new long[lst.length];\n    long[] result15 = new long[lst.length];\n\
    \    long[] result16 = new long[lst.length];\n    long[] result17 = new long[lst.length];\n\
    \    long[] result18 = new long[lst.length];\n    long[] result19 = new long[lst.length];\n\
    \    long[] result20 = new long[lst.length];\n    long[] result21 = new long[lst.length];\n\
    \    long[] result22 = new long[lst.length];\n    long[] result23 = new long[lst.length];\n\
    \    long[] result24 = new long[lst.length];\n    long[] result25 = new long[lst.length];\n\
    \    long[] result26 = new long[lst.length];\n    long[] result27 = new long[lst.length];\n\
    \    long[] result28 = new long[lst.length];\n    long[] result29 = new long[lst.length];\n\
    \    long[] result30 = new long[lst.length];\n    long[] result31 = new long[lst.length];\n\
    \    long[] result32 = new long[lst.length];\n   \nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxa3t8jhm.d(55): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxa3t8jhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] freq_sorted = new long[lst.length];\n    long[] lst_sorted = new long[lst.length];\n\
    \    long[] lst_sorted_unique = new long[lst.length];\n    long[] freq_sorted_unique\
    \ = new long[lst.length];\n    long[] freq_sorted_unique_sorted = new long[lst.length];\n\
    \    long[] lst_sorted_unique_sorted = new long[lst.length];\n    long[] freq_sorted_unique_sorted_sorted\
    \ = new long[lst.length];\n    long[] lst_sorted_unique_sorted_sorted = new long[lst.length];\n\
    \    long[] freq_sorted_unique_sorted_sorted_sorted = new long[lst.length];\n\
    \    long[] lst_sorted_unique_sorted_sorted_sorted = new long[lst.length];\n \
    \   long[] freq_sorted_unique_sorted_sorted_sorted_sorted = new long[lst.length];\n\
    \    long[] lst_sorted_unique_sorted_sorted_sorted_sorted = new long[lst.length];\n\
    \    long[] freq_sorted_unique_sorted_sorted_sorted_sorted_sorted = new long[lst.length];\n\
    \    long[] lst_sorted_unique_sorted_sorted_sorted_sorted_sorted = new long[lst.length];\n\
    \    long[] freq_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted = new\
    \ long[lst.length];\n    long[] lst_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = new long[lst.length];\n    long[] freq_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = new long[lst.length];\n    long[] lst_sorted_unique_\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoh280zv3.d(39): Error: semicolon expected, not `unittest`

    /tmp/tmpoh280zv3.d(39): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoh280zv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] lst2 = lst.dup;\n    lst2.sort;\n\
    \    long[] lst3 = lst2.dup;\n    lst3.removeDuplicates;\n    long[] lst4 = lst3.dup;\n\
    \    lst4.reverse;\n    foreach(i;lst4)\n    {\n        long count = 0;\n    \
    \    foreach(j;lst2)\n        {\n            if(i == j)\n            {\n     \
    \           count++;\n            }\n        }\n        if(count >= i)\n     \
    \   {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpse6phubp.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpse6phubp.d(23): Error: no property `removeDuplicates` for type `long[]`

    /tmp/tmpse6phubp.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpse6phubp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Map!(long, long);\n   \
    \ foreach(i; lst)\n    {\n        if(d.count(i) == 0)\n        {\n           \
    \ d[i] = 1;\n        }\n        else\n        {\n            d[i] += 1;\n    \
    \    }\n    }\n    long max = -1;\n    foreach(i; d.keys)\n    {\n        if(i\
    \ >= d[i] && i > max)\n        {\n            max = i;\n        }\n    }\n   \
    \ return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfh84mjm.d(20): Error: template instance `Map!(long, long)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfh84mjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] sorted = new long[lst.length];\n    long[] sortedCounts = new long[lst.length];\n\
    \    long[] sortedCounts2 = new long[lst.length];\n    long[] sortedCounts3 =\
    \ new long[lst.length];\n    long[] sortedCounts4 = new long[lst.length];\n  \
    \  long[] sortedCounts5 = new long[lst.length];\n    long[] sortedCounts6 = new\
    \ long[lst.length];\n    long[] sortedCounts7 = new long[lst.length];\n    long[]\
    \ sortedCounts8 = new long[lst.length];\n    long[] sortedCounts9 = new long[lst.length];\n\
    \    long[] sortedCounts10 = new long[lst.length];\n    long[] sortedCounts11\
    \ = new long[lst.length];\n    long[] sortedCounts12 = new long[lst.length];\n\
    \    long[] sortedCounts13 = new long[lst.length];\n    long[] sortedCounts14\
    \ = new long[lst.length];\n    long[] sortedCounts15 = new long[lst.length];\n\
    \    long[] sortedCounts16 = new long[lst.length];\n    long[] sortedCounts17\
    \ = new long[lst.length];\n    long[] sortedCounts18 = new long[lst.length];\n\
    \    long[] sortedCounts19 = new long[lst.length];\n    long[] sortedCounts20\
    \ = new long[lst.length];\n    long[] sortedCounts21 = new long[lst.length];\n\
    \    long[] sortedCounts22 = new long[lst.length];\n    long[] sortedCounts23\
    \ = new long[lst.length];\n    long[] sortedCounts24 = new long[lst.length];\n\
    \    long[] sortedCounts25 = new long[lst.length];\n    long[] sortedCounts26\
    \ = new long[lst.length];\n    long[] sortedCounts27 = new long[lst.length];\n\
    \    long[] sortedCounts28 = new long[lst.length];\n    long[] sortedCounts\n\
    unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L,\
    \ 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n \
    \   assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq15s4h19.d(51): Error: semicolon expected, not `unittest`

    /tmp/tmpq15s4h19.d(51): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq15s4h19.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = sorted.count;\n    long[] keys = sorted.keys;\n    long[] values =\
    \ sorted.values;\n    long[] filtered = values.filter!(x => x >= keys[x]);\n \
    \   return filtered.length > 0 ? filtered[0] : -1;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpktsqxkju.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpktsqxkju.d(21): Error: no property `count` for type `long[]`

    /tmp/tmpktsqxkju.d(22): Error: template `object.keys` cannot deduce function from
    argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3040):        `object.keys(T
    : Value[Key], Value, Key)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3048):        `object.keys(T
    : Value[Key], Value, Key)(T* aa)`

    /tmp/tmpktsqxkju.d(23): Error: template `object.values` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3053):        `object.value'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = new Map!int;\n    foreach(i;\
    \ lst)\n    {\n        m[i]++;\n    }\n    foreach(i; m.byKey)\n    {\n      \
    \  if(i.value >= i.key)\n        {\n            return i.key;\n        }\n   \
    \ }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvli72wwl.d(20): Error: template instance `Map!int` template `Map`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvli72wwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] val = new long[lst.length];\n    long[] res = new long[lst.length];\n\
    \    long[] res2 = new long[lst.length];\n    long max = 0;\n    long max2 = 0;\n\
    \    long max3 = 0;\n    long max4 = 0;\n    long max5 = 0;\n    long max6 = 0;\n\
    \    long max7 = 0;\n    long max8 = 0;\n    long max9 = 0;\n    long max10 =\
    \ 0;\n    long max11 = 0;\n    long max12 = 0;\n    long max13 = 0;\n    long\
    \ max14 = 0;\n    long max15 = 0;\n    long max16 = 0;\n    long max17 = 0;\n\
    \    long max18 = 0;\n    long max19 = 0;\n    long max20 = 0;\n    long max21\
    \ = 0;\n    long max22 = 0;\n    long max23 = 0;\n    long max24 = 0;\n    long\
    \ max25 = 0;\n    long max26 = 0;\n    long max27 = 0;\n    long max28 = 0;\n\
    \    long max29 = 0;\n    long max30 = 0;\n    long max31 = 0;\n    long max32\
    \ = 0;\n    long max33 = 0;\n    long max34 = 0;\n    long max35 = 0;\n    long\
    \ max36 = 0;\n    long max37 = 0;\n    long max38 = 0;\n    long max39 = 0;\n\
    \    long max40 = 0;\n    long max41 = 0;\n    long max42 = 0;\n    long max43\
    \ = 0;\n    long max44 = 0;\n    long max45 = 0;\n    long max46 = 0;\n    long\
    \ max47 = 0;\n    long max48 = 0;\n    long max49 = 0;\n    long max50 = 0;\n\
    \    long max51 = 0;\n    long max52 = 0;\n    long max53 = 0;\n    long max54\
    \ = 0;\n    long max55 = 0;\n    long max56 = 0;\n    long max57\nunittest\n{\n\
    \    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvxl7uf7y.d(81): Error: semicolon expected, not `unittest`

    /tmp/tmpvxl7uf7y.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxl7uf7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] lst2 = lst.dup;\n    lst2.sort;\n\
    \    long[] lst3 = lst2.dup;\n    lst3.removeDuplicates;\n    long[] lst4 = lst3.dup;\n\
    \    lst4.reverse;\n    long[] lst5 = lst4.dup;\n    lst5.removeDuplicates;\n\
    \    lst5.reverse;\n    long[] lst6 = lst5.dup;\n    lst6.removeDuplicates;\n\
    \    long[] lst7 = lst6.dup;\n    lst7.removeDuplicates;\n    long[] lst8 = lst7.dup;\n\
    \    lst8.removeDuplicates;\n    long[] lst9 = lst8.dup;\n    lst9.removeDuplicates;\n\
    \    long[] lst10 = lst9.dup;\n    lst10.removeDuplicates;\n    long[] lst11 =\
    \ lst10.dup;\n    lst11.removeDuplicates;\n    long[] lst12 = lst11.dup;\n   \
    \ lst12.removeDuplicates;\n    long[] lst13 = lst12.dup;\n    lst13.removeDuplicates;\n\
    \    long[] lst14 = lst13.dup;\n    lst14.removeDuplicates;\n    long[] lst15\
    \ = lst14.dup;\n    lst15.removeDuplicates;\n    long[] lst16 = lst15.dup;\n \
    \   lst16.removeDuplicates;\n    long[] lst17 = lst16.dup;\n    lst17.removeDuplicates;\n\
    \    long[] lst18 = lst17.dup;\n    lst18.removeDuplicates;\n    long[] lst19\
    \ = lst18.dup;\n    lst19.removeDuplicates;\n    long[] lst20 = lst19.dup;\n \
    \   lst20.removeDuplicates;\n    long[] lst21 = lst20.dup;\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfo7rdnvm.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfo7rdnvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n    }\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j <\
    \ lst.length; j++)\n        {\n            if (lst[i] == lst[j])\n           \
    \ {\n                freq[i]++;\n            }\n        }\n    }\n    long max\
    \ = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i] >\
    \ max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if (max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] cnt = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        cnt[lst[i]] += 1;\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(cnt[i] >= i && cnt[i] > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp45smvbiv.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42924e]

    ??:? long tmp45smvbiv.search(long[]) [0x427dd0]

    ??:? void tmp45smvbiv.__unittest_L39_C1() [0x427ed7]

    ??:? void tmp45smvbiv.__modtest() [0x428f20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d27b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c10e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431399]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431848]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431325]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0e5]

    ??:? runModuleUnitTests [0x42d051]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] arr2 = arr.dup;\n    arr2.sort;\n    long[] arr3 = arr2.dup;\n   \
    \ arr3.sort;\n    long[] arr4 = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n\
    \    arr5.sort;\n    long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7\
    \ = arr6.dup;\n    arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n \
    \   long[] arr9 = arr8.dup;\n    arr9.sort;\n    long[] arr10 = arr9.dup;\n  \
    \  arr10.sort;\n    long[] arr11 = arr10.dup;\n    arr11.sort;\n    long[] arr12\
    \ = arr11.dup;\n    arr12.sort;\n    long[] arr13 = arr12.dup;\n    arr13.sort;\n\
    \    long[] arr14 = arr13.dup;\n    arr14.sort;\n    long[] arr15 = arr14.dup;\n\
    \    arr15.sort;\n    long[] arr16 = arr15.dup;\n    arr16.sort;\n    long[] arr17\
    \ = arr16.dup;\n    arr17.sort;\n    long[] arr18 = arr17.dup;\n    arr18.sort;\n\
    \    long[] arr19 = arr18.dup;\n    arr19.sort;\n    long[] arr20 = arr19.dup;\n\
    \    arr20.sort;\n    long[] arr21 = arr20.dup;\n    arr21.sort;\n    long[] arr22\
    \ = arr21.dup;\n    arr22.sort;\n    long[] arr23 = arr22.dup;\n    arr23.sort;\n\
    \    long[] arr24 = arr23.dup;\n    arr24.sort;\n    long[] arr25 = arr24.dup;\n\
    \    arr25.sort;\n    long[] arr26 = arr25.dup;\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsn5icx6.d(71): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsn5icx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = -1;\n    long[] count = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        count[i]\
    \ = 0;\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count[i]++;\n            }\n    \
    \    }\n        if(count[i] >= lst[i] && lst[i] > max)\n        {\n          \
    \  max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = new Map!(long, long);\n   \
    \ foreach(e; lst)\n    {\n        if(m.count(e) == 0)\n            m[e] = 1;\n\
    \        else\n            m[e]++;\n    }\n    long res = -1;\n    foreach(e;\
    \ m.keys)\n    {\n        if(m[e] >= e && e > res)\n            res = e;\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgskuueib.d(20): Error: template instance `Map!(long, long)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgskuueib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = 0;\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n        if(freq[i]\
    \ >= i && i > max)\n            max = i;\n    }\n    return max == 0 ? -1 : max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpiye4aya2.d(24): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291be]

    ??:? long tmpiye4aya2.search(long[]) [0x427d8e]

    ??:? void tmpiye4aya2.__unittest_L30_C1() [0x427e43]

    ??:? void tmpiye4aya2.__modtest() [0x428e8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d1eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c07e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431309]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431295]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c055]

    ??:? runModuleUnitTests [0x42cfc1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n    }\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j <\
    \ lst.length; j++)\n        {\n            if (lst[i] == lst[j])\n           \
    \ {\n                freq[i]++;\n            }\n        }\n    }\n    long max\
    \ = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i] >\
    \ max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if (max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..sorted.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0..sorted.length)\n      \
    \  {\n            if(sorted[i] == sorted[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0..freq.length)\n    {\n        if(freq[i] >= sorted[i] && sorted[i]\
    \ > max)\n        {\n            max = sorted[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmn4z9j1e.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn4z9j1e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpexbbqysg.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291e6]

    ??:? long tmpexbbqysg.search(long[]) [0x427d7b]

    ??:? void tmpexbbqysg.__unittest_L34_C1() [0x427e6b]

    ??:? void tmpexbbqysg.__modtest() [0x428eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d213]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431331]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c07d]

    ??:? runModuleUnitTests [0x42cfe9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort();\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(i == 0)\n        {\n            freq[i] = 1;\n        }\n \
    \       else if(sorted[i] == sorted[i-1])\n        {\n            freq[i] = freq[i-1]\
    \ + 1;\n        }\n        else\n        {\n            freq[i] = 1;\n       \
    \ }\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n       \
    \ if(freq[i] >= sorted[i] && sorted[i] > max)\n        {\n            max = sorted[i];\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvdtv5f2g.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdtv5f2g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = -1;\n    foreach(long i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            long count = 0;\n \
    \           foreach(long j; lst)\n            {\n                if(i == j)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            if(count >= i)\n            {\n                max = i;\n\
    \            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = count(lst, lst[i]);\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpatv_cs4s.d(23): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatv_cs4s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && lst[i] <= freq[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[lst.length];\n    long[] unique = new long[lst.length];\n\
    \    long[] result = new long[lst.length];\n    long[] final = new long[lst.length];\n\
    \    long count = 0;\n    long index = 0;\n    long max = 0;\n    long max_index\
    \ = 0;\n    long max_count = 0;\n    long max_value = 0;\n    long max_value_index\
    \ = 0;\n    long max_value_count = 0;\n    long max_value_value = 0;\n    foreach(i;\
    \ 0 .. sorted.length)\n    {\n        if(i == 0)\n        {\n            unique[index]\
    \ = sorted[i];\n            count++;\n        }\n        else if(sorted[i] ==\
    \ sorted[i-1])\n        {\n            count++;\n        }\n        else\n   \
    \     {\n            counts[index] = count;\n            index++;\n          \
    \  unique[index] = sorted[i];\n            count = 1;\n        }\n    }\n    counts[index]\
    \ = count;\n    foreach(i; 0 .. unique.length)\n    {\n        if(unique[i] >\
    \ max)\n        {\n            max = unique[i];\n            max_index = i;\n\
    \            max_count = counts[i];\n        }\n    }\n    foreach(i; 0 .. unique.length)\n\
    \    {\n        if(unique[i] == max)\n        {\n            if(counts[i] == max)\n\
    \            {\n                max_value = max;\n                max_value_index\
    \ = i;\n                max_value_count = counts[i];\n                max_value_value\
    \ = unique[i];\n            }\n        }\n    }\n    if(max_value == 0)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        return max_value;\n    }\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqq3yun86.d(24): Error: no identifier for declarator `long[]`

    /tmp/tmpqq3yun86.d(24): Error: basic type expected, not `=`

    /tmp/tmpqq3yun86.d(24): Error: no identifier for declarator `_error_`

    /tmp/tmpqq3yun86.d(24): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq3yun86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && lst[i] <= freq[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\n/*\n    You are given a\
    \ list of integers. Return the sum of all the integers that have a frequency greater\
    \ than or equal to the value of the integer itself.\n    Examples:\n    >>> search([4L,\
    \ 1L, 2L, 2L, 3L, 1L])\n    8L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n    12L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    0L\n*/\nlong search(long[]\
    \ lst) \n{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(lst[i] <= freq[i])\n        {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n/*\n    You are given a list of integers. Return the\
    \ sum of all the integers that have a frequency greater than or equal to the value\
    \ of the integer itself.\n    Examples:\n    >>> search([4L, 1L, 2L, 2L, 3L, 1L])\n\
    \    8\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiw2k2kap.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiw2k2kap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = max(lst);\n    long[] freq\
    \ = new long[m+1];\n    foreach(e; lst)\n    {\n        freq[e]++;\n    }\n  \
    \  foreach(i; 0..m+1)\n    {\n        if(freq[i] >= i)\n        {\n          \
    \  return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyg82vax_.d(20): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyg82vax_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] values = new long[sorted.length];\n\
    \    long count = 1;\n    long value = sorted[0];\n    long index = 0;\n    foreach(i;\
    \ 1..sorted.length)\n    {\n        if(sorted[i] == value)\n        {\n      \
    \      count++;\n        }\n        else\n        {\n            counts[index]\
    \ = count;\n            values[index] = value;\n            index++;\n       \
    \     count = 1;\n            value = sorted[i];\n        }\n    }\n    counts[index]\
    \ = count;\n    values[index] = value;\n    index++;\n    long[] counts_sorted\
    \ = counts[0..index].sort;\n    long[] values_sorted = values[0..index].sort;\n\
    \    foreach(i; 0..index)\n    {\n        if(counts_sorted[i] >= values_sorted[i])\n\
    \        {\n            return values_sorted[i];\n        }\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp628i6_1f.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmp628i6_1f.d(44): Error: no property `sort` for type `long[]`

    /tmp/tmp628i6_1f.d(45): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp628i6_1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n \
    \   foreach(i; lst)\n    {\n        if(freq[i] >= i && i > max)\n        {\n \
    \           max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcz8ctwvs.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291ee]

    ??:? long tmpcz8ctwvs.search(long[]) [0x427d7e]

    ??:? void tmpcz8ctwvs.__unittest_L35_C1() [0x427e77]

    ??:? void tmpcz8ctwvs.__modtest() [0x428ec0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d21b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431339]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c085]

    ??:? runModuleUnitTests [0x42cff1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long result = -1L;\n    long max = 0L;\n\
    \    long[] arr = new long[lst.length];\n    foreach(i; lst)\n    {\n        arr[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(arr[i] >= i && arr[i] > max)\n\
    \        {\n            max = arr[i];\n            result = i;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = search;\n\n  \
    \  assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpous76mwa.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42924e]

    ??:? long tmpous76mwa.search(long[]) [0x427d91]

    ??:? void tmpous76mwa.__unittest_L37_C1() [0x427ed3]

    ??:? void tmpous76mwa.__modtest() [0x428f1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d27b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c10e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431399]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431848]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431325]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0e5]

    ??:? runModuleUnitTests [0x42d051]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; freq)\n\
    \    {\n        if(i >= freq[i])\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp13i9kjlc.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291ee]

    ??:? long tmp13i9kjlc.search(long[]) [0x427d7b]

    ??:? void tmp13i9kjlc.__unittest_L34_C1() [0x427e73]

    ??:? void tmp13i9kjlc.__modtest() [0x428ebc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d21b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431339]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c085]

    ??:? runModuleUnitTests [0x42cff1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] frequency = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        frequency[i] = 0;\n    }\n  \
    \  foreach(i; 0 .. lst.length)\n    {\n        frequency[lst[i]]++;\n    }\n \
    \   long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(frequency[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpqogu3298.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42922e]

    ??:? long tmpqogu3298.search(long[]) [0x427dd0]

    ??:? void tmpqogu3298.__unittest_L39_C1() [0x427eb3]

    ??:? void tmpqogu3298.__modtest() [0x428efc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d25b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431379]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431828]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431305]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0c5]

    ??:? runModuleUnitTests [0x42d031]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv08xaovz.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291d5]

    ??:? void tmpv08xaovz.__unittest_L40_C1() [0x428986]

    ??:? void tmpv08xaovz.__modtest() [0x428f58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d2b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c146]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4313d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43135d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c11d]

    ??:? runModuleUnitTests [0x42d089]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n\
    \            if(sorted[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(sorted[i] == freq[i] && sorted[i]\
    \ > max)\n        {\n            max = sorted[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxwhjc02.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxwhjc02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(lst[i] == freq[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwpkwvgnz.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x429225]

    ??:? void tmpwpkwvgnz.__unittest_L44_C1() [0x428101]

    ??:? void tmpwpkwvgnz.__modtest() [0x428fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d303]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c196]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431421]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4318d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4313ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c16d]

    ??:? runModuleUnitTests [0x42d0d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > 0 && freq[i] >= lst[i])\n        {\n            if(max < lst[i])\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbd6if5h3.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x429225]

    ??:? void tmpbd6if5h3.__unittest_L44_C1() [0x4289d6]

    ??:? void tmpbd6if5h3.__modtest() [0x428fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d303]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c196]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431421]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4318d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4313ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c16d]

    ??:? runModuleUnitTests [0x42d0d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] unique = new long[lst.length];\n    int i = 0;\n    foreach(e; lst)\n\
    \    {\n        if(!e in unique)\n        {\n            unique[i] = e;\n    \
    \        i++;\n        }\n    }\n    unique = unique[0..i];\n    foreach(e; unique)\n\
    \    {\n        foreach(f; lst)\n        {\n            if(e == f)\n         \
    \   {\n                freq[e]++;\n            }\n        }\n    }\n    foreach(e;\
    \ unique)\n    {\n        if(e <= freq[e])\n        {\n            return e;\n\
    \        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzm4eyj59.d(25): Error: incompatible types for `(!e) in (unique)`:
    `bool` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzm4eyj59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] unique = new long[sorted.length];\n\
    \    long count = 0;\n    long last = sorted[0];\n    foreach(i, v; sorted)\n\
    \    {\n        if(v != last)\n        {\n            unique[count] = last;\n\
    \            last = v;\n            count++;\n        }\n        counts[count]++;\n\
    \    }\n    unique[count] = last;\n    count++;\n    unique = unique[0..count];\n\
    \    counts = counts[0..count];\n    foreach(i, v; unique)\n    {\n        if(v\
    \ <= counts[i])\n        {\n            return v;\n        }\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjk02h9l9.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjk02h9l9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ unique = sorted.uniq;\n    long[] counts = unique.map!(x => sorted.count(x));\n\
    \    long[] result = unique.filter!(x => x <= counts[unique.indexOf(x)]);\n  \
    \  return result.length > 0 ? result.max : -1;\n}\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2ylvxo7.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpf2ylvxo7.d(21): Error: no property `uniq` for type `long[]`

    /tmp/tmpf2ylvxo7.d(22): Error: no property `map` for type `long[]`

    /tmp/tmpf2ylvxo7.d(23): Error: no property `filter` for type `long[]`

    /tmp/tmpf2ylvxo7.d(24): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2ylvxo7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i] += 1;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Dictionary!(long, long)();\n\
    \    foreach(e; lst)\n    {\n        if(d.containsKey(e))\n        {\n       \
    \     d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n   \
    \     }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(e\
    \ > d[e])\n        {\n            continue;\n        }\n        if(e > max)\n\
    \        {\n            max = e;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7jrx7mvy.d(20): Error: template instance `Dictionary!(long, long)`
    template `Dictionary` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jrx7mvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Dictionary!(long, long)();\n\
    \    foreach(e; lst)\n    {\n        if(d.containsKey(e))\n        {\n       \
    \     d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n   \
    \     }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(e\
    \ > max && d[e] >= e)\n        {\n            max = e;\n        }\n    }\n   \
    \ return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa_16d4zt.d(20): Error: template instance `Dictionary!(long, long)`
    template `Dictionary` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_16d4zt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long max = 0;\n    long maxFreq = 0;\n    long maxNum = 0;\n    long maxIndex\
    \ = 0;\n    long maxIndex2 = 0;\n    long maxIndex3 = 0;\n    long maxIndex4 =\
    \ 0;\n    long maxIndex5 = 0;\n    long maxIndex6 = 0;\n    long maxIndex7 = 0;\n\
    \    long maxIndex8 = 0;\n    long maxIndex9 = 0;\n    long maxIndex10 = 0;\n\
    \    long maxIndex11 = 0;\n    long maxIndex12 = 0;\n    long maxIndex13 = 0;\n\
    \    long maxIndex14 = 0;\n    long maxIndex15 = 0;\n    long maxIndex16 = 0;\n\
    \    long maxIndex17 = 0;\n    long maxIndex18 = 0;\n    long maxIndex19 = 0;\n\
    \    long maxIndex20 = 0;\n    long maxIndex21 = 0;\n    long maxIndex22 = 0;\n\
    \    long maxIndex23 = 0;\n    long maxIndex24 = 0;\n    long maxIndex25 = 0;\n\
    \    long maxIndex26 = 0;\n    long maxIndex27 = 0;\n    long maxIndex28 = 0;\n\
    \    long maxIndex29 = 0;\n    long maxIndex30 = 0;\n    long maxIndex31 = 0;\n\
    \    long maxIndex32 = 0;\n    long maxIndex33 = 0;\n    long maxIndex34 = 0;\n\
    \    long maxIndex35 = 0;\n    long maxIndex36 = 0;\n    long maxIndex37 = 0;\n\
    \    long maxIndex38 = 0;\n    long maxIndex39 = 0;\n    long maxIndex40 = 0;\n\
    \    long maxIndex41 = 0;\n    long maxIndex42 = 0;\n    long maxIndex43 = 0;\n\
    \    long maxIndex44 = 0;\n    long maxIndex45 = 0;\n    long maxIndex46 = 0;\n\
    \    long maxIndex47 = 0;\n    long maxIndex48 = 0;\n    long maxIndex49 = 0;\n\
    \   \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpewo69wyf.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewo69wyf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Dictionary!(long, long)();\n\
    \    foreach(e; lst)\n    {\n        if(d.containsKey(e))\n        {\n       \
    \     d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n   \
    \     }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(e\
    \ >= d[e] && e > max)\n        {\n            max = e;\n        }\n    }\n   \
    \ return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8h4y7ofi.d(20): Error: template instance `Dictionary!(long, long)`
    template `Dictionary` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8h4y7ofi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ unique = sorted.uniq;\n    long[] freq = unique.map!(a => sorted.count(a));\n\
    \    long[] freq_sorted = freq.dup.sort;\n    long[] freq_unique = freq_sorted.uniq;\n\
    \    long[] freq_freq = freq_unique.map!(a => freq_sorted.count(a));\n    long[]\
    \ freq_freq_sorted = freq_freq.dup.sort;\n    long[] freq_freq_unique = freq_freq_sorted.uniq;\n\
    \    long[] freq_freq_freq = freq_freq_unique.map!(a => freq_freq_sorted.count(a));\n\
    \    long[] freq_freq_freq_sorted = freq_freq_freq.dup.sort;\n    long[] freq_freq_freq_unique\
    \ = freq_freq_freq_sorted.uniq;\n    long[] freq_freq_freq_freq = freq_freq_freq_unique.map!(a\
    \ => freq_freq_freq_sorted.count(a));\n    long[] freq_freq_freq_freq_sorted =\
    \ freq_freq_freq_freq.dup.sort;\n    long[] freq_freq_freq_freq_unique = freq_freq_freq_freq_sorted.uniq;\n\
    \    long[] freq_freq_freq_freq_freq = freq_freq_freq_freq_unique.map!(a => freq_freq_freq_freq_sorted.count(a));\n\
    \    long[] freq_freq_freq_freq_freq_sorted = freq_freq_freq_freq_freq.dup.sort;\n\
    \    long[] freq_freq_freq_freq_freq_unique = freq_freq_freq_freq_\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpanf40p3r.d(37): Error: semicolon expected, not `unittest`

    /tmp/tmpanf40p3r.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanf40p3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] count = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(count[i] >= lst[i] && lst[i] > max)\n        {\n          \
    \  max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] val = new long[lst.length];\n    int j = 0;\n    for(int i = 0; i\
    \ < lst.length; i++)\n    {\n        if(j == 0)\n        {\n            freq[j]\
    \ = 1;\n            val[j] = lst[i];\n            j++;\n        }\n        else\n\
    \        {\n            bool found = false;\n            for(int k = 0; k < j;\
    \ k++)\n            {\n                if(val[k] == lst[i])\n                {\n\
    \                    freq[k]++;\n                    found = true;\n         \
    \           break;\n                }\n            }\n            if(!found)\n\
    \            {\n                freq[j] = 1;\n                val[j] = lst[i];\n\
    \                j++;\n            }\n        }\n    }\n    long max = 0;\n  \
    \  for(int i = 0; i < j; i++)\n    {\n        if(freq[i] >= val[i] && val[i] >\
    \ max)\n        {\n            max = val[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Map!(long, long)();\n \
    \   foreach(e; lst)\n    {\n        if(d.count(e) == 0)\n        {\n         \
    \   d[e] = 1;\n        }\n        else\n        {\n            d[e]++;\n     \
    \   }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(d[e]\
    \ >= e && e > max)\n        {\n            max = e;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm67f_9gm.d(20): Error: template instance `Map!(long, long)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm67f_9gm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = 0;\n    long maxCount = 0;\n\
    \    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n           \
    \ max = i;\n        }\n    }\n    foreach(long i; lst)\n    {\n        if(i ==\
    \ max)\n        {\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max)\n    {\n        return max;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\n/*\n    You are given a list of integers. Return the sum of the\
    \ integers that are greater than or equal to the \n    value of the greatest integer.\n\
    \    Examples:\n    >>> sum_greater([1L, 2L, 3L])\n    5L\n    >>> sum_greater([1L,\
    \ 2L, 3L, 4L])\n    10L\n    >>> sum_greater([1L, 2L, 3L, 4L, 5L])\n    15L\n\
    */\nlong sum_greater(long[] lst) \n{\n    long max = 0;\n    long sum = 0;\n \
    \   foreach(long i; lst)\n    {\n        if(i > max)\n        {\n            max\
    \ = i;\n        }\n    }\n    foreach(long i; lst)\n    {\n        if(i >= max)\n\
    \        {\n            sum += i;\n        }\n    }\n    return sum;\n}\n/*\n\
    \    You are given a list of integers. Return the sum of the integers that are\
    \ greater than or equal to the \n    value of the greatest integer.\n    Examples:\n\
    \    >>> sum_greater([1L, 2L, 3L])\n    5L\n    >>> sum_greater([1L, 2L, 3L, 4L])\n\
    \    10L\n    >>> sum_greater([1L, 2L, 3L, 4L, 5L])\n    15L\n*/\nlong sum_greater(long[]\
    \ lst) \n{\n    long max = 0;\n    long sum = 0;\n    foreach(long i; lst)\n \
    \   {\n        if(i >\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtxbpex_.d(94): Error: expression expected, not `unittest`

    /tmp/tmpqtxbpex_.d(95): Error: found `{` when expecting `)`

    /tmp/tmpqtxbpex_.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtxbpex_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort();\n    long max = 0;\n    long\
    \ max_freq = 0;\n    long max_freq_val = 0;\n    long last_val = sorted[0];\n\
    \    long last_freq = 0;\n    foreach(long i; sorted)\n    {\n        if(i ==\
    \ last_val)\n        {\n            last_freq++;\n        }\n        else\n  \
    \      {\n            if(last_freq > max_freq)\n            {\n              \
    \  max_freq = last_freq;\n                max_freq_val = last_val;\n         \
    \   }\n            last_val = i;\n            last_freq = 1;\n        }\n    }\n\
    \    if(last_freq > max_freq)\n    {\n        max_freq = last_freq;\n        max_freq_val\
    \ = last_val;\n    }\n    if(max_freq_val >= max_freq)\n    {\n        return\
    \ max_freq_val;\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpab0j8nme.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpab0j8nme.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i] += 1;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    int i = 0;\n    foreach(long num;\
    \ lst)\n    {\n        if(nums.length == 0)\n        {\n            nums ~= num;\n\
    \            freq ~= 1;\n        }\n        else\n        {\n            bool\
    \ found = false;\n            foreach(long n; nums)\n            {\n         \
    \       if(n == num)\n                {\n                    found = true;\n \
    \                   freq[i]++;\n                    break;\n                }\n\
    \                i++;\n            }\n            if(!found)\n            {\n\
    \                nums ~= num;\n                freq ~= 1;\n            }\n   \
    \     }\n        i = 0;\n    }\n    long max = 0;\n    foreach(long f; freq)\n\
    \    {\n        if(f >= max)\n        {\n            max = f;\n        }\n   \
    \ }\n    if(max == 0)\n    {\n        return -1;\n    }\n    else\n    {\n   \
    \     return max;\n    }\n}\nunittest\n{\n    alias candidate = search;\n\n  \
    \  assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprru94in4.d(72): unittest failure

    ----------------

    ??:? _d_unittestp [0x4292e5]

    ??:? void tmprru94in4.__unittest_L68_C1() [0x42803a]

    ??:? void tmprru94in4.__modtest() [0x429068]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42cc42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43178d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431c3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431719]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42cc19]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4297a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] cnt = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        cnt[lst[i]]++;\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(cnt[i] >= i && i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphjli4_y_.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42922e]

    ??:? long tmphjli4_y_.search(long[]) [0x427dd0]

    ??:? void tmphjli4_y_.__unittest_L39_C1() [0x427eb3]

    ??:? void tmphjli4_y_.__modtest() [0x428efc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d25b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431379]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431828]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431305]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0c5]

    ??:? runModuleUnitTests [0x42d031]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    if (lst.length == 0)\n        return\
    \ -1;\n    else\n    {\n        long[] freq = new long[lst.length];\n        long[]\
    \ num = new long[lst.length];\n        int count = 0;\n        foreach(long i;\
    \ lst)\n        {\n            if (i > 0)\n            {\n                if (count\
    \ == 0)\n                {\n                    num[count] = i;\n            \
    \        freq[count] = 1;\n                    count++;\n                }\n \
    \               else\n                {\n                    bool found = false;\n\
    \                    foreach(long j; 0..count)\n                    {\n      \
    \                  if (i == num[j])\n                        {\n             \
    \               freq[j]++;\n                            found = true;\n      \
    \                      break;\n                        }\n                   \
    \ }\n                    if (!found)\n                    {\n                \
    \        num[count] = i;\n                        freq[count] = 1;\n         \
    \               count++;\n                    }\n                }\n         \
    \   }\n        }\n        long max = -1;\n        foreach(long i; 0..count)\n\
    \        {\n            if (num[i] <= freq[i])\n            {\n              \
    \  if (num[i] > max)\n                    max = num[i];\n            }\n     \
    \   }\n        return max;\n    }\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    int i = 0;\n    foreach(long n;\
    \ lst)\n    {\n        int j = 0;\n        foreach(long m; nums)\n        {\n\
    \            if(n == m)\n            {\n                freq[j]++;\n         \
    \       break;\n            }\n            j++;\n        }\n        if(j == i)\n\
    \        {\n            nums[i] = n;\n            freq[i] = 1;\n            i++;\n\
    \        }\n    }\n    int j = 0;\n    foreach(long n; nums)\n    {\n        if(n\
    \ > freq[j])\n        {\n            return n;\n        }\n        j++;\n    }\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeaeoata5.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x429275]

    ??:? void tmpeaeoata5.__unittest_L53_C1() [0x427fca]

    ??:? void tmpeaeoata5.__modtest() [0x428ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d353]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4313fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1bd]

    ??:? runModuleUnitTests [0x42d129]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429738]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = -1;\n    foreach(long i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    long[] arr = new long[max + 1];\n    foreach(long i; lst)\n    {\n\
    \        arr[i]++;\n    }\n    foreach(long i; lst)\n    {\n        if(arr[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[sorted.length];\n    long[] vals = new long[sorted.length];\n\
    \    long[] freqs = new long[sorted.length];\n    long[] freqs2 = new long[sorted.length];\n\
    \    long[] freqs3 = new long[sorted.length];\n    long[] freqs4 = new long[sorted.length];\n\
    \    long[] freqs5 = new long[sorted.length];\n    long[] freqs6 = new long[sorted.length];\n\
    \    long[] freqs7 = new long[sorted.length];\n    long[] freqs8 = new long[sorted.length];\n\
    \    long[] freqs9 = new long[sorted.length];\n    long[] freqs10 = new long[sorted.length];\n\
    \    long[] freqs11 = new long[sorted.length];\n    long[] freqs12 = new long[sorted.length];\n\
    \    long[] freqs13 = new long[sorted.length];\n    long[] freqs14 = new long[sorted.length];\n\
    \    long[] freqs15 = new long[sorted.length];\n    long[] freqs16 = new long[sorted.length];\n\
    \    long[] freqs17 = new long[sorted.length];\n    long[] freqs18 = new long[sorted.length];\n\
    \    long[] freqs19 = new long[sorted.length];\n    long[] freqs20 = new long[sorted.length];\n\
    \    long[] freqs21 = new long[sorted.length];\n    long[] freqs22 = new long[sorted.length];\n\
    \    long[] freqs23 = new long[sorted.length];\n    long[] freqs24 = new long[sorted.length];\n\
    \    long[] freqs25 = new long[sorted.length];\n    long[] freqs26 = new long[sorted.length];\n\
    \    long[] freqs27 = new long[sorted.length];\n    long[] freqs28 = new long[sorted.length];\n\
    \    long[] freqs29 = new long[sorted.length];\n    long[]\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkh1q4yjr.d(53): Error: no identifier for declarator `long[]`

    /tmp/tmpkh1q4yjr.d(53): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh1q4yjr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new int[lst.length];\n    foreach(i,\
    \ ref e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, ref e; d)\n    {\n\
    \        if(e >= i && i > 0)\n            return i;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L,\
    \ 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n \
    \   assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5v2ectck.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42946e]

    ??:? long tmp5v2ectck.search(long[]) [0x428026]

    ??:? void tmp5v2ectck.__unittest_L32_C1() [0x4280f7]

    ??:? void tmp5v2ectck.__modtest() [0x429140]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d67f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c512]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43179d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431c4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431729]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c4e9]

    ??:? runModuleUnitTests [0x42d455]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Map!(long, long)();\n \
    \   foreach(e; lst)\n    {\n        if(d.contains(e))\n        {\n           \
    \ d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n       \
    \ }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(e >\
    \ d[e])\n        {\n            continue;\n        }\n        if(e > max)\n  \
    \      {\n            max = e;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0sa2bhen.d(20): Error: template instance `Map!(long, long)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0sa2bhen.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] lst2 = lst.dup;\n    lst2.sort;\n\
    \    long[] lst3 = lst2.dup;\n    lst3.sort(lst2.count);\n    long[] lst4 = lst3.dup;\n\
    \    lst4.sort;\n    long[] lst5 = lst4.dup;\n    lst5.sort(lst4.count);\n   \
    \ long[] lst6 = lst5.dup;\n    lst6.sort;\n    long[] lst7 = lst6.dup;\n    lst7.sort(lst6.count);\n\
    \    long[] lst8 = lst7.dup;\n    lst8.sort;\n    long[] lst9 = lst8.dup;\n  \
    \  lst9.sort(lst8.count);\n    long[] lst10 = lst9.dup;\n    lst10.sort;\n   \
    \ long[] lst11 = lst10.dup;\n    lst11.sort(lst10.count);\n    long[] lst12 =\
    \ lst11.dup;\n    lst12.sort;\n    long[] lst13 = lst12.dup;\n    lst13.sort(lst12.count);\n\
    \    long[] lst14 = lst13.dup;\n    lst14.sort;\n    long[] lst15 = lst14.dup;\n\
    \    lst15.sort(lst14.count);\n    long[] lst16 = lst15.dup;\n    lst16.sort;\n\
    \    long[] lst17 = lst16.dup;\n    lst17.sort(lst16.count);\n    long[] lst18\
    \ = lst17.dup;\n    lst18.sort;\n    long[] lst19 = lst18.dup;\n    lst19.sort(lst18.count);\n\
    \    long[] lst20 = lst19.dup;\n    lst20.sort;\n    long[] lst21 = lst20.dup;\n\
    \    lst21\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9d35vjl.d(60): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpw9d35vjl.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9d35vjl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort();\n\
    \    long max = -1;\n    long maxFreq = -1;\n    long count = 0;\n    long num\
    \ = sorted[0];\n    foreach(long i; sorted)\n    {\n        if(i == num)\n   \
    \     {\n            count++;\n        }\n        else\n        {\n          \
    \  nums[count-1] = num;\n            freq[count-1] = count;\n            count\
    \ = 1;\n            num = i;\n        }\n    }\n    nums[count-1] = num;\n   \
    \ freq[count-1] = count;\n    foreach(long i; 0..nums.length)\n    {\n       \
    \ if(nums[i] > 0 && nums[i] <= freq[i])\n        {\n            max = max(max,\
    \ nums[i]);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbfklmjeg.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpbfklmjeg.d(48): Error: function expected before `()`, not `max` of type
    `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfklmjeg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] nums2 = new long[lst.length];\n\
    \    long[] freq2 = new long[lst.length];\n    long[] nums3 = new long[lst.length];\n\
    \    long[] freq3 = new long[lst.length];\n    long[] nums4 = new long[lst.length];\n\
    \    long[] freq4 = new long[lst.length];\n    long[] nums5 = new long[lst.length];\n\
    \    long[] freq5 = new long[lst.length];\n    long[] nums6 = new long[lst.length];\n\
    \    long[] freq6 = new long[lst.length];\n    long[] nums7 = new long[lst.length];\n\
    \    long[] freq7 = new long[lst.length];\n    long[] nums8 = new long[lst.length];\n\
    \    long[] freq8 = new long[lst.length];\n    long[] nums9 = new long[lst.length];\n\
    \    long[] freq9 = new long[lst.length];\n    long[] nums10 = new long[lst.length];\n\
    \    long[] freq10 = new long[lst.length];\n    long[] nums11 = new long[lst.length];\n\
    \    long[] freq11 = new long[lst.length];\n    long[] nums12 = new long[lst.length];\n\
    \    long[] freq12 = new long[lst.length];\n    long[] nums13 = new long[lst.length];\n\
    \    long[] freq13 = new long[lst.length];\n    long[] nums14 = new long[lst.length];\n\
    \    long[] freq14 = new long[lst.length];\n    long[] nums15 = new long[lst.length];\n\
    \    long[] freq15 = new long[lst.length];\n    long[] nums16 = new long[lst.length];\n\
    \    long[] freq16 = new long[lst.length];\nunittest\n{\n    alias candidate =\
    \ search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1r7x9xk.d(52): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1r7x9xk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Dictionary!(long, long)();\n\
    \    foreach(e; lst)\n    {\n        if(d.containsKey(e))\n        {\n       \
    \     d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n   \
    \     }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(e\
    \ > max && d[e] >= e)\n        {\n            max = e;\n        }\n    }\n   \
    \ return max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa_16d4zt.d(20): Error: template instance `Dictionary!(long, long)`
    template `Dictionary` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_16d4zt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    int i = 0;\n    foreach(long x; lst)\n\
    \    {\n        int j = 0;\n        foreach(long y; lst)\n        {\n        \
    \    if(x == y)\n            {\n                freq[i]++;\n            }\n  \
    \          j++;\n        }\n        num[i] = x;\n        i++;\n    }\n    long\
    \ max = -1;\n    for(int k = 0; k < lst.length; k++)\n    {\n        if(num[k]\
    \ <= freq[k] && num[k] > max)\n        {\n            max = num[k];\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort();\n  \
    \  long[] unique = sorted.uniq;\n    long[] freq = unique.map!(x => sorted.count(x));\n\
    \    long[] freq_sorted = freq.dup.sort;\n    long[] freq_unique = freq_sorted.uniq;\n\
    \    long[] freq_freq = freq_unique.map!(x => freq_sorted.count(x));\n    long[]\
    \ freq_freq_sorted = freq_freq.dup.sort;\n    long[] freq_freq_unique = freq_freq_sorted.uniq;\n\
    \    long[] freq_freq_freq = freq_freq_unique.map!(x => freq_freq_sorted.count(x));\n\
    \    long[] freq_freq_freq_sorted = freq_freq_freq.dup.sort;\n    long[] freq_freq_freq_unique\
    \ = freq_freq_freq_sorted.uniq;\n    long[] freq_freq_freq_freq = freq_freq_freq_unique.map!(x\
    \ => freq_freq_freq_sorted.count(x));\n    long[] freq_freq_freq_freq_sorted =\
    \ freq_freq_freq_freq.dup.sort;\n    long[] freq_freq_freq_freq_unique = freq_freq_freq_freq_sorted.uniq;\n\
    \    long[] freq_freq_freq_freq_freq = freq_freq_freq_freq_unique.map!(x => freq_freq_freq_freq_sorted.count(x));\n\
    \    long[] freq_freq_freq_freq_freq_sorted = freq_freq_freq_freq_freq.dup.sort;\n\
    \    long[] freq_freq_freq_freq_freq_unique = freq_freq_freq_freq_\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3qd4ud1.d(37): Error: semicolon expected, not `unittest`

    /tmp/tmpz3qd4ud1.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3qd4ud1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    int i = 0;\n    foreach(long x; lst)\n\
    \    {\n        if(x > 0)\n        {\n            int j = 0;\n            while(j\
    \ < i)\n            {\n                if(x == num[j])\n                {\n  \
    \                  freq[j]++;\n                    break;\n                }\n\
    \                j++;\n            }\n            if(j == i)\n            {\n\
    \                num[i] = x;\n                freq[i] = 1;\n                i++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    for(int j = 0; j < i;\
    \ j++)\n    {\n        if(freq[j] >= num[j] && num[j] > max)\n        {\n    \
    \        max = num[j];\n        }\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort();\n  \
    \  long[] unique = sorted.dup.uniq;\n    long[] counts = unique.map!(x => sorted.count(x));\n\
    \    long[] result = unique.zip(counts).filter!(x => x[0] <= x[1]).map!(x => x[0]).sort;\n\
    \    if (result.length == 0)\n        return -1;\n    else\n        return result[result.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_jq2f4hw.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmp_jq2f4hw.d(21): Error: no property `uniq` for type `long[]`

    /tmp/tmp_jq2f4hw.d(22): Error: no property `map` for type `long[]`

    /tmp/tmp_jq2f4hw.d(23): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jq2f4hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n \
    \   foreach(i; lst)\n    {\n        if(freq[i] >= i && i > max)\n        {\n \
    \           max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcz8ctwvs.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291ee]

    ??:? long tmpcz8ctwvs.search(long[]) [0x427d7e]

    ??:? void tmpcz8ctwvs.__unittest_L35_C1() [0x427e77]

    ??:? void tmpcz8ctwvs.__modtest() [0x428ec0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d21b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431339]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c085]

    ??:? runModuleUnitTests [0x42cff1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    long count = 0;\n    long num = 0;\n    long max = 0;\n    long maxCount\
    \ = 0;\n    long maxNum = 0;\n    long maxIndex = 0;\n    long index = 0;\n  \
    \  foreach(i; sorted)\n    {\n        if(i != num)\n        {\n            nums[index]\
    \ = num;\n            counts[index] = count;\n            index++;\n         \
    \   count = 1;\n            num = i;\n        }\n        else\n        {\n   \
    \         count++;\n        }\n    }\n    nums[index] = num;\n    counts[index]\
    \ = count;\n    foreach(i; 0..counts.length)\n    {\n        if(counts[i] >= nums[i])\n\
    \        {\n            if(counts[i] > maxCount)\n            {\n            \
    \    maxCount = counts[i];\n                maxNum = nums[i];\n              \
    \  maxIndex = i;\n            }\n            else if(counts[i] == maxCount)\n\
    \            {\n                if(nums[i] > maxNum)\n                {\n    \
    \                maxNum = nums[i];\n                    maxIndex = i;\n      \
    \          }\n            }\n        }\n    }\n    if(maxCount == 0)\n    {\n\
    \        return -1;\n    }\n    return maxNum;\n}\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9lwl3jl8.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lwl3jl8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] temp = lst.dup;\n    temp.sort;\n\
    \    long[] temp2 = temp.dup;\n    temp2.removeDuplicates;\n    temp2.sort;\n\
    \    long[] temp3 = temp2.dup;\n    temp3.reverse;\n    foreach(i; temp3)\n  \
    \  {\n        if(temp.count(i) >= i)\n        {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n\
    \    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvjvalmc.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpjvjvalmc.d(23): Error: no property `removeDuplicates` for type `long[]`

    /tmp/tmpjvjvalmc.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmpjvjvalmc.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpjvjvalmc.d(29): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvjvalmc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] lst2 = lst.dup;\n    lst2.sort();\n\
    \    long[] lst3 = lst2.dup;\n    lst3.removeDuplicates();\n    long[] lst4 =\
    \ lst3.dup;\n    lst4.reverse;\n    foreach(long i; lst4)\n    {\n        if(i\
    \ <= lst2.countUntil(i))\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpra2x9430.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpra2x9430.d(23): Error: no property `removeDuplicates` for type `long[]`

    /tmp/tmpra2x9430.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpra2x9430.d(28): Error: no property `countUntil` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpra2x9430.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new int[lst.length];\n    foreach(i,\
    \ ref e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, ref e; d)\n    {\n\
    \        if(e >= i && i > 0)\n            return i;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L,\
    \ 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n \
    \   assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5v2ectck.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42946e]

    ??:? long tmp5v2ectck.search(long[]) [0x428026]

    ??:? void tmp5v2ectck.__unittest_L32_C1() [0x4280f7]

    ??:? void tmp5v2ectck.__modtest() [0x429140]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d67f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c512]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43179d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431c4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431729]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c4e9]

    ??:? runModuleUnitTests [0x42d455]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] values = new long[lst.length];\n    long[] sorted = lst.dup;\n   \
    \ sorted.sort();\n    long count = 0;\n    long value = 0;\n    long max = 0;\n\
    \    long maxIndex = 0;\n    for (long i = 0; i < sorted.length; i++)\n    {\n\
    \        if (i == 0)\n        {\n            count = 1;\n            value = sorted[i];\n\
    \        }\n        else if (sorted[i] == sorted[i - 1])\n        {\n        \
    \    count++;\n        }\n        else\n        {\n            counts[maxIndex]\
    \ = count;\n            values[maxIndex] = value;\n            maxIndex++;\n \
    \           count = 1;\n            value = sorted[i];\n        }\n    }\n   \
    \ counts[maxIndex] = count;\n    values[maxIndex] = value;\n    maxIndex++;\n\
    \    for (long i = 0; i < maxIndex; i++)\n    {\n        if (values[i] >= counts[i])\n\
    \        {\n            max = max(max, values[i]);\n        }\n    }\n    return\
    \ max == 0 ? -1 : max;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcqcsvomc.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpcqcsvomc.d(55): Error: function expected before `()`, not `max` of type
    `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqcsvomc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] count = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    long[] max = new long[lst.length];\n\
    \    long[] max_num = new long[lst.length];\n    long[] max_count = new long[lst.length];\n\
    \    long[] max_max = new long[lst.length];\n    long[] max_max_num = new long[lst.length];\n\
    \    long[] max_max_count = new long[lst.length];\n    long[] max_max_max = new\
    \ long[lst.length];\n    long[] max_max_max_num = new long[lst.length];\n    long[]\
    \ max_max_max_count = new long[lst.length];\n    long[] max_max_max_max = new\
    \ long[lst.length];\n    long[] max_max_max_max_num = new long[lst.length];\n\
    \    long[] max_max_max_max_count = new long[lst.length];\n    long[] max_max_max_max_max\
    \ = new long[lst.length];\n    long[] max_max_max_max_max_num = new long[lst.length];\n\
    \    long[] max_max_max_max_max_count = new long[lst.length];\n    long[] max_max_max_max_max_max\
    \ = new long[lst.length];\n    long[] max_max_max_max_max_max_num = new long[lst.length];\n\
    \    long[] max_max_max_max_max_max_count = new long[lst.length];\n    long[]\
    \ max_max_max_max_max_max_max = new long[lst.length];\n    long[] max_max_max_max_max_max_max_num\
    \ = new long[lst.length];\n    long[] max_max_max_max_max_max_max_count = new\
    \ long[lst.length];\n    long[] max_max_max_max_max_max_max_max = new long[lst.length];\n\
    \    long[] max_\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new long[lst.length];\n   \
    \ foreach(i, e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, e; d)\n  \
    \  {\n        if(e >= i && e != 0)\n        {\n            return i;\n       \
    \ }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n\
    \    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpvej_kj9y.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291c6]

    ??:? long tmpvej_kj9y.search(long[]) [0x427d7e]

    ??:? void tmpvej_kj9y.__unittest_L34_C1() [0x427e4f]

    ??:? void tmpvej_kj9y.__modtest() [0x428e98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d1f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c086]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431311]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43129d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c05d]

    ??:? runModuleUnitTests [0x42cfc9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = 0;\n    long max_count =\
    \ 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n      \
    \      max = i;\n        }\n    }\n    foreach(long i; lst)\n    {\n        if(i\
    \ == max)\n        {\n            max_count++;\n        }\n    }\n    if(max_count\
    \ >= max)\n    {\n        return max;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwqfyot1r.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290ed]

    ??:? void tmpwqfyot1r.__unittest_L45_C1() [0x427e42]

    ??:? void tmpwqfyot1r.__modtest() [0x428e70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d0fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bf8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431121]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4315d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4310ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf65]

    ??:? runModuleUnitTests [0x42ced1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42953c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] frequency = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        frequency[i] = 0;\n    }\n  \
    \  foreach(i; 0 .. lst.length)\n    {\n        frequency[lst[i]] += 1;\n    }\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(frequency[i] >= i)\n     \
    \   {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphg538yjq.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429226]

    ??:? long tmphg538yjq.search(long[]) [0x427dd0]

    ??:? void tmphg538yjq.__unittest_L38_C1() [0x427eab]

    ??:? void tmphg538yjq.__modtest() [0x428ef4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c0bd]

    ??:? runModuleUnitTests [0x42d029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] arr2 = arr.dup;\n    arr2.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr3 = arr.dup;\n    arr3.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr4 = arr.dup;\n    arr4.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr5 = arr.dup;\n    arr5.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr6 = arr.dup;\n    arr6.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr7 = arr.dup;\n    arr7.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr8 = arr.dup;\n    arr8.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr9 = arr.dup;\n    arr9.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr10 = arr.dup;\n    arr10.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr11 = arr.dup;\n    arr11.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr12 = arr.dup;\n    arr12.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr13 = arr.dup;\n    arr13.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr14 = arr.dup;\n    arr14.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr15 = arr.dup;\n    arr15.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr16 = arr.dup;\n    arr16.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr17 = arr.dup;\n    arr17.sort(std.algorithm.comparison\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq93ki9ju.d(54): Error: found `unittest` when expecting `,`

    /tmp/tmpq93ki9ju.d(84): Error: found `void` when expecting `,`

    /tmp/tmpq93ki9ju.d(84): Error: found `{` when expecting `,`

    /tmp/tmpq93ki9ju.d(84): Error: expression expected, not `}`

    /tmp/tmpq93ki9ju.d(84): Error: found `End of File` when expecting `,`

    /tmp/tmpq93ki9ju.d(84): Error: found `End of File` when expecting `)`

    /tmp/tmpq93ki9ju.d(84): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpq93ki9ju.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq93ki9ju.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto m = new Map!(long, long);\n   \
    \ foreach(e; lst)\n    {\n        if(m.count(e) == 0)\n            m[e] = 1;\n\
    \        else\n            m[e]++;\n    }\n    long max = -1;\n    foreach(e;\
    \ m)\n    {\n        if(e.value >= e.key && e.key > max)\n            max = e.key;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyou1op6s.d(20): Error: template instance `Map!(long, long)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyou1op6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpexbbqysg.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291e6]

    ??:? long tmpexbbqysg.search(long[]) [0x427d7b]

    ??:? void tmpexbbqysg.__unittest_L34_C1() [0x427e6b]

    ??:? void tmpexbbqysg.__modtest() [0x428eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d213]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431331]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c07d]

    ??:? runModuleUnitTests [0x42cfe9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] nums_sorted = new long[lst.length];\n\
    \    long[] freq_sorted = new long[lst.length];\n    long[] freq_sorted_copy =\
    \ new long[lst.length];\n    long[] nums_sorted_copy = new long[lst.length];\n\
    \    long[] nums_sorted_copy2 = new long[lst.length];\n    long[] freq_sorted_copy2\
    \ = new long[lst.length];\n    long[] nums_sorted_copy3 = new long[lst.length];\n\
    \    long[] freq_sorted_copy3 = new long[lst.length];\n    long[] nums_sorted_copy4\
    \ = new long[lst.length];\n    long[] freq_sorted_copy4 = new long[lst.length];\n\
    \    long[] nums_sorted_copy5 = new long[lst.length];\n    long[] freq_sorted_copy5\
    \ = new long[lst.length];\n    long[] nums_sorted_copy6 = new long[lst.length];\n\
    \    long[] freq_sorted_copy6 = new long[lst.length];\n    long[] nums_sorted_copy7\
    \ = new long[lst.length];\n    long[] freq_sorted_copy7 = new long[lst.length];\n\
    \    long[] nums_sorted_copy8 = new long[lst.length];\n    long[] freq_sorted_copy8\
    \ = new long[lst.length];\n    long[] nums_sorted_copy9 = new long[lst.length];\n\
    \    long[] freq_sorted_copy9 = new long[lst.length];\n    long[] nums_sorted_copy10\
    \ = new long[lst.length];\n    long[] freq_sorted_copy10 = new long[lst.length];\n\
    \    long[] nums_sorted_copy11 = new long[lst.length];\n    long[] fre\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr3im4fyv.d(46): Error: semicolon expected, not `unittest`

    /tmp/tmpr3im4fyv.d(46): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3im4fyv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] values = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long[] result2 = new long[lst.length];\n    long[] result3 = new long[lst.length];\n\
    \    long[] result4 = new long[lst.length];\n    long[] result5 = new long[lst.length];\n\
    \    long[] result6 = new long[lst.length];\n    long[] result7 = new long[lst.length];\n\
    \    long[] result8 = new long[lst.length];\n    long[] result9 = new long[lst.length];\n\
    \    long[] result10 = new long[lst.length];\n    long[] result11 = new long[lst.length];\n\
    \    long[] result12 = new long[lst.length];\n    long[] result13 = new long[lst.length];\n\
    \    long[] result14 = new long[lst.length];\n    long[] result15 = new long[lst.length];\n\
    \    long[] result16 = new long[lst.length];\n    long[] result17 = new long[lst.length];\n\
    \    long[] result18 = new long[lst.length];\n    long[] result19 = new long[lst.length];\n\
    \    long[] result20 = new long[lst.length];\n    long[] result21 = new long[lst.length];\n\
    \    long[] result22 = new long[lst.length];\n    long[] result23 = new long[lst.length];\n\
    \    long[] result24 = new long[lst.length];\n    long[] result25 = new long[lst.length];\n\
    \    long[] result26 = new long[lst.length];\n    long[] result27 = new long[lst.length];\n\
    \    long[] result28 = new long[lst.length];\n    long[] result29 = new long[lst.length];\n\
    \    long[] result30 = new long[lst.length];\n    long[] result31 = new long[lst.length];\n\
    \    long[] result32 = new long[lst.length];\n    long\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iaalsy3.d(55): Error: no identifier for declarator `long`

    /tmp/tmp_iaalsy3.d(55): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iaalsy3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new long[lst.length];\n   \
    \ foreach(i, x; lst)\n    {\n        d[x]++;\n    }\n    foreach(i, x; d)\n  \
    \  {\n        if(x >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpg90984xl.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291c6]

    ??:? long tmpg90984xl.search(long[]) [0x427d7e]

    ??:? void tmpg90984xl.__unittest_L34_C1() [0x427e4b]

    ??:? void tmpg90984xl.__modtest() [0x428e94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d1f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c086]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431311]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43129d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c05d]

    ??:? runModuleUnitTests [0x42cfc9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] sorted = new long[lst.length];\n    long[] sortedCounts = new long[lst.length];\n\
    \    long max = 0;\n    long maxCount = 0;\n    long maxIndex = 0;\n    long maxCountIndex\
    \ = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        counts[i] = 0;\n\
    \        sorted[i] = lst[i];\n        sortedCounts[i] = 0;\n    }\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst.length; j++)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                counts[i]++;\n\
    \            }\n        }\n    }\n    for(int i = 0; i < lst.length; i++)\n  \
    \  {\n        for(int j = 0; j < lst.length; j++)\n        {\n            if(sorted[i]\
    \ < sorted[j])\n            {\n                long temp = sorted[i];\n      \
    \          sorted[i] = sorted[j];\n                sorted[j] = temp;\n       \
    \     }\n        }\n    }\n    for(int i = 0; i < lst.length; i++)\n    {\n  \
    \      for(int j = 0; j < lst.length; j++)\n        {\n            if(sortedCounts[i]\
    \ < sortedCounts[j])\n            {\n                long temp = sortedCounts[i];\n\
    \                sortedCounts[i] = sortedCounts[j];\n                sortedCounts[j]\
    \ = temp;\n            }\n        }\n    }\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(sorted[i] > max)\n        {\n            max = sorted[i];\n\
    \            maxIndex = i;\n        }\n    }\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(sortedCounts[i] > maxCount)\n        {\nunittest\n{\n\
    \    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv9x3jdsl.d(79): Error: found `unittest` instead of statement

    /tmp/tmpv9x3jdsl.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpv9x3jdsl.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9x3jdsl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    int[] freq = new int[lst.length];\n\
    \    int max = 0;\n    foreach(i; lst)\n    {\n        freq[i]++;\n        max\
    \ = max(max, i);\n    }\n    foreach(i; 0..max)\n    {\n        if(freq[i] >=\
    \ i)\n            return i;\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jb_szon.d(25): Error: function expected before `()`, not `max`
    of type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jb_szon.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] sorted = lst.dup.sort();\n  \
    \  long[] unique = sorted.uniq;\n    long[] count = unique.map!(x => sorted.count(x));\n\
    \    long[] result = unique.filter!(x => count[unique.indexOf(x)] >= x);\n   \
    \ return result.length > 0 ? result[result.length - 1] : -1;\n}\nunittest\n{\n\
    \    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) ==\
    \ 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpec2u63iq.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpec2u63iq.d(21): Error: no property `uniq` for type `long[]`

    /tmp/tmpec2u63iq.d(22): Error: no property `map` for type `long[]`

    /tmp/tmpec2u63iq.d(23): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpec2u63iq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] arr2 = arr.dup;\n    arr2.sort;\n    long[] arr3 = arr2.dup;\n   \
    \ arr3.sort;\n    long[] arr4 = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n\
    \    arr5.sort;\n    long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7\
    \ = arr6.dup;\n    arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n \
    \   long[] arr9 = arr8.dup;\n    arr9.sort;\n    long[] arr10 = arr9.dup;\n  \
    \  arr10.sort;\n    long[] arr11 = arr10.dup;\n    arr11.sort;\n    long[] arr12\
    \ = arr11.dup;\n    arr12.sort;\n    long[] arr13 = arr12.dup;\n    arr13.sort;\n\
    \    long[] arr14 = arr13.dup;\n    arr14.sort;\n    long[] arr15 = arr14.dup;\n\
    \    arr15.sort;\n    long[] arr16 = arr15.dup;\n    arr16.sort;\n    long[] arr17\
    \ = arr16.dup;\n    arr17.sort;\n    long[] arr18 = arr17.dup;\n    arr18.sort;\n\
    \    long[] arr19 = arr18.dup;\n    arr19.sort;\n    long[] arr20 = arr19.dup;\n\
    \    arr20.sort;\n    long[] arr21 = arr20.dup;\n    arr21.sort;\n    long[] arr22\
    \ = arr21.dup;\n    arr22.sort;\n    long[] arr23 = arr22.dup;\n    arr23.sort;\n\
    \    long[] arr24 = arr23.dup;\n    arr24.sort;\n    long[] arr25 = arr24.dup;\n\
    \    arr25.sort;\n    long[] arr26 = arr25.dup;\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsn5icx6.d(71): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsn5icx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long result = -1L;\n    long max = 0L;\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0..lst.length)\n  \
    \  {\n        counts[i] = 0L;\n        foreach(j; 0..lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                counts[i]++;\n\
    \            }\n        }\n        if(counts[i] >= lst[i] && lst[i] > max)\n \
    \       {\n            max = lst[i];\n            result = lst[i];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = search;\n\n\
    \    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] nums2 = new long[lst.length];\n\
    \    long[] freq2 = new long[lst.length];\n    long[] nums3 = new long[lst.length];\n\
    \    long[] freq3 = new long[lst.length];\n    long[] nums4 = new long[lst.length];\n\
    \    long[] freq4 = new long[lst.length];\n    long[] nums5 = new long[lst.length];\n\
    \    long[] freq5 = new long[lst.length];\n    long[] nums6 = new long[lst.length];\n\
    \    long[] freq6 = new long[lst.length];\n    long[] nums7 = new long[lst.length];\n\
    \    long[] freq7 = new long[lst.length];\n    long[] nums8 = new long[lst.length];\n\
    \    long[] freq8 = new long[lst.length];\n    long[] nums9 = new long[lst.length];\n\
    \    long[] freq9 = new long[lst.length];\n    long[] nums10 = new long[lst.length];\n\
    \    long[] freq10 = new long[lst.length];\n    long[] nums11 = new long[lst.length];\n\
    \    long[] freq11 = new long[lst.length];\n    long[] nums12 = new long[lst.length];\n\
    \    long[] freq12 = new long[lst.length];\n    long[] nums13 = new long[lst.length];\n\
    \    long[] freq13 = new long[lst.length];\n    long[] nums14 = new long[lst.length];\n\
    \    long[] freq14 = new long[lst.length];\n    long[] nums15 = new long[lst.length];\n\
    \    long[] freq15 = new long[lst.length];\n    long[] nums16 = new long[lst.length];\n\
    \    long[] freq16 = new long[lst.length];\nunittest\n{\n    alias candidate =\
    \ search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1r7x9xk.d(52): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1r7x9xk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long result = -1L;\n    long[] arr =\
    \ new long[lst.length];\n    foreach(long i; lst)\n    {\n        arr[i]++;\n\
    \    }\n    foreach(long i; lst)\n    {\n        if(arr[i] >= i)\n        {\n\
    \            result = i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L])\
    \ == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcrzka49h.d(24): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4291ee]

    ??:? long tmpcrzka49h.search(long[]) [0x427d89]

    ??:? void tmpcrzka49h.__unittest_L35_C1() [0x427e73]

    ??:? void tmpcrzka49h.__modtest() [0x428ebc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d21b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c0ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431339]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c085]

    ??:? runModuleUnitTests [0x42cff1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]['
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    int count = 0;\n    foreach(long\
    \ i; lst)\n    {\n        if(!nums.canFind(i))\n        {\n            nums[count]\
    \ = i;\n            freq[count] = 1;\n            count++;\n        }\n      \
    \  else\n        {\n            freq[nums.indexOf(i)]++;\n        }\n    }\n \
    \   long max = -1;\n    foreach(long i; nums)\n    {\n        if(i > 0 && freq[nums.indexOf(i)]\
    \ >= i)\n        {\n            if(i > max)\n            {\n                max\
    \ = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_5smw8ix.d(25): Error: no property `canFind` for type `long[]`

    /tmp/tmp_5smw8ix.d(33): Error: no property `indexOf` for type `long[]`

    /tmp/tmp_5smw8ix.d(39): Error: no property `indexOf` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_5smw8ix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = 0;\n    long max_count =\
    \ 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n      \
    \      max = i;\n        }\n    }\n    foreach(long i; lst)\n    {\n        if(i\
    \ == max)\n        {\n            max_count++;\n        }\n    }\n    if(max_count\
    \ >= max)\n    {\n        return max;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L,\
    \ 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) ==\
    \ 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L])\
    \ == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L,\
    \ 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwqfyot1r.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290ed]

    ??:? void tmpwqfyot1r.__unittest_L45_C1() [0x427e42]

    ??:? void tmpwqfyot1r.__modtest() [0x428e70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d0fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bf8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431121]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4315d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4310ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf65]

    ??:? runModuleUnitTests [0x42ced1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42953c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] counts = new long[lst.length];\n\
    \    long[] values = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long[] result2 = new long[lst.length];\n    long[] result3 = new long[lst.length];\n\
    \    long[] result4 = new long[lst.length];\n    long[] result5 = new long[lst.length];\n\
    \    long[] result6 = new long[lst.length];\n    long[] result7 = new long[lst.length];\n\
    \    long[] result8 = new long[lst.length];\n    long[] result9 = new long[lst.length];\n\
    \    long[] result10 = new long[lst.length];\n    long[] result11 = new long[lst.length];\n\
    \    long[] result12 = new long[lst.length];\n    long[] result13 = new long[lst.length];\n\
    \    long[] result14 = new long[lst.length];\n    long[] result15 = new long[lst.length];\n\
    \    long[] result16 = new long[lst.length];\n    long[] result17 = new long[lst.length];\n\
    \    long[] result18 = new long[lst.length];\n    long[] result19 = new long[lst.length];\n\
    \    long[] result20 = new long[lst.length];\n    long[] result21 = new long[lst.length];\n\
    \    long[] result22 = new long[lst.length];\n    long[] result23 = new long[lst.length];\n\
    \    long[] result24 = new long[lst.length];\n    long[] result25 = new long[lst.length];\n\
    \    long[] result26 = new long[lst.length];\n    long[] result27 = new long[lst.length];\n\
    \    long[] result28 = new long[lst.length];\n    long[] result29 = new long[lst.length];\n\
    \    long[] result30 = new long[lst.length];\n    long[] result31 = new long[lst.length];\n\
    \    long[] result32 = new long[lst.length];\n    long\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iaalsy3.d(55): Error: no identifier for declarator `long`

    /tmp/tmp_iaalsy3.d(55): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iaalsy3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    long[] result2 = new long[lst.length];\n    long[] result3 = new long[lst.length];\n\
    \    long[] result4 = new long[lst.length];\n    long[] result5 = new long[lst.length];\n\
    \    long[] result6 = new long[lst.length];\n    long[] result7 = new long[lst.length];\n\
    \    long[] result8 = new long[lst.length];\n    long[] result9 = new long[lst.length];\n\
    \    long[] result10 = new long[lst.length];\n    long[] result11 = new long[lst.length];\n\
    \    long[] result12 = new long[lst.length];\n    long[] result13 = new long[lst.length];\n\
    \    long[] result14 = new long[lst.length];\n    long[] result15 = new long[lst.length];\n\
    \    long[] result16 = new long[lst.length];\n    long[] result17 = new long[lst.length];\n\
    \    long[] result18 = new long[lst.length];\n    long[] result19 = new long[lst.length];\n\
    \    long[] result20 = new long[lst.length];\n    long[] result21 = new long[lst.length];\n\
    \    long[] result22 = new long[lst.length];\n    long[] result23 = new long[lst.length];\n\
    \    long[] result24 = new long[lst.length];\n    long[] result25 = new long[lst.length];\n\
    \    long[] result26 = new long[lst.length];\n    long[] result27 = new long[lst.length];\n\
    \    long[] result28 = new long[lst.length];\n    long[] result29 = new long[lst.length];\n\
    \    long[] result30 = new long[lst.length];\n    long[] result31 = new long[lst.length];\n\
    \    long[] result32 = new long[lst.length];\n    long[] result33 = new long[lst.length];\n\
    \    long[] result34 = new long[lst.length];\n\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgt3zm7eu.d(55): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgt3zm7eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long max = -1;\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i] =\
    \ 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(lst[i] > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\
    \n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort();\n    long[] unique = sorted.uniq;\n\
    \    foreach(i; 0..unique.length)\n    {\n        freq[i] = sorted.count(unique[i]);\n\
    \    }\n    foreach(i; 0..unique.length)\n    {\n        if(unique[i] <= freq[i])\n\
    \        {\n            return unique[i];\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p9q986k.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp7p9q986k.d(23): Error: no property `uniq` for type `long[]`

    /tmp/tmp7p9q986k.d(26): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p9q986k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    auto d = new Dictionary!int();\n   \
    \ foreach(e; lst)\n    {\n        if(d.count(e) == 0)\n            d[e] = 1;\n\
    \        else\n            d[e]++;\n    }\n    long max = -1;\n    foreach(e;\
    \ d.keys)\n    {\n        if(e > d[e])\n            continue;\n        if(e >\
    \ max)\n            max = e;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n\
    \    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L,\
    \ 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n\
    \    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L,\
    \ 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L,\
    \ 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L,\
    \ 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L,\
    \ 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L,\
    \ 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L,\
    \ 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L,\
    \ 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L,\
    \ 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L,\
    \ 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L,\
    \ 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L,\
    \ 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L,\
    \ 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L,\
    \ 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L,\
    \ 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L,\
    \ 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L,\
    \ 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
    \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6gbhkbg.d(20): Error: template instance `Dictionary!int` template
    `Dictionary` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6gbhkbg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    // your code here\n    long[] freq =\
    \ new long[lst.length];\n    long[] num = new long[lst.length];\n    long[] result\
    \ = new long[lst.length];\n    long[] result2 = new long[lst.length];\n    long[]\
    \ result3 = new long[lst.length];\n    long[] result4 = new long[lst.length];\n\
    \    long[] result5 = new long[lst.length];\n    long[] result6 = new long[lst.length];\n\
    \    long[] result7 = new long[lst.length];\n    long[] result8 = new long[lst.length];\n\
    \    long[] result9 = new long[lst.length];\n    long[] result10 = new long[lst.length];\n\
    \    long[] result11 = new long[lst.length];\n    long[] result12 = new long[lst.length];\n\
    \    long[] result13 = new long[lst.length];\n    long[] result14 = new long[lst.length];\n\
    \    long[] result15 = new long[lst.length];\n    long[] result16 = new long[lst.length];\n\
    \    long[] result17 = new long[lst.length];\n    long[] result18 = new long[lst.length];\n\
    \    long[] result19 = new long[lst.length];\n    long[] result20 = new long[lst.length];\n\
    \    long[] result21 = new long[lst.length];\n    long[] result22 = new long[lst.length];\n\
    \    long[] result23 = new long[lst.length];\n    long[] result24 = new long[lst.length];\n\
    \    long[] result25 = new long[lst.length];\n    long[] result26 = new long[lst.length];\n\
    \    long[] result27 = new long[lst.length];\n    long[] result28 = new long[lst.length];\n\
    \    long[] result29 = new long[lst.length];\n    long[] result30 = new long[lst.length];\n\
    \    long[] result31 = new long[lst.length];\n    long[] result32 = new long[l\n\
    unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L,\
    \ 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n \
    \   assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9whfqr_b.d(55): Error: found `unittest` when expecting `]`

    /tmp/tmp9whfqr_b.d(56): Error: semicolon expected, not `{`

    /tmp/tmp9whfqr_b.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9whfqr_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = lst.dup;\n    arr.sort();\n\
    \    long[] arr2 = arr.dup;\n    long[] arr3 = arr.dup;\n    long[] arr4 = arr.dup;\n\
    \    long[] arr5 = arr.dup;\n    long[] arr6 = arr.dup;\n    long[] arr7 = arr.dup;\n\
    \    long[] arr8 = arr.dup;\n    long[] arr9 = arr.dup;\n    long[] arr10 = arr.dup;\n\
    \    long[] arr11 = arr.dup;\n    long[] arr12 = arr.dup;\n    long[] arr13 =\
    \ arr.dup;\n    long[] arr14 = arr.dup;\n    long[] arr15 = arr.dup;\n    long[]\
    \ arr16 = arr.dup;\n    long[] arr17 = arr.dup;\n    long[] arr18 = arr.dup;\n\
    \    long[] arr19 = arr.dup;\n    long[] arr20 = arr.dup;\n    long[] arr21 =\
    \ arr.dup;\n    long[] arr22 = arr.dup;\n    long[] arr23 = arr.dup;\n    long[]\
    \ arr24 = arr.dup;\n    long[] arr25 = arr.dup;\n    long[] arr26 = arr.dup;\n\
    \    long[] arr27 = arr.dup;\n    long[] arr28 = arr.dup;\n    long[] arr29 =\
    \ arr.dup;\n    long[] arr30 = arr.dup;\n    long[] arr31 = arr.dup;\n    long[]\
    \ arr32 = arr.dup;\n    long[] arr33 = arr.dup;\n    long[] arr34 = arr.dup;\n\
    \    long[] arr35 = arr.dup;\n    long[] arr36 = arr.dup;\n    long[] arr37 =\
    \ arr.dup;\n    long[] arr38 = arr.dup;\n    long[] arr39 = arr.dup;\n    long[]\
    \ arr40 = arr.dup;\n    long[] arr41 = arr.dup;\n    long[] arr42 = arr.dup;\n\
    unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L,\
    \ 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n \
    \   assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6f6dqq_.d(63): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6f6dqq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = search;\n\n   \
    \ assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L,\
    \ 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] arr2 = arr.dup;\n    arr2.sort;\n    long[] arr3 = arr2.dup;\n   \
    \ arr3.sort;\n    long[] arr4 = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n\
    \    arr5.sort;\n    long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7\
    \ = arr6.dup;\n    arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n \
    \   long[] arr9 = arr8.dup;\n    arr9.sort;\n    long[] arr10 = arr9.dup;\n  \
    \  arr10.sort;\n    long[] arr11 = arr10.dup;\n    arr11.sort;\n    long[] arr12\
    \ = arr11.dup;\n    arr12.sort;\n    long[] arr13 = arr12.dup;\n    arr13.sort;\n\
    \    long[] arr14 = arr13.dup;\n    arr14.sort;\n    long[] arr15 = arr14.dup;\n\
    \    arr15.sort;\n    long[] arr16 = arr15.dup;\n    arr16.sort;\n    long[] arr17\
    \ = arr16.dup;\n    arr17.sort;\n    long[] arr18 = arr17.dup;\n    arr18.sort;\n\
    \    long[] arr19 = arr18.dup;\n    arr19.sort;\n    long[] arr20 = arr19.dup;\n\
    \    arr20.sort;\n    long[] arr21 = arr20.dup;\n    arr21.sort;\n    long[] arr22\
    \ = arr21.dup;\n    arr22.sort;\n    long[] arr23 = arr22.dup;\n    arr23.sort;\n\
    \    long[] arr24 = arr23.dup;\n    arr24.sort;\n    long[] arr25 = arr24.dup;\n\
    \    arr25.sort;\n    long[] arr26 = arr25.dup;\nunittest\n{\n    alias candidate\
    \ = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L,\
    \ 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L,\
    \ 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L,\
    \ 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L,\
    \ 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L,\
    \ 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L,\
    \ 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) ==\
    \ -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L,\
    \ 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsn5icx6.d(71): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsn5icx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n    zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n    The frequency of an integer is the number of times it appears\
    \ in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>>\
    \ search([4L, 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n  \
    \  \n*/\nlong search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
    \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
    \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
    \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
    \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
    \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L,\
    \ 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L,\
    \ 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n\
    \    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L,\
    \ 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L,\
    \ 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L,\
    \ 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) ==\
    \ 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L,\
    \ 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L,\
    \ 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L,\
    \ 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L,\
    \ 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L,\
    \ 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L,\
    \ 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L,\
    \ 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L,\
    \ 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L,\
    \ 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L,\
    \ 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
    \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
    \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
    \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
    \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L,\
    \ 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
