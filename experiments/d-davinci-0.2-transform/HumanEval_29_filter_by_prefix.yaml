name: HumanEval_29_filter_by_prefix
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
  \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"\
  a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
  a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings,\
  \ string prefix) \n"
tests: "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
completions: ["{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n\
    \    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n}", "{\n\
    \    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array();\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).dup;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix6(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n \n    >>> filter_by_prefix_2([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_2([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_3([], \"a\")\n    []\n    >>> filter_by_prefix_3([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix_3(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array.idup;\n}\n/*\n    >>> filter_by_prefix_4([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_4([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix_4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n    >>> filter_by_prefix_5([], \"a\")\n    []\n    >>> filter_by_prefix_5([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n}\n/*\n \
    \   >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n       \
    \ if(s.startsWith(prefix))\n        {\n            result ~= s;\n        }\n \
    \   }\n    return result;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \ >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n   ", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array();\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).arrayof();\n}\n/*\n    >>> filter_by_prefix([], \"\
    a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_6(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof!();\n\
    }\n", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_3([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).arrayof;\n}\n/*\n    >>> filter_by_prefix_5([], \"\
    a\")\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayOf;\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.",
  "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    string[]\
    \ filtered = [];\n    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n\
    \        {\n            filtered ~= s;\n        }\n    }\n    return filtered;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}", "{\n    return filter!(s =>\
    \ s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n   \
    \     {\n            result ~= s;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return filter!(s =>\
    \ s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_2([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_2([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_2(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_3([], \"a\")\n    []\n    >>> filter_by_prefix_3([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_4([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_4([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_5([], \"a\")\n    []\n    >>> filter_by_prefix_5([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_6([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_6([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_6(string[] strings,\
    \ string prefix) \n{\n    return strings.", "{\n    return strings.filter!(s =>\
    \ s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    string[] result;\n    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}\n\
    /*\n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix_3([], \"a\")\n  \
    \  []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup;\n}\n/*\n    >>> filter_by_prefix_5([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"", "{\n    return strings.filter!(s =>\
    \ s.startsWith(prefix));\n}", "{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \ >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_", "{\n\
    \    string[] result;\n    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s =>\
    \ s.startsWith(prefix));\n}", "{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.startsWith(prefix))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n   ", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix2(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/", "{\n\
    \    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n   \
    \     {\n            result ~= s;\n        }\n    }\n    return result;\n}", "{\n\
    \    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.startsWith(prefix)) \n        {\n       \
    \     result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.startsWith(prefix))\n        {\n          \
    \  result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_", "{\n\
    \    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n    >>>\
    \ filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix_3([], \"\
    a\")\n    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix_5([], \"\
    a\")\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n\
    \    string[] result;\n    foreach(string s; strings) \n    {\n        if (s.startsWith(prefix))\
    \ \n        {\n            result ~= s;\n        }\n    }\n    return result;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return filter!(s =>\
    \ s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_2(string[] strings,\
    \ string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_3(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_4(string[] strings,\
    \ string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_6(string[] strings,\
    \ string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup;\n}\n/*\n    >>> filter_by_prefix([], \"\
    a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.sort.retro;\n}\n/*\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_6(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix))();\n}\n/*\n    >>> filter_by_prefix_3([], \"a\")\n\
    \    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_5([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.filter!(",
  "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n   \
    \     {\n            result ~= s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}\n\
    /*\n    >>> filter_by_prefix_lambda([], \"a\")\n    []\n    >>> filter_by_prefix_lambda([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_lambda(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix_lambda_2([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_lambda_2([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_lambda_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_lambda_3([], \"a\")\n    []\n    >>> filter_by_prefix_lambda_3([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_lambda_3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup;\n}\n/*\n    >>> filter_by_prefix_lambda_4([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_lambda_4([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_lambda_4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n    >>> filter_by_prefix_lambda_5([], \"a\")\n    []\n    >>> filter_by",
  "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n   ", "{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s =>\
    \ s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n}\n/*\n\
    \    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array();\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array();\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_6(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array;\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings)\n    {\n        if(s.startsWith(prefix))\n   \
    \     {\n            result ~= s;\n        }\n    }\n    return result;\n}", "{\n\
    \    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(x =>\
    \ x.startsWith(prefix));\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }", "{\n    string[] result;\n    foreach(string s; strings) \n    {\n       \
    \ if (s.startsWith(prefix)) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(a => a.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }", "{\n    string[] result;\n    foreach(string s; strings) \n    {\n       \
    \ if (s.startsWith(prefix)) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    string[] result;\n\
    \    foreach(string s; strings) \n    {\n        if (s.startsWith(prefix)) \n\
    \        {\n            result ~= s;\n        }\n    }\n    return result;\n}",
  "{\n    return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    string[] result;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.startsWith(prefix)) \n        {\n       \
    \     result ~= s;\n        }\n    }\n    return result;\n}", "{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s =>\
    \ s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array;\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup;\n}\n/*\n    >>> filter_by_prefix([], \"\
    a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.array.idup;\n}\n/*\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix6(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(", "{\n   \
    \ return filter!(s => s.startsWith(prefix))(strings);\n}", "{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s =>\
    \ s.startsWith(prefix)).array;\n}", "{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_and_length([], \"a\", 3)\n    []\n    >>> filter_by_prefix_and_length([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 3)\n    [\"abc\"]\n*/\nstring[] filter_by_prefix_and_length(string[]\
    \ strings, string prefix, size_t length) \n{\n    return filter!(s => s.startsWith(prefix)\
    \ && s.length == length)(strings);\n}\n/*\n    >>> filter_by_prefix_and_length_and_contains([],\
    \ \"a\", 3, \"r\")\n    []\n    >>> filter_by_prefix_and_length_and_contains([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 3, \"r\")\n    []\n    >>> filter_by_prefix_and_length_and_contains([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 5, \"r\")\n    [\"array\"]\n*/\nstring[]\
    \ filter_by_prefix_and_length_and_contains(string[] strings, string prefix, size_t\
    \ length, string contains) \n{\n    return filter!(s => s.startsWith(prefix) &&\
    \ s.length == length && s.contains(contains))(strings);\n}\n/*\n    >>> filter_by_prefix_and_length_and_contains_and_ends_with([],\
    \ \"a\", 3, \"r\", \"y\")\n    []\n    >>> filter_by_prefix_and_length_and_contains_and_ends_with([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 3, \"r\", \"y\")\n    []\n    >>>\
    \ filter_by_prefix_and_length_and_contains_and_ends_with([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\", 5, \"r\", \"y\")\n    [\"array\"]\n*/\nstring[] filter_by_prefix_and_length_and_contains_and_ends_with(string[]\
    \ strings,", "{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }", "{\n    return filter!(a => a.startsWith(prefix))(strings);\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return filter!(s =>\
    \ s.startsWith(prefix))(strings);\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }", "{\n    return strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}", "{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
