{
  "language": "d",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkiqeajqa.d(24): Error: no property `split` for type `string`\n/tmp/tmpkiqeajqa.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkiqeajqa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(is_consonant(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5czym739.d(24): Error: undefined identifier `split`\n/tmp/tmp5czym739.d(40): Error: undefined identifier `is_consonant`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5czym739.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwi7_9sq.d(24): Error: no property `split` for type `string`\n/tmp/tmpgwi7_9sq.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwi7_9sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwi7_9sq.d(24): Error: no property `split` for type `string`\n/tmp/tmpgwi7_9sq.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwi7_9sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn26y6h04.d(24): Error: undefined identifier `split`\n/tmp/tmpn26y6h04.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn26y6h04.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwi7_9sq.d(24): Error: no property `split` for type `string`\n/tmp/tmpgwi7_9sq.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwi7_9sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwcrjnclg.d(24): Error: undefined identifier `split`\n/tmp/tmpwcrjnclg.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcrjnclg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwi7_9sq.d(24): Error: no property `split` for type `string`\n/tmp/tmpgwi7_9sq.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwi7_9sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwi7_9sq.d(24): Error: no property `split` for type `string`\n/tmp/tmpgwi7_9sq.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwi7_9sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] result;\n    string[] words = split(s);\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpblczhim8.d(25): Error: undefined identifier `split`\n/tmp/tmpblczhim8.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblczhim8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjjz5wqfq.d(24): Error: undefined identifier `split`\n/tmp/tmpjjz5wqfq.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjz5wqfq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjjz5wqfq.d(24): Error: undefined identifier `split`\n/tmp/tmpjjz5wqfq.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjz5wqfq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkiqeajqa.d(24): Error: no property `split` for type `string`\n/tmp/tmpkiqeajqa.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkiqeajqa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp40pmcveq.d(24): Error: undefined identifier `split`\n/tmp/tmp40pmcveq.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40pmcveq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkiqeajqa.d(24): Error: no property `split` for type `string`\n/tmp/tmpkiqeajqa.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkiqeajqa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp47pte1zb.d(24): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47pte1zb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n            if(c.isConsonant)\n                count++;\n        }\n        if(count == n)\n            result ~= word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprku7_c59.d(24): Error: no property `split` for type `string`\n/tmp/tmprku7_c59.d(31): Error: no property `isConsonant` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprku7_c59.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwkghy1xf.d(24): Error: no property `split` for type `string`\n/tmp/tmpwkghy1xf.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkghy1xf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs1vr99t.d(24): Error: no property `split` for type `string`\n/tmp/tmpfs1vr99t.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1vr99t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwkghy1xf.d(24): Error: no property `split` for type `string`\n/tmp/tmpwkghy1xf.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkghy1xf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count_consonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ups40jl.d(24): Error: no property `split` for type `string`\n/tmp/tmp3ups40jl.d(28): Error: no property `count_consonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ups40jl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwi7_9sq.d(24): Error: no property `split` for type `string`\n/tmp/tmpgwi7_9sq.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwi7_9sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjjz5wqfq.d(24): Error: undefined identifier `split`\n/tmp/tmpjjz5wqfq.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjz5wqfq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwkghy1xf.d(24): Error: no property `split` for type `string`\n/tmp/tmpwkghy1xf.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkghy1xf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjjz5wqfq.d(24): Error: undefined identifier `split`\n/tmp/tmpjjz5wqfq.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjz5wqfq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(!is_vowel(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppuwzxb4z.d(24): Error: undefined identifier `split`\n/tmp/tmppuwzxb4z.d(40): Error: undefined identifier `is_vowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuwzxb4z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqx3y845.d(24): Error: undefined identifier `split`\n/tmp/tmpaqx3y845.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqx3y845.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpephoonsz.d(24): Error: undefined identifier `split`\n/tmp/tmpephoonsz.d(28): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpephoonsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgvqb26g9.d(24): Error: undefined identifier `split`\n/tmp/tmpgvqb26g9.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvqb26g9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        long count = 0;\n        foreach(char c; word)\n        {\n            if(isConsonant(c))\n                count++;\n        }\n        if(count == n)\n            result ~= word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm_0c5nv4.d(24): Error: undefined identifier `split`\n/tmp/tmpm_0c5nv4.d(31): Error: undefined identifier `isConsonant`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_0c5nv4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rqnowm5.d(24): Error: no property `split` for type `string`\n/tmp/tmp1rqnowm5.d(28): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rqnowm5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplja2fnwi.d(24): Error: undefined identifier `split`\n/tmp/tmplja2fnwi.d(28): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplja2fnwi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    auto words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dj6siot.d(24): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dj6siot.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    }
  ]
}