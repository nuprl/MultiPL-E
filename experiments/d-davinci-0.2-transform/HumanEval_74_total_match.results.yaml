language: d
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ == total_chars_lst2)\n    {\n        return lst1;\n    }\n    else if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5jponel6.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmp5jponel6.__unittest_L44_C1() [0x428464]\n??:?
    void tmp5jponel6.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0x88587554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpddwkuu8p.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmpddwkuu8p.__unittest_L44_C1() [0x428464]\n??:?
    void tmpddwkuu8p.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0xcd54c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjlr572we.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmpjlr572we.__unittest_L44_C1() [0x428464]\n??:?
    void tmpjlr572we.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0x89817554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5jponel6.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmp5jponel6.__unittest_L44_C1() [0x428464]\n??:?
    void tmp5jponel6.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0x88587554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpddwkuu8p.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmpddwkuu8p.__unittest_L44_C1() [0x428464]\n??:?
    void tmpddwkuu8p.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0xcd54c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjlr572we.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmpjlr572we.__unittest_L44_C1() [0x428464]\n??:?
    void tmpjlr572we.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0x89817554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjlr572we.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4294dd]\n??:? void tmpjlr572we.__unittest_L44_C1() [0x428464]\n??:?
    void tmpjlr572we.__modtest() [0x428744]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42920d]\n??:? runModuleUnitTests [0x42db8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4298b3]\n??:? _d_run_main [0x42981e]\n??:? main [0x428757]\n??:?
    __libc_start_main [0x89817554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
