language: d
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ == total_chars_lst2)\n    {\n        return lst1;\n    }\n    else if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n  \
    \  {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else if(total_chars_lst1\
    \ > total_chars_lst2)\n    {\n        return lst2;\n    }\n    else\n    {\n \
    \       return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n    {\n\
    \        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n        l2\
    \ += s.length;\n    }\n    if(l1 < l2)\n    {\n        return lst1;\n    }\n \
    \   else if(l2 < l1)\n    {\n        return lst2;\n    }\n    else\n    {\n  \
    \      return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n \
    \   else if (lst1.length == 0)\n        return lst2;\n    else if (lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int total1 = 0;\n    \
    \    int total2 = 0;\n        foreach (string s; lst1)\n            total1 +=\
    \ s.length;\n        foreach (string s; lst2)\n            total2 += s.length;\n\
    \        if (total1 < total2)\n            return lst1;\n        else if (total2\
    \ < total1)\n            return lst2;\n        else\n            return lst1;\n\
    \    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0swy7uxl.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x429545]

    ??:? void tmp0swy7uxl.__unittest_L47_C1() [0x428577]

    ??:? void tmp0swy7uxl.__modtest() [0x4287b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42de1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42929e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42accd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429275]

    ??:? runModuleUnitTests [0x42dbf5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429994]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdj6q4znn.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpdj6q4znn.__unittest_L44_C1() [0x428464]

    ??:? void tmpdj6q4znn.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpppc6cw84.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpppc6cw84.__unittest_L37_C1() [0x428460]

    ??:? void tmpppc6cw84.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n \
    \   int total1 = 0;\n    int total2 = 0;\n    foreach (string s; lst1)\n     \
    \   total1 += s.length;\n    foreach (string s; lst2)\n        total2 += s.length;\n\
    \    if (total1 < total2)\n        return lst1;\n    else if (total2 < total1)\n\
    \        return lst2;\n    else\n        return lst1;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpppc6cw84.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpppc6cw84.__unittest_L37_C1() [0x428460]

    ??:? void tmpppc6cw84.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n    {\n\
    \        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n        l2\
    \ += s.length;\n    }\n    if(l1 == l2)\n    {\n        return lst1;\n    }\n\
    \    else if(l1 < l2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3c9o6x0g.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp3c9o6x0g.__unittest_L44_C1() [0x428464]

    ??:? void tmp3c9o6x0g.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int len1 = 0;\n    int len2 = 0;\n    foreach(str; lst1)\n    {\n \
    \       len1 += str.length;\n    }\n    foreach(str; lst2)\n    {\n        len2\
    \ += str.length;\n    }\n    return len1 < len2 ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnneyfsey.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpnneyfsey.__unittest_L37_C1() [0x428460]

    ??:? void tmpnneyfsey.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n    {\n\
    \        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n        l2\
    \ += s.length;\n    }\n    return l1 < l2 ? lst1 : lst2;\n}\nunittest\n{\n   \
    \ alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n   \
    \ assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaixc0h70.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpaixc0h70.__unittest_L37_C1() [0x428460]

    ??:? void tmpaixc0h70.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpppc6cw84.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpppc6cw84.__unittest_L37_C1() [0x428460]

    ??:? void tmpppc6cw84.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n  \
    \  {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdj6q4znn.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpdj6q4znn.__unittest_L44_C1() [0x428464]

    ??:? void tmpdj6q4znn.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpppc6cw84.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpppc6cw84.__unittest_L37_C1() [0x428460]

    ??:? void tmpppc6cw84.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return lst1;\n\
    \    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n    else\n\
    \    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n   \
    \ int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach (string s; lst1)\n\
    \        total_lst1 += s.length;\n    foreach (string s; lst2)\n        total_lst2\
    \ += s.length;\n    if (total_lst1 < total_lst2)\n        return lst1;\n    else\
    \ if (total_lst1 > total_lst2)\n        return lst2;\n    else\n        return\
    \ lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n    {\n\
    \        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n        l2\
    \ += s.length;\n    }\n    return l1 < l2 ? lst1 : lst2;\n}\nunittest\n{\n   \
    \ alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n   \
    \ assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaixc0h70.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpaixc0h70.__unittest_L37_C1() [0x428460]

    ??:? void tmpaixc0h70.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk1536naq.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpk1536naq.__unittest_L37_C1() [0x428460]

    ??:? void tmpk1536naq.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(str; lst1)\n\
    \    {\n        lst1_total += str.length;\n    }\n    foreach(str; lst2)\n   \
    \ {\n        lst2_total += str.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpghdeo5z2.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpghdeo5z2.__unittest_L44_C1() [0x428464]

    ??:? void tmpghdeo5z2.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24_tfpq5.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp24_tfpq5.__unittest_L44_C1() [0x428464]

    ??:? void tmp24_tfpq5.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total == lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzaav4fwr.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpzaav4fwr.__unittest_L44_C1() [0x428464]

    ??:? void tmpzaav4fwr.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n    {\n\
    \        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n        l2\
    \ += s.length;\n    }\n    return l1 < l2 ? lst1 : lst2;\n}\nunittest\n{\n   \
    \ alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n   \
    \ assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaixc0h70.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpaixc0h70.__unittest_L37_C1() [0x428460]

    ??:? void tmpaixc0h70.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qmmvkhl.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp8qmmvkhl.__unittest_L44_C1() [0x428464]

    ??:? void tmp8qmmvkhl.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>>\
    \ total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"\
    hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
