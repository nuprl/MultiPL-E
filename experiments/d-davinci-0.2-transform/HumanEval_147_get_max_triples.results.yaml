language: d
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n - 2;\
    \ i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n        {\n     \
    \       for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp903riqwo.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp903riqwo.__unittest_L41_C1() [0x427e48]\n??:?
    void tmp903riqwo.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ed3]\n??:?
    __libc_start_main [0xe7c23554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j\
    \ = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    res++;\n            \
    \    }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3t17r65_.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmp3t17r65_.__unittest_L36_C1() [0x427b05]\n??:?
    void tmp3t17r65_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0x2ae90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j\
    \ = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    res++;\n            \
    \    }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3t17r65_.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmp3t17r65_.__unittest_L36_C1() [0x427b05]\n??:?
    void tmp3t17r65_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0x2ae90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[(int)n];\n    for (long i = 0; i\
    \ < n; i++)\n    {\n        a[(int)i] = i * i - i + 1;\n    }\n    for (long i\
    \ = 0; i < n - 2; i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n\
    \        {\n            for (long k = j + 1; k < n; k++)\n            {\n    \
    \            if ((a[(int)i] + a[(int)j] + a[(int)k]) % 3 == 0)\n             \
    \   {\n                    result++;\n                }\n            }\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdozxlgu5.d(21): Error: C style cast illegal, use `cast(int)n`\n/tmp/tmpdozxlgu5.d(24):
    Error: C style cast illegal, use `cast(int)i`\n/tmp/tmpdozxlgu5.d(32): Error:
    C style cast illegal, use `cast(int)i`\n/tmp/tmpdozxlgu5.d(32): Error: C style
    cast illegal, use `cast(int)j`\n/tmp/tmpdozxlgu5.d(32): Error: C style cast illegal,
    use `cast(int)k`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdozxlgu5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuf9bqcjn.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428175]\n??:? void tmpuf9bqcjn.__unittest_L41_C1() [0x427e80]\n??:?
    void tmpuf9bqcjn.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428638]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285bf]\n??:? _d_run_main [0x42852a]\n??:? main [0x427f0b]\n??:?
    __libc_start_main [0x6c655554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = (i * i) - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n    \
    \        for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mnxggse.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j\
    \ = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    res++;\n            \
    \    }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3t17r65_.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmp3t17r65_.__unittest_L36_C1() [0x427b05]\n??:?
    void tmp3t17r65_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0x2ae90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfvu2ra3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr0u5znb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqx_xe9fb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqx_xe9fb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n - 2)\n    {\n\
    \        foreach(j; i + 1 .. n - 1)\n        {\n            foreach(k; j + 1 ..\
    \ n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n     \
    \           {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpitsebq_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i; 0..n)\n        a[i] = i * i - i + 1;\n\
    \    long count = 0;\n    foreach(i; 0..n)\n        foreach(j; i+1..n)\n     \
    \       foreach(k; j+1..n)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n\
    \                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppysudwkq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++) \n    {\n        for (long\
    \ j = i + 1; j < n; j++) \n        {\n            for (long k = j + 1; k < n;\
    \ k++) \n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0) \n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ki9apmj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n - 2;\
    \ i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n        {\n     \
    \       for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp903riqwo.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp903riqwo.__unittest_L41_C1() [0x427e48]\n??:?
    void tmp903riqwo.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ed3]\n??:?
    __libc_start_main [0xe7c23554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n       \
    \ foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n    \
    \        {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n              \
    \  {\n                    ret++;\n                }\n            }\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp817ayhz_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++) \n    {\n        for (long\
    \ j = i + 1; j < n; j++) \n        {\n            for (long k = j + 1; k < n;\
    \ k++) \n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0) \n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ki9apmj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqx_xe9fb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0 .. n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n       \
    \ foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n    \
    \        {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cl8ztu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j\
    \ = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    res++;\n            \
    \    }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3t17r65_.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmp3t17r65_.__unittest_L36_C1() [0x427b05]\n??:?
    void tmp3t17r65_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0x2ae90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i; 0 .. n)\n        a[i] = i * i - i +\
    \ 1;\n    long count = 0;\n    foreach(i; 0 .. n)\n        foreach(j; i + 1 ..\
    \ n)\n            foreach(k; j + 1 .. n)\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                    count++;\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppf9s3rs0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqx_xe9fb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long res = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    res++;\n                }\n\
    \            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5x4suw3u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfvu2ra3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n - 2)\n    {\n\
    \        foreach(j; i + 1 .. n - 1)\n        {\n            foreach(k; j + 1 ..\
    \ n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n     \
    \           {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpitsebq_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result += 1;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpzb8lp_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqx_xe9fb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptu_cdsvc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr0u5znb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j\
    \ = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    res++;\n            \
    \    }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3t17r65_.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmp3t17r65_.__unittest_L36_C1() [0x427b05]\n??:?
    void tmp3t17r65_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0x2ae90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i+1 .. n)\n        {\n            foreach(k; j+1 .. n)\n    \
    \        {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n              \
    \  {\n                    result++;\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhfstfur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if (((i * i - i + 1) + (j * j - j + 1) + (k *\
    \ k - k + 1)) % 3 == 0)\n                {\n                    result++;\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpet054i5z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbppl5nnx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if (a[i] + a[j] + a[k]\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeobb34uh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j\
    \ = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    res++;\n            \
    \    }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3t17r65_.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmp3t17r65_.__unittest_L36_C1() [0x427b05]\n??:?
    void tmp3t17r65_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0x2ae90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    foreach (i; 0 .. n)\n    {\n\
    \        foreach (j; i + 1 .. n)\n        {\n            foreach (k; j + 1 ..\
    \ n)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n    \
    \            {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_2ifb1l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n        \
    \        if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n              \
    \      result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsvtfaxrj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmpsvtfaxrj.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmpsvtfaxrj.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0xea462554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j;\
    \ i..n)\n        {\n            foreach(k; j..n)\n            {\n            \
    \    if(a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9lq2gfq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbppl5nnx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbppl5nnx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp037asa85.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxs8oayiy.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpxs8oayiy.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpxs8oayiy.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0x3e910554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvzbemhvj.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428135]\n??:? void tmpvzbemhvj.__unittest_L41_C1() [0x427e40]\n??:?
    void tmpvzbemhvj.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42857f]\n??:? _d_run_main [0x4284ea]\n??:? main [0x427ecb]\n??:?
    __libc_start_main [0xc74c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8k47x8xp.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428185]\n??:? void tmp8k47x8xp.__unittest_L41_C1() [0x427e8c]\n??:?
    void tmp8k47x8xp.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285cf]\n??:? _d_run_main [0x42853a]\n??:? main [0x427f17]\n??:?
    __libc_start_main [0x49302554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp037asa85.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long sum = 0;\n    long count = 0;\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    if (sum % 3 != 0)\n        return 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n         \
    \   for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprj7d40w_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = i + 1; j < n; j++)\n        {\n            for (int\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    result++;\n              \
    \  }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n  \
    \  assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwx7pv21v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9pisg1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0atkmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659797913
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4ziaz6_6.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42813d]\n??:? void tmp4ziaz6_6.__unittest_L41_C1() [0x427e44]\n??:?
    void tmp4ziaz6_6.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428587]\n??:? _d_run_main [0x4284f2]\n??:? main [0x427ecf]\n??:?
    __libc_start_main [0xa951a554]\n1/1 unittests FAILED\n'''
  stdout: b''
