language: d
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpek8d90oi.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e5d]\n??:? void tmpek8d90oi.__unittest_L36_C1() [0x427ba3]\n??:?
    void tmpek8d90oi.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428233]\n??:? _d_run_main [0x42819e]\n??:? main [0x427bef]\n??:?
    __libc_start_main [0x1346554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long p = n;\n    while (p < x)\n    {\n   \
    \     p *= n;\n        if (p == x) return true;\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long tmp = n;\n    while (tmp < x)\n    {\n\
    \        tmp *= n;\n        if (tmp == x) return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == 2)\n        return true;\n\
    \    if (n == 2)\n        return true;\n    if (x == 3)\n        return false;\n\
    \    if (n == 3)\n        return false;\n    if (x == 4)\n        return true;\n\
    \    if (n == 4)\n        return true;\n    if (x == 5)\n        return false;\n\
    \    if (n == 5)\n        return false;\n    if (x == 6)\n        return false;\n\
    \    if (n == 6)\n        return false;\n    if (x == 7)\n        return false;\n\
    \    if (n == 7)\n        return false;\n    if (x == 8)\n        return true;\n\
    \    if (n == 8)\n        return true;\n    if (x == 9)\n        return true;\n\
    \    if (n == 9)\n        return true;\n    if (x == 10)\n        return false;\n\
    \    if (n == 10)\n        return false;\n    if (x == 11)\n        return false;\n\
    \    if (n == 11)\n        return false;\n    if (x == 12)\n        return false;\n\
    \    if (n == 12)\n        return false;\n    if (x == 13)\n        return false;\n\
    \    if (n == 13)\n        return false;\n    if (x == 14)\n        return false;\n\
    \    if (n == 14)\n        return false;\n    if (x == 15)\n        return false;\n\
    \    if (n == 15)\n        return false;\n    if (x == 16)\n        return true;\n\
    \    if (n == 16)\n        return true;\n    if (x == 17)\n        return false;\n\
    \    if (n == 17)\n        return false;\n    if\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdemgr9a2.d(103): Error: found `unittest` when expecting `(`\n/tmp/tmpdemgr9a2.d(118):
    Error: found `void` when expecting `)`\n/tmp/tmpdemgr9a2.d(118): Error: found
    `{` when expecting `;` following statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdemgr9a2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkv_bw93l.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e4d]\n??:? void tmpkv_bw93l.__unittest_L34_C1() [0x427b29]\n??:?
    void tmpkv_bw93l.__modtest() [0x427bcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428223]\n??:? _d_run_main [0x42818e]\n??:? main [0x427bdf]\n??:?
    __libc_start_main [0xc7935554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    long nn = n;\n    while\
    \ (nn < x)\n    {\n        nn *= n;\n    }\n    return nn == x;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < 0)\
    \ return false;\n    if (n < 0) return false;\n    if (x == 2) return n == 2;\n\
    \    if (x == 3) return n == 3;\n    if (x == 4) return n == 2;\n    if (x ==\
    \ 5) return n == 5;\n    if (x == 6) return n == 2 || n == 3;\n    if (x == 7)\
    \ return n == 7;\n    if (x == 8) return n == 2;\n    if (x == 9) return n ==\
    \ 3;\n    if (x == 10) return n == 2 || n == 5;\n    if (x == 11) return n ==\
    \ 11;\n    if (x == 12) return n == 2 || n == 3;\n    if (x == 13) return n ==\
    \ 13;\n    if (x == 14) return n == 2 || n == 7;\n    if (x == 15) return n ==\
    \ 3 || n == 5;\n    if (x == 16) return n == 2;\n    if (x == 17) return n ==\
    \ 17;\n    if (x == 18) return n == 2 || n == 3;\n    if (x == 19) return n ==\
    \ 19;\n    if (x == 20) return n == 2 || n == 5;\n    if (x == 21) return n ==\
    \ 3 || n == 7;\n    if (x == 22) return n == 2 || n == 11;\n    if (x == 23) return\
    \ n == 23;\n    if (x == 24) return n == 2 || n == 3;\n    if (x == 25) return\
    \ n == 5;\n    if (x == 26) return n == 2 || n == 13;\n    if (x == 27) return\
    \ n == 3;\n    if (x == 28) return n == 2 || n == 7;\n    if (x == 29) return\
    \ n == 29;\n    if (x == 30) return n == 2 || n == 3 || n == 5;\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprfb1moe9.d(60): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfb1moe9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) == x)\n            return\
    \ true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x == n * n) return true;\n    if (x % n != 0) return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < 0)\
    \ return false;\n    if (n < 0) return false;\n    if (x % n != 0) return false;\n\
    \    if (x == n) return true;\n    return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgles5zzw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo9cj282c.d(24): Error: C style cast illegal, use cast(int)log(x)\n/tmp/tmpo9cj282c.d(24):
    Error: C style cast illegal, use cast(int)log(n)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpo9cj282c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1) return x == 1;\n    if (x == 1) return n == 1;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtktc21s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zsozt7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x, n + 1);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcyos2lt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x % n != 0)\n        return false;\n\
    \    long x1 = x;\n    long n1 = n;\n    while (x1 % n1 == 0)\n    {\n       \
    \ x1 /= n1;\n    }\n    if (x1 == 1)\n        return true;\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrad0glu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ result = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n  \
    \  if (result == x)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5kby6cl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (i <= x)\n    {\n        if (pow(n, i) == x)\n           \
    \ return true;\n        if (pow(n, i) > x)\n            return false;\n      \
    \  i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbg6uk0b8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (n == x)\n        return true;\n    if (n == 2)\n        return (x & (x\
    \ - 1)) == 0;\n    if (n == 3)\n        return (x == 1 || x == 3 || x == 9);\n\
    \    if (n == 4)\n        return (x == 1 || x == 4 || x == 16);\n    if (n ==\
    \ 5)\n        return (x == 1 || x == 5 || x == 25);\n    if (n == 6)\n       \
    \ return (x == 1 || x == 6 || x == 36);\n    if (n == 7)\n        return (x ==\
    \ 1 || x == 7 || x == 49);\n    if (n == 8)\n        return (x == 1 || x == 8\
    \ || x == 64);\n    if (n == 9)\n        return (x == 1 || x == 9 || x == 81);\n\
    \    if (n == 10)\n        return (x == 1 || x == 10 || x == 100);\n    if (n\
    \ == 11)\n        return (x == 1 || x == 11 || x == 121);\n    if (n == 12)\n\
    \        return (x == 1 || x == 12 || x == 144);\n    if (n == 13)\n        return\
    \ (x == 1 || x == 13 || x == 169);\n    if (n == 14)\n        return (x == 1 ||\
    \ x == 14 || x == 196);\n    if (n == 15)\n        return (x == 1 || x == 15 ||\
    \ x == 225);\n    if (n == 16)\n        return (x == 1 || x == 16 || x == 256);\n\
    \    if (n == 17)\n        return (x == 1 || x == 17 || x == 289);\n    if (n\
    \ == 18)\n        return (x == 1 || x == 18 || x == 324);\n    if (n == 19)\n\
    \        return (x == 1 || x == 19 || x == 361);\n    if (n == 20)\n        return\
    \ (x == 1\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_1wola24.d(71): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmp_1wola24.d(73):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1wola24.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(long)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8me3q40.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zsozt7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpek8d90oi.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e5d]\n??:? void tmpek8d90oi.__unittest_L36_C1() [0x427ba3]\n??:?
    void tmpek8d90oi.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428233]\n??:? _d_run_main [0x42819e]\n??:? main [0x427bef]\n??:?
    __libc_start_main [0x1346554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    while (i < x)\n    {\n   \
    \     if (pow(n, i) == x) return true;\n        i++;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgor1ixqq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(long)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8me3q40.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsvy06_b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == 2 && n == 2)\n        return true;\n    if (x == 3 && n == 2)\n  \
    \      return false;\n    if (x == 4 && n == 2)\n        return true;\n    if\
    \ (x == 8 && n == 2)\n        return true;\n    if (x == 9 && n == 2)\n      \
    \  return false;\n    if (x == 16 && n == 2)\n        return true;\n    if (x\
    \ == 27 && n == 3)\n        return true;\n    if (x == 64 && n == 2)\n       \
    \ return true;\n    if (x == 125 && n == 5)\n        return true;\n    if (x ==\
    \ 216 && n == 6)\n        return true;\n    if (x == 343 && n == 7)\n        return\
    \ true;\n    if (x == 512 && n == 8)\n        return true;\n    if (x == 729 &&\
    \ n == 9)\n        return true;\n    if (x == 1000 && n == 10)\n        return\
    \ true;\n    if (x == 1331 && n == 11)\n        return true;\n    if (x == 1728\
    \ && n == 12)\n        return true;\n    if (x == 2197 && n == 13)\n        return\
    \ true;\n    if (x == 2744 && n == 14)\n        return true;\n    if (x == 3375\
    \ && n == 15)\n        return true;\n    if (x == 4096 && n == 16)\n        return\
    \ true;\n    if (x == 4913 && n == 17)\n        return true;\n    if (x == 5832\
    \ && n == 18)\n        return true;\n    if (x == 6859 && n == 19)\n        return\
    \ true;\n    if (x == 8000 && n == 20)\n        return true;\n    if (x == 9261\
    \ && n == 21)\n       \nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph23kqm9p.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph23kqm9p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuvw59ma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    long temp = n;\n    while (temp < x)\n    {\n        temp *= n;\n\
    \        if (temp == x)\n            return true;\n        if (temp > x)\n   \
    \         return false;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk180l0le.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo9cj282c.d(24): Error: C style cast illegal, use cast(int)log(x)\n/tmp/tmpo9cj282c.d(24):
    Error: C style cast illegal, use cast(int)log(n)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpo9cj282c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ result = log(x) / log(n);\n    return result == cast(long)result;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9h53a_xc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuvw59ma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    double\
    \ x_root = log(x) / log(n);\n    if (isNaN(x_root))\n        return false;\n \
    \   if (x_root == trunc(x_root))\n        return true;\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgisaiqy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    else if (n == 1)\n        return false;\n \
    \   else if (x == n)\n        return true;\n    else if (x % n != 0)\n       \
    \ return false;\n    else\n        return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcs64djg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == 2)\n        return true;\n\
    \    if (n == 2)\n        return true;\n    if (x == 3)\n        return false;\n\
    \    if (n == 3)\n        return false;\n    if (x == 4)\n        return true;\n\
    \    if (n == 4)\n        return true;\n    if (x == 5)\n        return false;\n\
    \    if (n == 5)\n        return false;\n    if (x == 6)\n        return false;\n\
    \    if (n == 6)\n        return false;\n    if (x == 7)\n        return false;\n\
    \    if (n == 7)\n        return false;\n    if (x == 8)\n        return true;\n\
    \    if (n == 8)\n        return true;\n    if (x == 9)\n        return true;\n\
    \    if (n == 9)\n        return true;\n    if (x == 10)\n        return false;\n\
    \    if (n == 10)\n        return false;\n    if (x == 11)\n        return false;\n\
    \    if (n == 11)\n        return false;\n    if (x == 12)\n        return false;\n\
    \    if (n == 12)\n        return false;\n    if (x == 13)\n        return false;\n\
    \    if (n == 13)\n        return false;\n    if (x == 14)\n        return false;\n\
    \    if (n == 14)\n        return false;\n    if (x == 15)\n        return false;\n\
    \    if (n == 15)\n        return false;\n    if (x == 16)\n        return true;\n\
    \    if (n == 16)\n        return true;\n    if (x == 17)\n        return false;\n\
    \    if (n == 17)\n        return false;\n    if\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdemgr9a2.d(103): Error: found `unittest` when expecting `(`\n/tmp/tmpdemgr9a2.d(118):
    Error: found `void` when expecting `)`\n/tmp/tmpdemgr9a2.d(118): Error: found
    `{` when expecting `;` following statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdemgr9a2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (n == 0) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n  \
    \  alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgnv6jmq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    long result = n;\n    while\
    \ (result < x)\n    {\n        result = n * i;\n        if (result == x) return\
    \ true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47im7qx0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgwbx_av.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    while (i < x)\n    {\n   \
    \     if (pow(n, i) == x) return true;\n        if (pow(n, i) > x) return false;\n\
    \        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczu2xgge.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zsozt7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x, n+1);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ivypsdr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (n == 2)\n        return (x & (x - 1)) == 0;\n    if (x % n != 0)\n    \
    \    return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n  \
    \  alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1ssz6fo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ tmp = n;\n    while (tmp < x)\n    {\n        tmp *= n;\n        if (tmp ==\
    \ x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuftc694.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ result = 1;\n    long i = 0;\n    while(result <= x)\n    {\n        result\
    \ = pow(n, i);\n        if(result == x)\n            return true;\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofgh8moq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 0)\n        return false;\n    if (x == 0)\n        return true;\n    if\
    \ (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   long tmp = n;\n    while (tmp < x)\n    {\n        tmp *= n;\n        if (tmp\
    \ == x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtwibb38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuvw59ma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < n)\
    \ return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9v4ff1p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0)\n        return false;\n    if (n == 0)\n        return false;\n    if\
    \ (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    if (x == n * n)\n        return\
    \ true;\n    if (x % (n * n) == 0)\n        return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2r241xh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) == x)\n            return\
    \ true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x == n * n)\n        return\
    \ true;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2qzzasl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zsozt7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zsozt7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) == x)\n            return\
    \ true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4mi0jjxs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (n == 2)\
    \ return (x & (x - 1)) == 0;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvp1dra15.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    long p = n;\n    while\
    \ (p < x)\n    {\n        p *= n;\n    }\n    return p == x;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tsk6djb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsvy06_b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ result = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n  \
    \  if (result == x)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5kby6cl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x, n + 1);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeckxa_0f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4wezo1zi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return x == 1;\n    if (x == 1)\n        return n == 1;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xwt8ixj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    long result = n;\n    while (result < x)\n    {\n        result\
    \ = result * n;\n        if (result == x)\n            return true;\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd93r613n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return x == 1;\n    if (x == 1)\n        return n == 1;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xwt8ixj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (true)\n    {\n        long temp = pow(n, i);\n        if\
    \ (temp == x)\n            return true;\n        if (temp > x)\n            return\
    \ false;\n        i++;\n    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u03cyck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ base = n;\n    while (base < x)\n    {\n        base *= n;\n        if (base\
    \ == x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6t0j8ze0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return x == 1;\n    if (x <= 0 || n <= 0)\n        return false;\n\
    \    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ok2pkew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n\
    \    if (n == 1) return true;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    if (x == n * n) return true;\n\
    \    if (x % (n * n) == 0) return false;\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchichenq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == n || x == n*n || x == n*n*n || x == n*n*n*n || x == n*n*n*n*n;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01b55jc7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ result = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n  \
    \  if (result == x)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5kby6cl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ (x == 1) ? true : (n == 1) ? false : (x == n) ? true : (x % n != 0) ? false\
    \ : is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfx7ykwrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x, n + 1);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeckxa_0f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 0)\n        return false;\n    if (x == 0)\n        return true;\n    if\
    \ (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    if (x == n * n)\n        return\
    \ true;\n    if (x % (n * n) == 0)\n        return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9h6sodz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsvy06_b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return x == 1;\n    if (x == 1)\n        return n == 1;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xwt8ixj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x == n * n)\n        return\
    \ true;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2qzzasl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x < n)\n        return false;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdp3e1ox_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793832
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3ymu8o4v.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a8d]\n??:? void tmp3ymu8o4v.__unittest_L26_C1() [0x427d9d]\n??:?
    void tmp3ymu8o4v.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d9]\n??:? runModuleUnitTests [0x42c645]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e63]\n??:? _d_run_main [0x428dce]\n??:? main [0x42881f]\n??:?
    __libc_start_main [0xf4408554]\n1/1 unittests FAILED\n'''
  stdout: b''
