name: HumanEval_67_fruit_distribution
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will\
  \ be given a string that represents a number of apples and oranges \n    that are\
  \ distributed in a basket of fruit this basket contains \n    apples, oranges, and\
  \ mango fruits. Given the string that represents the total number of \n    the oranges\
  \ and apples and an integer that represent the total number of the fruits \n   \
  \ in the basket return the number of the mango fruits in the basket.\n    for examble:\n\
  \    >>> fruit_distribution(\"5 apples and 6 oranges\", 19L)\n    8L\n    >>> fruit_distribution(\"\
  0 apples and 1 oranges\", 3L)\n    2L\n    >>> fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100L)\n    95L\n    >>> fruit_distribution(\"100 apples and 1 oranges\"\
  , 120L)\n    19L\n    \n*/\nlong fruit_distribution(string s, long n) \n"
tests: "unittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"\
  5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\"\
  , 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n\
  \    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"\
  2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3\
  \ oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L)\
  \ == 19L);\n}\nvoid main(){}"
completions: ["{\n    auto a = split(s, \" \");\n    return n - to!long(a[0]) - to!long(a[3]);\n\
    }", "{\n    auto arr = split(s, \" \");\n    long apples = to!long(arr[0]);\n\
    \    long oranges = to!long(arr[2]);\n    return n - (apples + oranges);\n}",
  "{\n    auto a = split(s, \" \");\n    long apples = to!long(a[0]);\n    long oranges\
    \ = to!long(a[3]);\n    return n - apples - oranges;\n}", "{\n    auto[apples,\
    \ oranges] = tuple(map!(to!long)(split(s, \" \")));\n    return n - apples - oranges;\n\
    }", "{\n    auto fruits = split(s, \" \");\n    long apples = to!long(fruits[0]);\n\
    \    long oranges = to!long(fruits[3]);\n    return n - apples - oranges;\n}",
  "{\n    auto x = split(s, \" \");\n    auto y = to!long(x[0]);\n    auto z = to!long(x[2]);\n\
    \    return n - y - z;\n}", "{\n    auto [a, o] = split(s);\n    return n - (to!long(a)\
    \ + to!long(o));\n}", "{\n    auto a = s.split(\" \");\n    auto b = a[0].to!long;\n\
    \    auto c = a[2].to!long;\n    return n - (b + c);\n}", "{\n    auto a = s.split(\"\
    \ \");\n    auto b = a[0].to!long;\n    auto c = a[2].to!long;\n    return n -\
    \ b - c;\n}", "{\n    // your code here\n    auto a = split(s, \" \");\n    auto\
    \ b = to!long(a[0]);\n    auto c = to!long(a[2]);\n    return n - b - c;\n}",
  "{\n    auto words = split(s);\n    long apples = to!long(words[0]);\n    long oranges\
    \ = to!long(words[3]);\n    return n - apples - oranges;\n}", "{\n    auto fruits\
    \ = split(s, \" and \");\n    long apples = to!long(fruits[0]);\n    long oranges\
    \ = to!long(fruits[1]);\n    return n - (apples + oranges);\n}", "{\n    auto\
    \ arr = s.split(\" \");\n    long apples = to!long(arr[0]);\n    long oranges\
    \ = to!long(arr[2]);\n    return n - apples - oranges;\n}", "{\n    auto a = s.split(\"\
    \ \");\n    long apples = to!long(a[0]);\n    long oranges = to!long(a[3]);\n\
    \    return n - apples - oranges;\n}", "{\n    auto a = s.split(\" \");\n    long\
    \ apples = to!long(a[0]);\n    long oranges = to!long(a[3]);\n    return n - apples\
    \ - oranges;\n}", "{\n    auto parts = split(s, \" \");\n    long apples = to!long(parts[0]);\n\
    \    long oranges = to!long(parts[3]);\n    return n - apples - oranges;\n}",
  "{\n    auto a = s.split(\" \");\n    return n - to!long(a[0]) - to!long(a[3]);\n\
    }", "{\n    auto x = s.split(\" \");\n    auto y = x[0].to!long;\n    auto z =\
    \ x[2].to!long;\n    return n - y - z;\n}", "{\n    auto words = split(s);\n \
    \   long apples = to!long(words[0]);\n    long oranges = to!long(words[3]);\n\
    \    return n - apples - oranges;\n}", "{\n    auto a = split(s, \" \");\n   \
    \ long apples = to!long(a[0]);\n    long oranges = to!long(a[3]);\n    return\
    \ n - apples - oranges;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
