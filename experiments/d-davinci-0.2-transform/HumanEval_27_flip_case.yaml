name: HumanEval_27_flip_case
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip lowercase\
  \ characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\"\
  )\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n"
tests: "unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
  ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(char c; string) \n    {\n\
    \        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n     \
    \   } \n        else \n        {\n            result ~= toUpper(c);\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(char c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        } \n        else \n\
    \        {\n            result ~= toUpper(c);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        } \n        else \n\
    \        {\n            result ~= toUpper(c);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(char c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ string) \n    {\n        if(isLower(c)) \n        {\n            result ~= toUpper(c);\n\
    \        }\n        else \n        {\n            result ~= toLower(c);\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string) \n    {\n        if(isUpper(c)) \n        {\n            result ~=\
    \ toLower(c);\n        } \n        else \n        {\n            result ~= toUpper(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else if(c.isLower)\n            result ~= c.toUpper;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(char c; string)\n    {\n        if(isUpper(c))\n            result\
    \ ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n  \
    \          result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    return string.map!(a\
    \ => a.isUpper ? a.toLower : a.toUpper)();\n}", "{\n    string result = \"\";\n\
    \    foreach(c; string)\n    {\n        if(isUpper(c))\n            result ~=\
    \ toLower(c);\n        else\n            result ~= toUpper(c);\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(char c; string)\n    {\n  \
    \      if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    return result;\n}\n/*\n    Given a string, return a new string with\
    \ the reversed order of characters.\n    >>> reverse_string(\"Hello\")\n    \"\
    olleH\"\n*/\nstring reverse_string(string string)\n{\n    string result;\n   \
    \ foreach(char c; string)\n    {\n        result = c ~ result;\n    }\n    return\
    \ result;\n}\n/*\n    Given a string, return a new string with the reversed order\
    \ of words.\n    >>> reverse_words(\"Hello World\")\n    \"World Hello\"\n*/\n\
    string reverse_words(string string)\n{\n    string result;\n    foreach(string\
    \ word; string.split)\n    {\n        result = word ~ \" \" ~ result;\n    }\n\
    \    return result.stripRight;\n}\n/*\n    Given a string, return a new string\
    \ with the reversed order of words.\n    >>> reverse_words(\"Hello World\")\n\
    \    \"World Hello\"\n*/\nstring reverse_words(string string)\n{\n    string result;\n\
    \    foreach(string word; string.split)\n    {\n        result = word ~ \" \"\
    \ ~ result;\n    }\n    return result.stripRight;\n}\n/*\n    Given a string,\
    \ return a new string with the reversed order of words.\n    >>> reverse_words(\"\
    Hello World\")\n    \"World Hello\"\n*/\nstring reverse_words(string string)\n\
    {\n    string result;\n    foreach(string word; string.split)\n    {\n       \
    \ result = word ~ \" \" ~ result;\n    }\n    return result.stripRight;\n}\n/*\n\
    \    Given a string, return a new string with the reversed order of words.\n \
    \   >>> reverse_words(\"Hello World\")\n    \"World Hello\"\n*/\nstring reverse_words(string\
    \ string)\n{\n    string result;\n    foreach(string word; string.split)\n   \
    \ {\n        result", "{\n    string result;\n    foreach(c; string) \n    {\n\
    \        if (isUpper(c)) \n        {\n            result ~= toLower(c);\n    \
    \    } \n        else \n        {\n            result ~= toUpper(c);\n       \
    \ }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string) \n    {\n        if(isUpper(c)) \n        {\n            result ~=\
    \ toLower(c);\n        } \n        else \n        {\n            result ~= toUpper(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(char c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
