language: d
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return null;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzyh9hk_4.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x429195]\n??:? void tmpzyh9hk_4.__unittest_L27_C1() [0x427fe3]\n??:?
    void tmpzyh9hk_4.__modtest() [0x4283fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428eee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a941]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428ec5]\n??:? runModuleUnitTests [0x42da71]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42956b]\n??:? _d_run_main [0x4294d6]\n??:? main [0x42840f]\n??:?
    __libc_start_main [0xc6c5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    long[] sorted = new long[0];\n    foreach(long\
    \ i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n            sorted ~=\
    \ i;\n        }\n    }\n    sort(sorted);\n    foreach(long i; sorted)\n    {\n\
    \        switch(i)\n        {\n            case 1:\n                result ~=\
    \ \"One\";\n                break;\n            case 2:\n                result\
    \ ~= \"Two\";\n                break;\n            case 3:\n                result\
    \ ~= \"Three\";\n                break;\n            case 4:\n               \
    \ result ~= \"Four\";\n                break;\n            case 5:\n         \
    \       result ~= \"Five\";\n                break;\n            case 6:\n   \
    \             result ~= \"Six\";\n                break;\n            case 7:\n\
    \                result ~= \"Seven\";\n                break;\n            case\
    \ 8:\n                result ~= \"Eight\";\n                break;\n         \
    \   case 9:\n                result ~= \"Nine\";\n                break;\n   \
    \     }\n    }\n    reverse(result);\n    return result;\n}\n/*\n    Given an\
    \ array of integers, sort the integers that are between 1 and 9 inclusive,\n \
    \   reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6yeqm7s_.d(70): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6yeqm7s_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto sorted = sort!((a, b) => a < b)(arr);\n    auto reversed = sorted.reverse;\n\
    \    auto filtered = filter!(x => x > 0 && x < 10)(reversed);\n    auto mapped\
    \ = map!(x => to!string(x))(filtered);\n    return mapped;\n}\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmzzs0kvt.d(24): Error: template instance `sort!((a, b) => a
    < b)` template `sort` is not defined, did you mean sqrt?\n/tmp/tmpmzzs0kvt.d(26):
    Error: template instance `filter!((x) => x > 0 && (x < 10))` template `filter`
    is not defined\n/tmp/tmpmzzs0kvt.d(27): Error: template instance `map!((x) =>
    to!string(x))` template `map` is not defined\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmzzs0kvt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(elem; arr)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            result ~= to!string(elem);\n     \
    \   }\n    }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n\
    \    {\n        switch(elem)\n        {\n            case \"1\":\n           \
    \     elem = \"One\";\n                break;\n            case \"2\":\n     \
    \           elem = \"Two\";\n                break;\n            case \"3\":\n\
    \                elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvpw8hnl0.d(24): Error: new can only create structs, dynamic
    arrays or class objects, not `string[]`\''s\n/tmp/tmpvpw8hnl0.d(29): Error: template
    instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpvpw8hnl0.d(32):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpvpw8hnl0.d(33):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpvpw8hnl0.d(36): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpw8hnl0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    result.sort;\n    result.reverse;\n    foreach(ref string s;\
    \ result)\n    {\n        switch(s)\n        {\n            case \"1\": s = \"\
    One\"; break;\n            case \"2\": s = \"Two\"; break;\n            case \"\
    3\": s = \"Three\"; break;\n            case \"4\": s = \"Four\"; break;\n   \
    \         case \"5\": s = \"Five\"; break;\n            case \"6\": s = \"Six\"\
    ; break;\n            case \"7\": s = \"Seven\"; break;\n            case \"8\"\
    : s = \"Eight\"; break;\n            case \"9\": s = \"Nine\"; break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy0sa3vts.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpy0sa3vts.d(32): Error: no property
    `sort` for type `string[]`\n/tmp/tmpy0sa3vts.d(33): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpy0sa3vts.d(36): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0sa3vts.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(ref string i;\
    \ result)\n    {\n        switch(i)\n        {\n            case \"1\": i = \"\
    One\"; break;\n            case \"2\": i = \"Two\"; break;\n            case \"\
    3\": i = \"Three\"; break;\n            case \"4\": i = \"Four\"; break;\n   \
    \         case \"5\": i = \"Five\"; break;\n            case \"6\": i = \"Six\"\
    ; break;\n            case \"7\": i = \"Seven\"; break;\n            case \"8\"\
    : i = \"Eight\"; break;\n            case \"9\": i = \"Nine\"; break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi6ixr8k6.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpi6ixr8k6.d(32): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpi6ixr8k6.d(33): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpi6ixr8k6.d(36): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6ixr8k6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(elem; arr)\n    {\n        if(elem\
    \ >= 1 && elem <= 9)\n        {\n            switch(elem)\n            {\n   \
    \             case 1:\n                    result ~= \"One\";\n              \
    \      break;\n                case 2:\n                    result ~= \"Two\"\
    ;\n                    break;\n                case 3:\n                    result\
    \ ~= \"Three\";\n                    break;\n                case 4:\n       \
    \             result ~= \"Four\";\n                    break;\n              \
    \  case 5:\n                    result ~= \"Five\";\n                    break;\n\
    \                case 6:\n                    result ~= \"Six\";\n           \
    \         break;\n                case 7:\n                    result ~= \"Seven\"\
    ;\n                    break;\n                case 8:\n                    result\
    \ ~= \"Eight\";\n                    break;\n                case 9:\n       \
    \             result ~= \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    result = result.sort();\n    result = result.reverse();\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8plc3h7d.d(24): Error: new can only create structs, dynamic
    arrays or class objects, not `string[]`\''s\n/tmp/tmp8plc3h7d.d(29): Error: `switch`
    statement without a `default`; use `final switch` or add `default: assert(0);`
    or add `default: break;`\n/tmp/tmp8plc3h7d.d(61): Error: no property `sort` for
    type `string[]`\n/tmp/tmp8plc3h7d.d(62): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8plc3h7d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    foreach(i, e; arr)\n    {\n\
    \        if(e > 0 && e < 10)\n        {\n            result[i] = to!string(e);\n\
    \        }\n    }\n    result = result.sort();\n    result = result.reverse();\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9o2l94hp.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmp9o2l94hp.d(32): Error: no property
    `sort` for type `string[]`\n/tmp/tmp9o2l94hp.d(33): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmp9o2l94hp.d(36): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9o2l94hp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(x => x > 0 && x < 10).sort!q{a\
    \ > b};\n    foreach(x; sorted)\n    {\n        switch(x)\n        {\n       \
    \     case 1:\n                result ~= \"One\";\n                break;\n  \
    \          case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbtwm3qq0.d(25): Error: no property `filter` for type `long[]`\n/tmp/tmpbtwm3qq0.d(28):
    Error: `switch` statement without a `default`; use `final switch` or add `default:
    assert(0);` or add `default: break;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbtwm3qq0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qprsuux.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmp8qprsuux.d(32): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8qprsuux.d(33): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qprsuux.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(to!int(elem))\n        {\n            case 1:\n         \
    \       elem = \"One\";\n                break;\n            case 2:\n       \
    \         elem = \"Two\";\n                break;\n            case 3:\n     \
    \           elem = \"Three\";\n                break;\n            case 4:\n \
    \               elem = \"Four\";\n                break;\n            case 5:\n\
    \                elem = \"Five\";\n                break;\n            case 6:\n\
    \                elem = \"Six\";\n                break;\n            case 7:\n\
    \                elem = \"Seven\";\n                break;\n            case 8:\n\
    \                elem = \"Eight\";\n                break;\n            case 9:\n\
    \                elem = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmln86m1s.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpmln86m1s.d(32): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmln86m1s.d(33): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpmln86m1s.d(36): Error: template instance `to!int`
    template `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmln86m1s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(a => a >= 1 && a <= 9).sort;\n\
    \    result = sorted.map!(a => to!string(a)).reverse;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcixavxjz.d(25): Error: no property `filter` for type `long[]`\n/tmp/tmpcixavxjz.d(26):
    Error: no property `map` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcixavxjz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    result.sort!((a, b) => a.length > b.length);\n    result.reverse;\n    foreach(elem;\
    \ result)\n    {\n        switch(elem)\n        {\n            case \"1\":\n \
    \               elem = \"One\";\n                break;\n            case \"2\"\
    :\n                elem = \"Two\";\n                break;\n            case \"\
    3\":\n                elem = \"Three\";\n                break;\n            case\
    \ \"4\":\n                elem = \"Four\";\n                break;\n         \
    \   case \"5\":\n                elem = \"Five\";\n                break;\n  \
    \          case \"6\":\n                elem = \"Six\";\n                break;\n\
    \            case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4e4_vla.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmph4e4_vla.d(32): Error: no property
    `sort` for type `string[]`\n/tmp/tmph4e4_vla.d(33): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmph4e4_vla.d(36): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4e4_vla.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: Implement me!\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_yz92bsc.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x429195]\n??:? void tmp_yz92bsc.__unittest_L27_C1() [0x427fe3]\n??:?
    void tmp_yz92bsc.__modtest() [0x4283fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428eee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a941]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428ec5]\n??:? runModuleUnitTests [0x42da71]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42956b]\n??:? _d_run_main [0x4294d6]\n??:? main [0x42840f]\n??:?
    __libc_start_main [0xabb80554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    if (arr.length == 0)\n        return result;\n \
    \   foreach (elem; arr)\n    {\n        if (elem >= 1 && elem <= 9)\n        \
    \    result ~= to!string(elem);\n    }\n    result.sort!((a, b) => a.length >\
    \ b.length);\n    result.reverse;\n    result = result.map!(a => a.replace(\"\
    1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\").replace(\"4\"\
    , \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"7\", \"\
    Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\"));\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmf6btk41.d(30): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpmf6btk41.d(32): Error: no property
    `sort` for type `string[]`\n/tmp/tmpmf6btk41.d(33): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpmf6btk41.d(34): Error: no property `map` for type
    `string[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmf6btk41.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ncj9hl0.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmp4ncj9hl0.d(32): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4ncj9hl0.d(33): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmp4ncj9hl0.d(36): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ncj9hl0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qprsuux.d(29): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmp8qprsuux.d(32): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8qprsuux.d(33): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qprsuux.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // your code here\n    return arr.filter!(a => a > 0 && a < 10).sort.reverse.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcckjw20w.d(25): Error: no property `filter` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcckjw20w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i > 0 && i < 10)\n        {\n            result[j] = to!string(i);\n\
    \            j++;\n        }\n    }\n    result = result[0..j];\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah837n44.d(30): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpah837n44.d(35): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpah837n44.d(36): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpah837n44.d(39): Error: `switch` statement without
    a `default`; use `final switch` or add `default: assert(0);` or add `default:
    break;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah837n44.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6q99sk5.d(24): Error: no property `filter` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6q99sk5.d", "-I/tmp"]\n'''
  stdout: b''
