{
  "language": "d",
  "name": "HumanEval_139_special_factorial",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    if (n < 0)\n        return 0;\n    else if (n == 0)\n        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7i4jrrad.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp7i4jrrad.__unittest_L25_C1() [0x427a6a]\n??:? void tmp7i4jrrad.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjs0qtzgz.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmpjs0qtzgz.__unittest_L25_C1() [0x427a62]\n??:? void tmpjs0qtzgz.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd34jconi.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpd34jconi.__unittest_L25_C1() [0x427a5a]\n??:? void tmpd34jconi.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfwaixkgx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpfwaixkgx.__unittest_L25_C1() [0x427a66]\n??:? void tmpfwaixkgx.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4iwr7cue.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmp4iwr7cue.__unittest_L25_C1() [0x427a62]\n??:? void tmp4iwr7cue.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    return n > 0 ? n * special_factorial(n - 1) : 1;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpufepcie9.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpufepcie9.__unittest_L20_C1() [0x427a5a]\n??:? void tmpufepcie9.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfwaixkgx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpfwaixkgx.__unittest_L25_C1() [0x427a66]\n??:? void tmpfwaixkgx.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n) \n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1b3tzwh8.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1b3tzwh8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long ret = 1;\n    foreach(i; 1..n)\n    {\n        ret *= i;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6zytafef.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmp6zytafef.__unittest_L25_C1() [0x427a62]\n??:? void tmp6zytafef.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    foreach(i; 1..n+1)\n    {\n        factorial *= i;\n    }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdr14w31j.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpdr14w31j.__unittest_L25_C1() [0x427a66]\n??:? void tmpdr14w31j.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwd8phrd1.d(19): Error: cannot implicitly convert expression `n` of type `long` to `int`\n/tmp/tmpwd8phrd1.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwd8phrd1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd34jconi.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpd34jconi.__unittest_L25_C1() [0x427a5a]\n??:? void tmpd34jconi.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpib_s38wv.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmpib_s38wv.__unittest_L25_C1() [0x427a62]\n??:? void tmpib_s38wv.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjs0qtzgz.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmpjs0qtzgz.__unittest_L25_C1() [0x427a62]\n??:? void tmpjs0qtzgz.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjs0qtzgz.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmpjs0qtzgz.__unittest_L25_C1() [0x427a62]\n??:? void tmpjs0qtzgz.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfwaixkgx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpfwaixkgx.__unittest_L25_C1() [0x427a66]\n??:? void tmpfwaixkgx.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    if (n < 0)\n        return 0;\n    else if (n == 0)\n        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7i4jrrad.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp7i4jrrad.__unittest_L25_C1() [0x427a6a]\n??:? void tmp7i4jrrad.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1soqsl_.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1soqsl_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd34jconi.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpd34jconi.__unittest_L25_C1() [0x427a5a]\n??:? void tmpd34jconi.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 0..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyn4vz_gq.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyn4vz_gq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd34jconi.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpd34jconi.__unittest_L25_C1() [0x427a5a]\n??:? void tmpd34jconi.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpefq8qywq.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpefq8qywq.__unittest_L25_C1() [0x427a66]\n??:? void tmpefq8qywq.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    if (n <= 0)\n        return 0;\n    else\n    {\n        long result = 1;\n        foreach (i; 1..n)\n        {\n            result *= factorial(i);\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgjgwp1uz.d(25): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjgwp1uz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyfcz6w8p.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfcz6w8p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd34jconi.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpd34jconi.__unittest_L25_C1() [0x427a5a]\n??:? void tmpd34jconi.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuy51no9u.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy51no9u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc7k9ht57.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7k9ht57.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpubnod60o.d(21): Error: undefined identifier `factorial`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubnod60o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    }
  ]
}