name: HumanEval_135_can_arrange
language: d
prompt: "import std.math;\n/*\nCreate a function which returns the largest index of\
  \ an element which\n    is not greater than or equal to the element immediately\
  \ preceding it. If\n    no such element exists then return -1. The given array will\
  \ not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
  \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n*/\n\
  long can_arrange(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n  \
  \  assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
  \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long max = arr[0];\n    long index = -1;\n    for (long i =\
    \ 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n    \
    \        max = max(max, arr[i]);\n            index = i;\n        }\n    }\n \
    \   return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for\
    \ (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n     \
    \   {\n            max = max(max, arr[i]);\n            index = i;\n        }\n\
    \    }\n    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n\
    \    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <= max)\
    \ \n        {\n            max = max(max, arr[i]);\n            index = i;\n \
    \       }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n    long\
    \ index = -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            max = max(max, arr[i]);\n            index\
    \ = i;\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n    \
    \        index = i;\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n\
    \    {\n        if (arr[i] <= max)\n        {\n            index = i;\n      \
    \  }\n        else\n        {\n            max = arr[i];\n        }\n    }\n \
    \   return index;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n \
    \   for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n\
    \        {\n            return max_index;\n        }\n        else\n        {\n\
    \            max = arr[i];\n            max_index = i;\n        }\n    }\n   \
    \ return -1;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n    for\
    \ (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n      \
    \  {\n            return max_index;\n        }\n        if (arr[i] > max)\n  \
    \      {\n            max = arr[i];\n            max_index = i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n\
    \    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n\
    \        {\n            max = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    return max_index;\n}", "{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n    long\
    \ index = -1;\n    foreach(i, e; arr)\n    {\n        if(e < max)\n        {\n\
    \            index = i;\n        }\n        else\n        {\n            max =\
    \ e;\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n  \
    \  long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n   \
    \     if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n \
    \       {\n            index = i;\n        }\n        else\n        {\n      \
    \      max = e;\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n \
    \       if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n\
    \    foreach(i, e; arr)\n    {\n        if(e <= max)\n            return i - 1;\n\
    \        max = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n    \
    \        index = i;\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length; i++)\n\
    \    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n    \
    \        maxIndex = i;\n        }\n    }\n    return maxIndex;\n}", "{\n    long\
    \ max = -1L;\n    for (long i = 0L; i < arr.length - 1L; i++) \n    {\n      \
    \  if (arr[i] > arr[i + 1L]) \n        {\n            max = max(max, i);\n   \
    \     }\n    }\n    return max;\n}", "{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return maxIndex;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    return -1;\n}", "{\n    long max = -1L;\n    long max_index = -1L;\n\
    \    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            return max_index;\n        }\n        else\n        {\n\
    \            max = arr[i];\n            max_index = i;\n        }\n    }\n   \
    \ return -1L;\n}", "{\n    long max = -1L;\n    foreach(i, e; arr)\n    {\n  \
    \      if(i == 0)\n            continue;\n        if(e < arr[i - 1])\n       \
    \     max = max(max, i - 1);\n    }\n    return max;\n}", "{\n    long max = arr[0];\n\
    \    long maxIndex = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] > max)\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}", "{\n    long max_index = -1L;\n\
    \    for (long i = 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i\
    \ - 1L])\n        {\n            max_index = max(max_index, i - 1L);\n       \
    \ }\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e < max)\n            return i - 1;\n        max\
    \ = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = 0L;\n    foreach(i;\
    \ 0 .. arr.length)\n    {\n        if(arr[i] <= arr[i-1])\n        {\n       \
    \     max = i;\n        }\n    }\n    return max;\n}", "{\n    long max = 0L;\n\
    \    long max_index = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n\
    \        {\n            return max_index;\n        }\n        else\n        {\n\
    \            max = e;\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long\
    \ i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <= max) \n        {\n\
    \            max = max(max, arr[i]);\n            index = i;\n        }\n    }\n\
    \    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n   \
    \ foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n            max\
    \ = e;\n            index = i;\n        }\n    }\n    return index;\n}", "{\n\
    \    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}", "{\n\
    \    long i = arr.length - 1;\n    while (i > 0) {\n        if (arr[i] < arr[i\
    \ - 1]) {\n            return i - 1;\n        }\n        i--;\n    }\n    return\
    \ -1;\n}", "{\n    long max = -1L;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ <= max)\n            return i - 1;\n        max = max(max, e);\n    }\n    return\
    \ -1L;\n}", "{\n    long max = 0L;\n    long maxIndex = -1L;\n    for (long i\
    \ = 0L; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n  \
    \          max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return\
    \ maxIndex;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    return\
    \ index;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n \
    \           max = arr[i];\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n\
    \            index = i;\n        }\n        else\n        {\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n\
    \    long max_index = 0;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n\
    \        {\n            max = e;\n            max_index = i;\n        }\n    }\n\
    \    return max_index;\n}", "{\n    long max = 0L;\n    foreach(i; 0 .. arr.length)\n\
    \    {\n        if(arr[i] < arr[i-1])\n        {\n            max = i;\n     \
    \   }\n    }\n    return max;\n}", "{\n    long max = -1L;\n    for (long i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n\
    \            max = max(max, i - 1);\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] <= arr[i - 1L])\n        {\n            max = i;\n        }\n \
    \   }\n    return max;\n}", "{\n    long max = -1L;\n    long max_index = -1L;\n\
    \    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            return\
    \ max_index;\n        }\n        max = v;\n        max_index = i;\n    }\n   \
    \ return -1L;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long\
    \ i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <= max) \n        {\n\
    \            max = max(max, arr[i]);\n            index = i;\n        }\n    }\n\
    \    return index;\n}", "{\n    long max = -1L;\n    long max_index = -1L;\n \
    \   foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            max\
    \ = v;\n            max_index = i;\n        }\n    }\n    return max_index;\n}",
  "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] <= max) \n        {\n            index = i;\n\
    \        }\n        else \n        {\n            max = arr[i];\n        }\n \
    \   }\n    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n\
    \    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n            max\
    \ = e;\n            index = i;\n        }\n    }\n    return index;\n}", "{\n\
    \    long max = arr[0];\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e <= max)\n        {\n            max = e;\n            index = i;\n\
    \        }\n    }\n    return index;\n}", "{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n   \
    \         return max_index;\n        }\n        else\n        {\n            max\
    \ = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n}",
  "{\n    long max = arr[0];\n    long max_index = 0;\n    foreach(i, v; arr)\n  \
    \  {\n        if(v > max)\n        {\n            max = v;\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n\
    \    for (long i = 0L; i < arr.length - 1L; i++)\n    {\n        if (arr[i] >=\
    \ arr[i + 1L])\n            continue;\n        if (arr[i] > max)\n           \
    \ max = i;\n    }\n    return max;\n}", "{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            return max_index;\n        }\n        max =\
    \ max(max, arr[i]);\n        max_index = i;\n    }\n    return -1L;\n}", "{\n\
    \    long max = -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= arr[i - 1L])\n        {\n            max = max(max, i - 1L);\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = 0L;\n    foreach(i;\
    \ 0 .. arr.length)\n    {\n        if(arr[i] < arr[i-1])\n        {\n        \
    \    max = max(max, i-1);\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return max_index;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return -1;\n}", "{\n    long max = -1L;\n    for\
    \ (long i = 0L; i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i\
    \ + 1L]) \n        {\n            max = max(max, i);\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = -1L;\n    long max_index = -1L;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e < max)\n        {\n            return max_index;\n\
    \        }\n        if(e > max)\n        {\n            max = e;\n           \
    \ max_index = i;\n        }\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n \
    \       if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n\
    \    foreach(i, e; arr)\n    {\n        if(e < max)\n            return i - 1;\n\
    \        max = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = -1L;\n\
    \    foreach(i, v; arr)\n    {\n        if(v <= arr[i - 1])\n            max =\
    \ max(max, i - 1);\n    }\n    return max;\n}", "{\n    long max = arr[0];\n \
    \   long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n     \
    \       index = i;\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= arr[i - 1])\n       \
    \     max = max(max, i - 1);\n    }\n    return max;\n}", "{\n    long len = arr.length;\n\
    \    long max = -1L;\n    for (long i = 0L; i < len - 1L; i++)\n    {\n      \
    \  if (arr[i] > arr[i + 1L])\n        {\n            max = max(max, i);\n    \
    \    }\n    }\n    return max;\n}", "{\n    long max = arr[0];\n    long index\
    \ = -1;\n    foreach(long i, long v; arr)\n    {\n        if(v <= max)\n     \
    \   {\n            max = v;\n            index = i;\n        }\n    }\n    return\
    \ index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v <= max)\n        {\n            max = v;\n    \
    \        index = i;\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = -1L;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i]\
    \ >= arr[i + 1])\n            continue;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return max;\n}", "{\n    long max = arr[0];\n    long index\
    \ = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            index = i;\n     \
    \   }\n    }\n    return index;\n}", "{\n    long max = -1L;\n    foreach(i, e;\
    \ arr)\n    {\n        if(e <= max)\n            return i - 1;\n        max =\
    \ max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = 0L;\n    for (long\
    \ i = 1L; i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n\
    \        {\n            max = max(max, i - 1L);\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i\
    \ = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n  \
    \          max = max(max, arr[i]);\n            index = i;\n        }\n    }\n\
    \    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n   \
    \ for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n  \
    \      {\n            index = i;\n        }\n        else\n        {\n       \
    \     max = arr[i];\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = arr[0];\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ <= max)\n        {\n            max = e;\n            index = i;\n        }\n\
    \    }\n    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n\
    \    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            index\
    \ = i;\n        }\n        else\n        {\n            max = v;\n        }\n\
    \    }\n    return index;\n}", "{\n    long max = 0L;\n    foreach(i; 0 .. arr.length)\n\
    \    {\n        if(arr[i] <= arr[i-1])\n        {\n            max = max(max,\
    \ i-1);\n        }\n    }\n    return max;\n}", "{\n    long max = arr[0];\n \
    \   long maxIndex = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            maxIndex = i;\n   \
    \     }\n    }\n    return maxIndex;\n}", "{\n    long max = arr[0];\n    long\
    \ maxIndex = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] > max)\n        {\n            max = arr[i];\n            maxIndex =\
    \ i;\n        }\n    }\n    return maxIndex;\n}", "{\n    long max = -1L;\n  \
    \  foreach(i, e; arr)\n    {\n        if(e <= max)\n            return i - 1;\n\
    \        max = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = -1L;\n\
    \    long max_index = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n\
    \        {\n            return max_index;\n        }\n        max = e;\n     \
    \   max_index = i;\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n\
    \    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i\
    \ + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n\
    \    }\n    return max;\n}", "{\n    long max = arr[0];\n    long max_index =\
    \ 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n    long\
    \ index = -1;\n    foreach(i, num; arr)\n    {\n        if(num <= max)\n     \
    \   {\n            max = num;\n            index = i;\n        }\n    }\n    return\
    \ index;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n \
    \           max = arr[i];\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;\n}", "{\n    long largest = -1L;\n    long largestIndex = -1L;\n\
    \    foreach(i, v; arr)\n    {\n        if(v <= largest)\n        {\n        \
    \    largest = v;\n            largestIndex = i;\n        }\n    }\n    return\
    \ largestIndex;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e <= max)\n        {\n            index = i;\n  \
    \      }\n        else\n        {\n            max = e;\n        }\n    }\n  \
    \  return index;\n}", "{\n    long max = -1L;\n    for (long i = 0L; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n            max\
    \ = max(max, i - 1L);\n        }\n    }\n    return max;\n}", "{\n    long max\
    \ = arr[0];\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ <= max)\n        {\n            max = e;\n            index = i;\n        }\n\
    \    }\n    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n\
    \    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            index = i;\n        }\n        else\n        {\n     \
    \       max = arr[i];\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = -1L;\n    for (long i = 0L; i < arr.length - 1L; i++) \n    {\n        if\
    \ (arr[i] >= arr[i + 1L]) \n        {\n            continue;\n        }\n    \
    \    max = max(max, i + 1L);\n    }\n    return max;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (int i = 1; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] <= max)\n        {\n            index = i;\n        }\n       \
    \ else\n        {\n            max = arr[i];\n        }\n    }\n    return index;\n\
    }", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n           \
    \ max = max(max, arr[i]);\n            index = i;\n        }\n    }\n    return\
    \ index;\n}", "{\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n \
    \           max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return\
    \ maxIndex;\n}", "{\n    long max = 0L;\n    foreach(i; 0 .. arr.length)\n   \
    \ {\n        if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n\
    \        else\n        {\n            return i - 1L;\n        }\n    }\n    return\
    \ -1L;\n}", "{\n    long max = 0L;\n    long max_index = -1L;\n    for (long i\
    \ = 0L; i < arr.length; i++) \n    {\n        if (arr[i] <= max) \n        {\n\
    \            return max_index;\n        }\n        max = arr[i];\n        max_index\
    \ = i;\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n    for (long\
    \ i = 0L; i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i + 1L])\
    \ \n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n\
    }", "{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n        \
    \    max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n           \
    \ index = i;\n        }\n        else\n        {\n            max = arr[i];\n\
    \        }\n    }\n    return index;\n}", "{\n    long max = 0L;\n    for (long\
    \ i = 1L; i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = -1L;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n \
    \       if (arr[i] >= arr[i + 1])\n            continue;\n        if (max < i)\n\
    \            max = i;\n    }\n    return max;\n}", "{\n    long max = -1L;\n \
    \   for (long i = 0; i < arr.length - 1; i++) \n    {\n        if (arr[i] > arr[i\
    \ + 1]) \n        {\n            max = max(max, i);\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i\
    \ = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n  \
    \          index = i;\n        }\n        else\n        {\n            max = arr[i];\n\
    \        }\n    }\n    return index;\n}", "{\n    long max = -1L;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n    \
    \    {\n            max = max(max, i - 1);\n        }\n    }\n    return max;\n\
    }", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n           \
    \ max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n\
    }", "{\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n          \
    \  max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n\
    }", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n           \
    \ max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n\
    }", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max\
    \ = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}",
  "{\n    long max = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v <= max)\n        {\n            index = i;\n        }\n        else\n\
    \        {\n            max = v;\n        }\n    }\n    return index;\n}", "{\n\
    \    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}", "{\n\
    \    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] <= max) \n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}", "{\n\
    \    long n = arr.length;\n    long max = arr[n - 1];\n    long index = n - 1;\n\
    \    for (long i = n - 2; i >= 0; i--) \n    {\n        if (arr[i] <= max) \n\
    \        {\n            max = arr[i];\n            index = i;\n        }\n   \
    \ }\n    return index;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n\
    \    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n\
    \        {\n            max = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    return max_index;\n}", "{\n    long max = arr[0];\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n    \
    \        max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }", "{\n    long max = -1L;\n    for (long i = 0; i < arr.length - 1; i++) \n\
    \    {\n        if (arr[i] > arr[i + 1]) \n        {\n            max = max(max,\
    \ i);\n        }\n    }\n    return max;\n}", "{\n    long max = -1L;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e <= max)\n            return i - 1;\n        max\
    \ = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = -1L;\n    long\
    \ max_index = -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n     \
    \   if (arr[i] <= max) \n        {\n            return max_index;\n        }\n\
    \        max = max(max, arr[i]);\n        max_index = i;\n    }\n    return -1L;\n\
    }", "{\n    long max = -1L;\n    for (long i = 0L; i < arr.length - 1L; i++)\n\
    \    {\n        if (arr[i] >= arr[i + 1L])\n            continue;\n        if\
    \ (arr[i] > max)\n            max = i;\n    }\n    return max;\n}", "{\n    long\
    \ max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n\
    \    {\n        if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n\
    \            index = i;\n        }\n    }\n    return index;\n}", "{\n    long\
    \ max = 0L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= arr[i - 1L]) \n        {\n            return max;\n        }\n        max\
    \ = i;\n    }\n    return -1L;\n}", "{\n    long res = -1L;\n    for (long i =\
    \ 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n      \
    \  {\n            res = i - 1L;\n            break;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n \
    \           max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return\
    \ maxIndex;\n}", "{\n    long max = 0L;\n    foreach(i; 0 .. arr.length)\n   \
    \ {\n        if(arr[i] <= arr[i - 1])\n        {\n            max = max(max, i\
    \ - 1);\n        }\n    }\n    return max;\n}", "{\n    long max = -1L;\n    long\
    \ max_index = -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] <= max)\n        {\n            return max_index;\n        }\n \
    \       else\n        {\n            max = arr[i];\n            max_index = i;\n\
    \        }\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}", "{\n    long max = 0L;\n    foreach(i;\
    \ 0 .. arr.length)\n    {\n        if(arr[i] > max)\n        {\n            max\
    \ = arr[i];\n        }\n        else if(arr[i] == max)\n        {\n          \
    \  max = arr[i];\n        }\n        else\n        {\n            return i - 1L;\n\
    \        }\n    }\n    return -1L;\n}", "{\n    long n = arr.length;\n    long\
    \ max = arr[n - 1];\n    long index = n - 1;\n    for (long i = n - 2; i >= 0;\
    \ i--) \n    {\n        if (arr[i] <= max) \n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}", "{\n    long\
    \ max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] <= max) {\n            return max_index;\n      \
    \  }\n        if (arr[i] > max) {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return -1;\n}", "{\n    long max = arr[0];\n   \
    \ long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n       \
    \     index = i;\n        }\n    }\n    return index;\n}", "{\n    long max =\
    \ -1L;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i]\
    \ >= arr[i + 1])\n            continue;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return max;\n}", "{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(i == 0)\n        {\n            max = arr[i];\n\
    \        }\n        else\n        {\n            if(arr[i] <= max)\n         \
    \   {\n                return i - 1;\n            }\n            else\n      \
    \      {\n                max = arr[i];\n            }\n        }\n    }\n   \
    \ return -1L;\n}", "{\n    long max = -1L;\n    for (long i = 0L; i < arr.length\
    \ - 1L; i++) \n    {\n        if (arr[i] >= arr[i + 1L]) \n        {\n       \
    \     continue;\n        }\n        max = max(max, i + 1L);\n    }\n    return\
    \ max;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i\
    \ = 1; i < arr.length; i++) \n    {\n        if (arr[i] <= max) \n        {\n\
    \            index = i;\n        }\n        else \n        {\n            max\
    \ = arr[i];\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n    \
    \        index = i;\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = 0L;\n    foreach(i; 0 .. arr.length)\n    {\n        if(arr[i] <= arr[i-1])\n\
    \        {\n            return max;\n        }\n        else\n        {\n    \
    \        max = i;\n        }\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n\
    \    long maxIndex = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] <= max)\n        {\n            return maxIndex;\n        }\n\
    \        else\n        {\n            max = arr[i];\n            maxIndex = i;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n      \
    \      max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }", "{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n        \
    \    max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }", "{\n    long max = 0L;\n    foreach(i; 0..arr.length)\n    {\n        if(arr[i]\
    \ <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long\
    \ i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n\
    \            return maxIndex;\n        }\n        else\n        {\n          \
    \  max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return -1;\n\
    }", "{\n    long max = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n\
    \    {\n        if(v <= max)\n        {\n            index = i;\n        }\n \
    \       else\n        {\n            max = v;\n        }\n    }\n    return index;\n\
    }", "{\n    long max = 0L;\n    long max_index = -1L;\n    for (long i = 0L; i\
    \ < arr.length; i++) \n    {\n        if (arr[i] <= max) \n        {\n       \
    \     max = arr[i];\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;\n}", "{\n    long max = -1L;\n    foreach(i, v; arr)\n    {\n   \
    \     if(v <= max)\n            return i - 1;\n        max = v;\n    }\n    return\
    \ -1L;\n}", "{\n    long max = arr[0];\n    long index = -1;\n    for (long i\
    \ = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n  \
    \          index = i;\n        }\n        else\n        {\n            max = arr[i];\n\
    \        }\n    }\n    return index;\n}", "{\n    long max = -1L;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e <= max)\n            return i - 1;\n        max\
    \ = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max_index = -1L;\n\
    \    long max_value = arr[0];\n    for (long i = 1L; i < arr.length; i++)\n  \
    \  {\n        if (arr[i] <= max_value)\n        {\n            max_index = i;\n\
    \        }\n        else\n        {\n            max_value = arr[i];\n       \
    \ }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            max_index = i;\n \
    \       }\n    }\n    return -1;\n}", "{\n    long max = arr[0];\n    long index\
    \ = -1;\n    foreach(i, e; arr) \n    {\n        if (e <= max) \n        {\n \
    \           max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }", "{\n    long max = -1L;\n    long max_index = -1L;\n    for (long i = 0L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n       \
    \     return max_index;\n        }\n        max = arr[i];\n        max_index =\
    \ i;\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}", "{\n    long\
    \ max = -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= arr[max])\n     \
    \       max = i;\n    }\n    return max;\n}", "{\n    long max = arr[0];\n   \
    \ long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n    \
    \    {\n            max = e;\n            index = i;\n        }\n    }\n    return\
    \ index;\n}", "{\n    long max = -1L;\n    for (long i = 1L; i < arr.length; i++)\
    \ \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n            max = max(max,\
    \ i - 1L);\n        }\n    }\n    return max;\n}", "{\n    long max = -1L;\n \
    \   long max_index = -1L;\n    for (long i = arr.length - 1L; i >= 0L; i--)\n\
    \    {\n        if (arr[i] < max)\n        {\n            max_index = i;\n   \
    \     }\n        else\n        {\n            max = max(max, arr[i]);\n      \
    \  }\n    }\n    return max_index;\n}", "{\n    long max = 0L;\n    foreach(long\
    \ i; arr)\n    {\n        if(i > max)\n        {\n            max = i;\n     \
    \   }\n    }\n    long index = -1L;\n    for(long i = 0L; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == max)\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}", "{\n    long max = 0L;\n    for (long i = 0L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}", "{\n    long i =\
    \ arr.length - 1;\n    while (i > 0 && arr[i] >= arr[i - 1])\n        i--;\n \
    \   return i - 1;\n}", "{\n    long result = -1L;\n    long max = arr[0];\n  \
    \  for (long i = 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            result = i;\n        }\n        else\n        {\n    \
    \        max = arr[i];\n        }\n    }\n    return result;\n}", "{\n    long\
    \ max = 0L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ < arr[i - 1L])\n        {\n            return i - 1L;\n        }\n    }\n  \
    \  return -1L;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n    for\
    \ (long i = 1; i < arr.length; i++) {\n        if (arr[i] <= max) {\n        \
    \    max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }", "{\n    long i = arr.length;\n    while (i-- > 0) \n    {\n        if (arr[i]\
    \ < arr[i + 1]) \n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long largest = -1L;\n    long largestIndex = -1L;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e <= largest)\n        {\n            largest = e;\n\
    \            largestIndex = i;\n        }\n    }\n    return largestIndex;\n}",
  "{\n    long max = -1L;\n    for (long i = 0L; i < arr.length - 1L; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1L])\n            continue;\n        if (arr[i]\
    \ > max)\n            max = i;\n    }\n    return max;\n}", "{\n    long max =\
    \ arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n\
    \    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n    \
    \        max_index = i;\n        }\n    }\n    return max_index;\n}", "{\n   \
    \ long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return max_index;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return -1;\n}", "{\n    long max = -1L;\n    for\
    \ (long i = 0L; i < arr.length - 1L; i++) \n    {\n        if (arr[i] >= arr[i\
    \ + 1L]) \n        {\n            continue;\n        }\n        max = max(max,\
    \ i + 1L);\n    }\n    return max;\n}", "{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}", "{\n    long max = arr[0];\n    long\
    \ max_idx = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ <= max) {\n            return max_idx;\n        }\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   return -1;\n}", "{\n    long max = -1L;\n    for (long i = 0L; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n        {\n            max\
    \ = max(max, i - 1L);\n        }\n    }\n    return max;\n}", "{\n    long max\
    \ = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n \
    \       if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= max)\n        {\n            max = max(max, arr[i]);\n    \
    \        index = i;\n        }\n    }\n    return index;\n}", "{\n    long max\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= arr[i-1])\n         \
    \   max = max(max, i-1);\n    }\n    return max;\n}", "{\n    long max = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n \
    \       if (arr[i] < max)\n        {\n            return max_index;\n        }\n\
    \        else if (arr[i] > max)\n        {\n            max = arr[i];\n      \
    \      max_index = i;\n        }\n    }\n    return -1;\n}", "{\n    long max\
    \ = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n\
    \    {\n        if (arr[i] <= max)\n        {\n            index = i;\n      \
    \  }\n        else\n        {\n            max = arr[i];\n        }\n    }\n \
    \   return index;\n}", "{\n    long max = -1L;\n    long maxIndex = -1L;\n   \
    \ for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            maxIndex = i;\n        }\n        else\n        {\n  \
    \          max = arr[i];\n        }\n    }\n    return maxIndex;\n}", "{\n   \
    \ long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}", "{\n    long max = arr[0];\n   \
    \ long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] <= max)\n        {\n            index = i;\n        }\n        else\n\
    \        {\n            max = arr[i];\n        }\n    }\n    return index;\n}",
  "{\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] <= max) \n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}", "{\n\
    \    long i = arr.length - 1;\n    while (i > 0 && arr[i] >= arr[i - 1])\n   \
    \     i--;\n    return i - 1;\n}", "{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}", "{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            return max_index;\n        }\n        max =\
    \ max(max, arr[i]);\n        max_index = i;\n    }\n    return -1L;\n}", "{\n\
    \    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}", "{\n    long max = -1L;\n    for (long i = 0L; i\
    \ < arr.length - 1L; i++)\n    {\n        if (arr[i] > arr[i + 1L])\n        {\n\
    \            max = max(max, i);\n        }\n    }\n    return max;\n}", "{\n \
    \   long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}", "{\n    long max = -1L;\n    for (long i = 0L; i\
    \ < arr.length - 1L; i++) \n    {\n        if (arr[i] >= arr[i + 1L]) \n     \
    \   {\n            continue;\n        }\n        max = max(max, i + 1L);\n   \
    \ }\n    return max;\n}", "{\n    long max = arr[0];\n    long max_index = 0;\n\
    \    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n            max\
    \ = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n}",
  "{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ max_index = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max\
    \ = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n\
    \    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n    \
    \        max_index = i;\n        }\n    }\n    return max_index;\n}", "{\n   \
    \ long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}", "{\n    long\
    \ max = arr[0];\n    long max_index = 0;\n    foreach(long i, long a; arr)\n \
    \   {\n        if(a > max)\n        {\n            max = a;\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = -1L;\n\
    \    long maxIndex = -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n\
    \        {\n            return maxIndex;\n        }\n        max = v;\n      \
    \  maxIndex = i;\n    }\n    return maxIndex;\n}", "{\n    long max = -1L;\n \
    \   long max_index = -1L;\n    foreach(long i, long v; arr) {\n        if (v <=\
    \ max) {\n            return max_index;\n        }\n        max = v;\n       \
    \ max_index = i;\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n   \
    \ long max_index = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if\
    \ (arr[i] <= max) {\n            return max_index;\n        }\n        max = max(max,\
    \ arr[i]);\n        max_index = i;\n    }\n    return -1;\n}", "{\n    long largest\
    \ = -1L;\n    long prev = arr[0];\n    for (long i = 1L; i < arr.length; i++)\n\
    \    {\n        if (arr[i] <= prev)\n        {\n            largest = max(largest,\
    \ i - 1L);\n        }\n        prev = arr[i];\n    }\n    return largest;\n}",
  "{\n    long max = -1L;\n    for (long i = 0; i < arr.length - 1; i++) \n    {\n\
    \        if (arr[i] >= arr[i + 1]) \n        {\n            max = max(max, i);\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = arr[0];\n    long index\
    \ = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            max = max(max, arr[i]);\n            index =\
    \ i;\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n  \
    \  long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n   \
    \     {\n            index = i;\n        }\n        else\n        {\n        \
    \    max = e;\n        }\n    }\n    return index;\n}", "{\n    long max = -1L;\n\
    \    foreach(i, e; arr)\n    {\n        if(e <= max)\n            return i - 1;\n\
    \        max = max(max, e);\n    }\n    return -1L;\n}", "{\n    long max = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < arr.length; i++) {\n      \
    \  if (arr[i] <= max) {\n            return max_index;\n        }\n        max\
    \ = max(max, arr[i]);\n        max_index = i;\n    }\n    return -1;\n}", "{\n\
    \    long max = -1L;\n    long max_index = -1L;\n    foreach(i, v; arr)\n    {\n\
    \        if(v <= max)\n        {\n            max = v;\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= max)\n        {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    return index;\n}", "{\n    long max = arr[0];\n\
    \    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= max)\n        {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    return index;\n}", "{\n    long max = -1L;\n   \
    \ long index = -1L;\n    foreach(i, e; arr)\n    {\n        if(e < max)\n    \
    \    {\n            index = i;\n            break;\n        }\n        max = e;\n\
    \    }\n    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n\
    \    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            max = arr[i];\n            index = i;\n        }\n   \
    \ }\n    return index;\n}", "{\n    long max = arr[0];\n    long index = -1;\n\
    \    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            max = arr[i];\n            index = i;\n        }\n   \
    \ }\n    return index;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
