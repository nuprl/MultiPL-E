language: d
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        switch(i)\n  \
    \      {\n            case '2':\n            case '3':\n            case '5':\n\
    \            case '7':\n            case 'B':\n            case 'D':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6d6qlj8_.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d6qlj8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\nYou have been tasked\
    \ to write a function that receives a string and \n    returns a string that contains\
    \ the same characters as the input string, \n    but in a reversed order.\n  \
    \  Examples:\n    >>> reverse_string(\"Hello World!\")\n    \"!dlroW olleH\"\n\
    \    >>> reverse_string(\"\")\n    \"\"\n    >>> reverse_string(\"a\")\n    \"\
    a\"\n    >>> reverse_string(\"ab\")\n    \"ba\"\n    >>> reverse_string(\"abc\"\
    )\n    \"cba\"\n    >>> reverse_string(\"abcdefghijklmnopqrstuvwxyz\")\n    \"\
    zyxwvutsrqponmlkjihgfedcba\"\n*/\nstring reverse_string(string str) \n{\n    string\
    \ result = \"\";\n    foreach(i; str)\n    {\n        result = i ~ result;\n \
    \   }\n    return result;\n}\n/*\nYou have been tasked to write a function that\
    \ receives a string and \n    returns a string that contains the same characters\
    \ as the input string, \n    but in a reversed order.\n    Examples:\n    >>>\
    \ reverse_string(\"Hello World!\")\n    \"!dlroW olleH\"\n    >>> reverse_string(\"\
    \")\n    \"\"\n    >>> reverse_string(\"a\")\n    \"a\"\n    >>> reverse_string(\"\
    ab\")\n    \"ba\"\n    >>> reverse_string(\"abc\")\n    \"cba\"\n    >>> reverse_string(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    \"zyxwvutsrqponmlkjihgfedcba\"\n*/\nstring\
    \ reverse_string(string str) \n{\n    string result = \"\";\n    foreach(i; str)\n\
    \    {\n        result = i ~ result;\n    }\n    return result;\n}\n/*\nYou\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzm4smuyj.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzm4smuyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    string hex = \"0123456789ABCDEF\";\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(hex[num[i]] == '2' || hex[num[i]] == '3'\
    \ || hex[num[i]] == '5' || hex[num[i]] == '7' || hex[num[i]] == 'B' || hex[num[i]]\
    \ == 'D')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp24rpmi46.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428026]

    ??:? long tmp24rpmi46.hex_key(immutable(char)[]) [0x427a83]

    ??:? void tmp24rpmi46.__unittest_L40_C1() [0x427bf3]

    ??:? void tmp24rpmi46.__modtest() [0x427cf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aba2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab79]

    ??:? runModuleUnitTests [0x42bae5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    int[] primes = [2, 3, 5, 7, 11, 13];\n    int[] hex_digits = [0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    int[] hex_primes = [2,\
    \ 3, 5, 7, 11, 13];\n    int[] hex_non_primes = [0, 1, 4, 6, 8, 9, 10, 12, 14,\
    \ 15];\n    int[] hex_digits_in_num = [];\n    int[] hex_primes_in_num = [];\n\
    \    int[] hex_non_primes_in_num = [];\n    int[] hex_primes_in_num_count = [];\n\
    \    int[] hex_non_primes_in_num_count = [];\n    int[] hex_primes_in_num_count_sum\
    \ = [];\n    int[] hex_non_primes_in_num_count_sum = [];\n    int[] hex_primes_in_num_count_sum_sum\
    \ = [];\n    int[] hex_non_primes_in_num_count_sum_sum = [];\n    int[] hex_primes_in_num_count_sum_sum_sum\
    \ = [];\n    int[] hex_non_primes_in_num_count_sum_sum_sum = [];\n    int[] hex_primes_in_num_count_sum_sum_sum_sum\
    \ = [];\n    int[] hex_non_primes_in_num_count_sum_sum_sum_sum = [];\n    int[]\
    \ hex_primes_in_num_count_sum_sum_sum_sum_sum = [];\n    int[] hex_non_primes_in_num_count_sum_sum_sum_sum_sum\
    \ = [];\n    int[] hex_primes_in_num_count_sum_sum_sum_sum_sum_sum = [];\n   \
    \ int[] hex_non_primes_in_num_count_sum_sum_sum_sum_sum_sum = [];\n    int[] hex_primes_in_num_count_sum_sum_sum_sum_sum_sum_sum\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqo4bddx.d(51): Error: semicolon expected, not `unittest`

    /tmp/tmpiqo4bddx.d(51): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqo4bddx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(immutable char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if (i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\nYou have been tasked\
    \ to write a function that receives a string of \n    hexadecimal digits and returns\
    \ a string of binary digits.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, A, B, C, D, E, F.\n    Binary digits are 0, 1.\n    Note: you may assume\
    \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
    \ always uppercase.\n    Examples:\n    >>> hex_to_bin(\"AB\")\n    \"10101011\"\
    \n    >>> hex_to_bin(\"1077E\")\n    \"00010000011101111110\"\n    >>> hex_to_bin(\"\
    ABED1A33\")\n    \"1010101111011010001010001110011\"\n    >>> hex_to_bin(\"123456789ABCDEF0\"\
    )\n    \"0001001000110100010101100111100010011010101111001101111011110000\"\n\
    \    >>> hex_to_bin(\"2020\")\n    \"0010000000100000\"\n*/\nstring hex_to_bin(string\
    \ num) \n{\n    string result = \"\";\n    foreach(i; num)\n    {\n        switch(i)\n\
    \        {\n            case '0':\n                result ~= \"0000\";\n     \
    \           break;\n            case '1':\n                result ~= \"0001\"\
    ;\n                break;\n            case '2':\n                result ~= \"\
    0010\";\n                break;\n            case '3':\n                result\
    \ ~= \"0011\";\n                break;\n            case '4':\n              \
    \  result ~= \"0100\";\n                break;\n            case '5':\n      \
    \          result ~= \"0101\";\n                break;\n            case '6':\n\
    \                result ~= \"0110\";\n                break;\nunittest\n{\n  \
    \  alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_21bmn3l.d(86): Error: found `unittest` instead of statement

    /tmp/tmp_21bmn3l.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_21bmn3l.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_21bmn3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(primes.canFind(to!long(num[i], 16)))\n \
    \       {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb37ed59a.d(33): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb37ed59a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num) \n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') \n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(immutable c; num)\n    {\n        if\
    \ (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n   \
    \         result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    string hex = \"2357BDF\";\n    foreach(char c;\
    \ num)\n    {\n        if(hex.find(c) != -1)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjhyt__q.d(33): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjhyt__q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n/*\n    You have\
    \ been tasked to write a function that receives a string \n    and returns the\
    \ number of vowels in it.\n    Vowels are: a, e, i, o, u, y.\n    Note: you may\
    \ assume the input is always correct or empty string.\n    Examples:\n    >>>\
    \ vowels_count(\"abc\")\n    1L\n    >>> vowels_count(\"abcde\")\n    2L\n   \
    \ >>> vowels_count(\"abcdea\")\n    3L\n    >>> vowels_count(\"abcdeaA\")\n  \
    \  4L\n    >>> vowels_count(\"\")\n    0L\n*/\nlong vowels_count(string s)\n{\n\
    \    long count = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n    You have been\
    \ tasked to write a function that receives a string \n    and returns the number\
    \ of consonants in it.\n    Consonants are: b, c, d, f, g, h, j, k, l, m, n, p,\
    \ q, r, s, t, v, w, x, z.\n    Note: you may assume the input is always correct\
    \ or empty string.\n    Examples:\n    >>> consonants_count(\"abc\")\n    2L\n\
    \    >>> consonants_count(\"abcde\")\n    3L\n    >>> consonants_count(\"abcdea\"\
    )\n    4L\n    >>> consonants_count(\"abcdeaA\")\n    4L\n    >>> consonants_count(\"\
    \")\n    0L\n*/\nlong consonants_count(string s)\n{\n    long count = 0;\n   \
    \ fore\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpev2rs05a.d(89): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpev2rs05a.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev2rs05a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(hex; num)\n    {\n        if(hex == '2'\
    \ || hex == '3' || hex == '5' || hex == '7' || hex == 'B' || hex == 'D')\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        switch(c)\n\
    \        {\n            case '2':\n            case '3':\n            case '5':\n\
    \            case '7':\n            case 'B':\n            case 'D':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp608ivx3t.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp608ivx3t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; 0 .. num.length)\n    {\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ primes)\n    {\n        foreach(j; num)\n        {\n            if(i == j)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx8d74ozc.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428165]

    ??:? void tmpx8d74ozc.__unittest_L43_C1() [0x427df6]

    ??:? void tmpx8d74ozc.__modtest() [0x427ee4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430175]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430624]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430101]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]

    ??:? runModuleUnitTests [0x42bf25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        switch(c)\n  \
    \      {\n            case '2':\n            case '3':\n            case '5':\n\
    \            case '7':\n            case 'B':\n            case 'D':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4koxlsoz.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4koxlsoz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    int[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(primes.canFind(c\
    \ - '0'))\n                count++;\n        }\n        else if(c >= 'A' && c\
    \ <= 'F')\n        {\n            if(primes.canFind(c - 'A' + 10))\n         \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3to19pe.d(35): Error: no property `canFind` for type `int[]`

    /tmp/tmpx3to19pe.d(40): Error: no property `canFind` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3to19pe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(immutable char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(primes.canFind(c\
    \ - '0'))\n                count++;\n        }\n        else if(c >= 'A' && c\
    \ <= 'F')\n        {\n            if(primes.canFind(c - 'A' + 10))\n         \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xsnkard.d(35): Error: no property `canFind` for type `long[]`

    /tmp/tmp5xsnkard.d(40): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xsnkard.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable char c; num)\n    {\n      \
    \  if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(i; 0 .. num.length)\n    {\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D')\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable char c; num)\n    {\n      \
    \  if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        long n = c.to!long(16);\n\
    \        if(n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13)\n    \
    \        count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xf9ki9b.d(32): Error: no property `to` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xf9ki9b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(primes.canFind(num[i]))\n            result++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4qm41g48.d(33): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qm41g48.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char\
    \ c; num)\n    {\n        long n = c.to!long(16);\n        if(n in primes)\n \
    \           result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpso7a_9ph.d(33): Error: no property `to` for type `char`

    /tmp/tmpso7a_9ph.d(34): Error: incompatible types for `(n) in (primes)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpso7a_9ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ primes)\n    {\n        if(num.count(i.to!string(16).toUpper))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuevbth7k.d(33): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuevbth7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable char c; num)\n    {\n      \
    \  if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ primes)\n    {\n        if(num.canFind(i.to!string(16).toUpper))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedangxgx.d(33): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedangxgx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable char c; num)\n    {\n      \
    \  if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        switch(c)\n  \
    \      {\n            case '2':\n            case '3':\n            case '5':\n\
    \            case '7':\n            case 'B':\n            case 'D':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4koxlsoz.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4koxlsoz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ primes)\n    {\n        if(num.count(i.to!string(16).toUpper))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuevbth7k.d(33): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuevbth7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num) \n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') \n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long cnt = 0;\n    foreach(immutable c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   cnt++;\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(i; 0 .. num.length)\n    {\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D')\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if (c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\"\
    ) == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(immutable char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(immutable char c; num)\n    {\n      \
    \  if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n/*\nYou have been\
    \ tasked to write a function that receives a string and \n    returns a string\
    \ with the same characters but in reversed order.\n    Examples:\n    >>> reverse_string(\"\
    Hello, World!\")\n    \"!dlroW ,olleH\"\n    >>> reverse_string(\"\")\n    \"\"\
    \n    >>> reverse_string(\"a\")\n    \"a\"\n    >>> reverse_string(\"aa\")\n \
    \   \"aa\"\n    >>> reverse_string(\"ab\")\n    \"ba\"\n    >>> reverse_string(\"\
    abc\")\n    \"cba\"\n    >>> reverse_string(\"abcd\")\n    \"dcba\"\n    >>> reverse_string(\"\
    abcde\")\n    \"edcba\"\n    >>> reverse_string(\"abcdef\")\n    \"fedcba\"\n\
    \    >>> reverse_string(\"abcdefg\")\n    \"gfedcba\"\n    >>> reverse_string(\"\
    abcdefgh\")\n    \"hgfedcba\"\n    >>> reverse_string(\"abcdefghi\")\n    \"ihgfedcba\"\
    \n    >>> reverse_string(\"abcdefghij\")\n    \"jihgfedcba\"\n    >>> reverse_string(\"\
    abcdefghijk\")\n    \"kjihgfedcba\"\n    >>> reverse_string(\"abcdefghijkl\")\n\
    \    \"lkjihgfedcba\"\n    >>> reverse_string(\"abcdefghijklm\")\n    \"mlkjihgfedcba\"\
    \n    >>> reverse_string(\"abcdefghijklmn\")\n    \"nmlkjihgfedcba\"\n    >>>\
    \ reverse_string(\"abcdefghijklmno\")\n    \"onmlkjihgfedcba\"\n    >>> reverse_string(\"\
    abcdefghijklmnop\")\n    \"ponmlkjihgfedcba\"\n    >>> reverse_string(\"abcdefghijklmnopq\"\
    )\n    \"q\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv39mhp84.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv39mhp84.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n\
    \    2L\n    >>> hex_key(\"ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6L\n    >>> hex_key(\"2020\")\n    2L\n    \n*/\nlong hex_key(string num)\
    \ \n{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
