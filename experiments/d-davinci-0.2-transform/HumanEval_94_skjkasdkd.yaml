name: HumanEval_94_skjkasdkd
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of integers.\n\
  \    You need to find the largest prime value and return the sum of its digits.\n\
  \n    Examples:\n    >>> skjkasdkd([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L,\
  \ 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L])\n    10L\n    >>> skjkasdkd([1L,\
  \ 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L])\n   \
  \ 25L\n    >>> skjkasdkd([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L,\
  \ 2323L, 32L, 30L, 1L, 9L, 3L])\n    13L\n    >>> skjkasdkd([0L, 724L, 32L, 71L,\
  \ 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L])\n    11L\n    >>> skjkasdkd([0L,\
  \ 81L, 12L, 3L, 1L, 21L])\n    3L\n    >>> skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L])\n\
  \    7L\n    \n*/\nlong skjkasdkd(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L,\
  \ 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L,\
  \ 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L,\
  \ 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L,\
  \ 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) ==\
  \ 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L,\
  \ 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n\
  \    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L])\
  \ == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L,\
  \ 97L, 8192L]) == 10L);\n}\nvoid main(){}"
completions: ["{\n    long largestPrime = 0L;\n    foreach(long i; lst)\n    {\n \
    \       if(isPrime(i))\n        {\n            if(i > largestPrime)\n        \
    \    {\n                largestPrime = i;\n            }\n        }\n    }\n \
    \   long sum = 0L;\n    while(largestPrime > 0L)\n    {\n        sum += largestPrime\
    \ % 10L;\n        largestPrime /= 10L;\n    }\n    return sum;\n}", "{\n    long\
    \ largestPrime = 0L;\n    foreach(long i; lst)\n    {\n        if(isPrime(i))\n\
    \        {\n            if(i > largestPrime)\n            {\n                largestPrime\
    \ = i;\n            }\n        }\n    }\n    return sumDigits(largestPrime);\n\
    }", "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    long sum = 0L;\n    foreach(i;\
    \ max.to!string)\n    {\n        sum += i.to!long;\n    }\n    return sum;\n}",
  "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(i > max)\n      \
    \  {\n            max = i;\n        }\n    }\n    long sum = 0L;\n    foreach(i;\
    \ max.to!string)\n    {\n        sum += i.to!long;\n    }\n    return sum;\n}",
  "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i) && i >\
    \ max)\n        {\n            max = i;\n        }\n    }\n    return sumDigits(max);\n\
    }", "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i)\
    \ && i > max)\n        {\n            max = i;\n        }\n    }\n    long sum\
    \ = 0L;\n    while(max > 0L)\n    {\n        sum += max % 10L;\n        max /=\
    \ 10L;\n    }\n    return sum;\n}", "{\n    long max = 0L;\n    foreach(i; lst)\n\
    \    {\n        if(isPrime(i) && i > max)\n        {\n            max = i;\n \
    \       }\n    }\n    return max;\n}", "{\n    long max = 0L;\n    foreach(i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    long sum = 0L;\n    foreach(i; max.to!string)\n    {\n        sum\
    \ += i.to!long;\n    }\n    return sum;\n}", "{\n    long max = 0L;\n    foreach(elem;\
    \ lst)\n    {\n        if(isPrime(elem) && elem > max)\n        {\n          \
    \  max = elem;\n        }\n    }\n    long sum = 0L;\n    while(max > 0L)\n  \
    \  {\n        sum += max % 10L;\n        max /= 10L;\n    }\n    return sum;\n\
    }", "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i)\
    \ && i > max)\n        {\n            max = i;\n        }\n    }\n    long sum\
    \ = 0L;\n    while(max != 0L)\n    {\n        sum += max % 10L;\n        max /=\
    \ 10L;\n    }\n    return sum;\n}", "{\n    long max = 0L;\n    foreach(i; lst)\n\
    \    {\n        if(isPrime(i) && i > max)\n        {\n            max = i;\n \
    \       }\n    }\n    return sumDigits(max);\n}", "{\n    long max = 0L;\n   \
    \ foreach(elem; lst)\n    {\n        if(isPrime(elem) && elem > max)\n       \
    \ {\n            max = elem;\n        }\n    }\n    return sumDigits(max);\n}",
  "{\n    long largestPrime = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i))\n\
    \        {\n            if(i > largestPrime)\n            {\n                largestPrime\
    \ = i;\n            }\n        }\n    }\n    long sum = 0L;\n    while(largestPrime\
    \ > 0L)\n    {\n        sum += largestPrime % 10L;\n        largestPrime /= 10L;\n\
    \    }\n    return sum;\n}", "{\n    long max = 0L;\n    foreach(i; lst)\n   \
    \ {\n        if(isPrime(i) && i > max)\n        {\n            max = i;\n    \
    \    }\n    }\n    return sumDigits(max);\n}", "{\n    long max = 0L;\n    foreach(i;\
    \ lst)\n    {\n        if(isPrime(i) && i > max)\n        {\n            max =\
    \ i;\n        }\n    }\n    long sum = 0L;\n    while(max > 0L)\n    {\n     \
    \   sum += max % 10L;\n        max /= 10L;\n    }\n    return sum;\n}", "{\n \
    \   long max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i) && i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    long sum = 0L;\n    while(max\
    \ > 0L)\n    {\n        sum += max % 10L;\n        max /= 10L;\n    }\n    return\
    \ sum;\n}", "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i)\
    \ && i > max)\n        {\n            max = i;\n        }\n    }\n    long sum\
    \ = 0L;\n    while(max > 0L)\n    {\n        sum += max % 10L;\n        max /=\
    \ 10L;\n    }\n    return sum;\n}", "{\n    long max = 0L;\n    foreach(i; lst)\n\
    \    {\n        if(isPrime(i) && i > max)\n        {\n            max = i;\n \
    \       }\n    }\n    long sum = 0L;\n    while(max > 0L)\n    {\n        sum\
    \ += max % 10L;\n        max /= 10L;\n    }\n    return sum;\n}", "{\n    long\
    \ max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i) && i > max)\n \
    \       {\n            max = i;\n        }\n    }\n    long sum = 0L;\n    foreach(i;\
    \ max.to!string)\n    {\n        sum += i.to!long - '0'.to!long;\n    }\n    return\
    \ sum;\n}", "{\n    long max = 0L;\n    foreach(i; lst)\n    {\n        if(isPrime(i)\
    \ && i > max)\n        {\n            max = i;\n        }\n    }\n    return sumDigits(max);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
