name: HumanEval_14_all_prefixes
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
  \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
  \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n"
tests: "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
  \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
  , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
  WWW\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n  \
    \  foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n\
    \    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length)\
    \ \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n            result ~= string[i .. j];\n   \
    \     }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i ..\
    \ string.length) \n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    auto result = new string[];\n    foreach\
    \ (i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n\
    }", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n   \
    \     result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(immutable\
    \ i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n  \
    \  return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] ret;\n \
    \   foreach(i; 0 .. string.length)\n        ret ~= string[0 .. i];\n    return\
    \ ret;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n  \
    \  {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n \
    \   return iota(string.length).map!(i => string[0..i]);\n}\n/*\n Return list of\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    return iota(string.length).map!(i => string[i..$]);\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    return iota(string.length).map!(i\
    \ => all_suffixes(string[i..$])).join;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    return iota(string.length).map!(i => all_prefixes(string[0..i])).join;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings3(string string) \n{\n    return iota(string.length).map!(i\
    \ => all_prefixes(string[0..i])).join;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings4(string\
    \ string) \n{\n    return iota(string.length).map!(i => all_prefixes(string[0..i])).join;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n",
  "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[i .. $];\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        foreach(j; i .. string.length)\n            result ~=\
    \ string[i .. j];\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    \
    \    foreach(j; i .. string.length)\n            result ~= string[i .. j];\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        foreach(j;\
    \ i .. string.length)\n            result ~= string[i .. j];\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all prefixes from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all prefixes from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i ..", "{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] ret;\n    foreach(i; 0 .. string.length)\n    {\n        ret ~=\
    \ string[0 .. i];\n    }\n    return ret;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] ret;\n    foreach(i; 0 .. string.length)\n   \
    \ {\n        ret ~= string[0 .. i];\n    }\n    return ret;\n}", "{\n    string[]\
    \ result;\n    foreach(immutable i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    for (size_t i = 0; i < string.length;\
    \ i++)\n    {\n        result ~= string[0..i];\n    }\n    return result;\n}",
  "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.string;\n    import", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i ..\
    \ string.length) \n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length)\
    \ \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n\
    {\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[",
  "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n     \
    \   {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length)\
    \ \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i ..\
    \ string.length) \n        {\n            result ~= string[i ..", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n\
    \    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \    Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n   \
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length)\
    \ \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n    Return list of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings2(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n            result ~= string[i .. j];\n   \
    \     }\n    }\n    return result;\n}\n/*\n    Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result",
  "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(int i; 0..string.length)\n\
    \    {\n        result ~= string[0..i];\n    }\n    return result;\n}", "{\n \
    \   string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}", "{\n\
    \    import std.algorithm.iteration : map;\n    import std.range : iota;\n   \
    \ import std.array : array;\n    import std.conv : to;\n    import std.string\
    \ : take;\n    import std.math : min;\n    return iota(min(string.length, 1),\
    \ string.length + 1)\n        .map!(i => string.take(i).to!string)\n        .array;\n\
    }", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n\
    \    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n\
    \    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return the longest common prefix\
    \ of two strings\n    >>> longest_common_prefix(\"abc\", \"abd\")\n    \"ab\"\n\
    \    \n*/\nstring longest_common_prefix(string a, string b) \n{\n    string result;\n\
    \    foreach(i; 0 .. min(a.length, b.length)) \n    {\n        if(a[i] == b[i])\
    \ \n        {\n            result ~= a[i];\n        }\n        else \n       \
    \ {\n            break;\n        }\n    }\n    return result;\n}\n/*\n Return\
    \ the longest common suffix of two strings\n    >>> longest_common_suffix(\"abc\"\
    , \"abd\")\n    \"b\"\n    \n*/\nstring longest_common_suffix(string a, string\
    \ b) \n{\n    string result;\n    foreach(i; 0 .. min(a.length, b.length)) \n\
    \    {\n        if(a[$ - i] == b[$ - i]) \n        {\n            result = a[$\
    \ - i] ~ result;\n        }\n        else \n        {\n            break;\n  \
    \      }\n    }\n    return result;\n}\n/*\n Return the longest common substring\
    \ of two strings\n    >>> longest_common_substring(\"abc\", \"abd\")\n    \"ab\"\
    \n    \n*/\nstring longest_common_substring(string a, string b) \n{\n    string\
    \ result;\n    foreach(prefix; all_prefixes(a)) \n    {\n        foreach(suffix;\
    \ all_", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(immutable i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
