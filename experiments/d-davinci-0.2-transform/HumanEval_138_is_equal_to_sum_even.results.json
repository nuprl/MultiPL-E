{
  "language": "d",
  "name": "HumanEval_138_is_equal_to_sum_even",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dp24ec3.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dp24ec3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkl46a40y.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpkl46a40y.__unittest_L26_C1() [0x427a7a]\n??:? void tmpkl46a40y.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx653m1mx.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx653m1mx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl3q4xr3d.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpl3q4xr3d.__unittest_L22_C1() [0x427a7a]\n??:? void tmpl3q4xr3d.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkl46a40y.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpkl46a40y.__unittest_L26_C1() [0x427a7a]\n??:? void tmpkl46a40y.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n - 8);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qv0b9os.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp8qv0b9os.__unittest_L34_C1() [0x427ac1]\n??:? void tmp8qv0b9os.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n <= 0)\n        return false;\n    if(n % 2 != 0)\n        return false;\n    long n_sqrt = cast(long) sqrt(n);\n    if(n_sqrt % 2 != 0)\n        n_sqrt--;\n    for(long i = n_sqrt; i >= 2; i -= 2)\n    {\n        long j = n - i;\n        if(j % 2 != 0)\n            continue;\n        if(j <= 0)\n            continue;\n        long j_sqrt = cast(long) sqrt(j);\n        if(j_sqrt % 2 != 0)\n            j_sqrt--;\n        for(long k = j_sqrt; k >= 2; k -= 2)\n        {\n            long l = j - k;\n            if(l % 2 != 0)\n                continue;\n            if(l <= 0)\n                continue;\n            long l_sqrt = cast(long) sqrt(l);\n            if(l_sqrt % 2 != 0)\n                l_sqrt--;\n            for(long m = l_sqrt; m >= 2; m -= 2)\n            {\n                long o = l - m;\n                if(o % 2 != 0)\n                    continue;\n                if(o <= 0)\n                    continue;\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp53r03bs6.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp53r03bs6.d(30): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp53r03bs6.d(40): Error: `std.math.sqrt` called with argument ty",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        for (long i = 0; i <= n / 2; i += 2)\n        {\n            a = i;\n            for (long j = 0; j <= n / 2; j += 2)\n            {\n                b = j;\n                for (long k = 0; k <= n / 2; k += 2)\n                {\n                    c = k;\n                    for (long l = 0; l <= n / 2; l += 2)\n                    {\n                        d = l;\n                        if (a + b + c + d == n)\n                        {\n                            result = true;\n                            break;\n                        }\n                    }\n                    if (result)\n                    {\n                        break;\n                    }\n                }\n                if (result)\n                {\n                    break;\n                }\n            }\n            if (result)\n            {\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp667yofse.d(63): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmp667yofse.__unittest_L59_C1() [0x427b4e]\n??:? void tmp667yofse.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42830c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7uvmtnib.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp7uvmtnib.__unittest_L36_C1() [0x427a6e]\n??:? void tmp7uvmtnib.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    long a = n / 2;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    for (long i = 0; i <= a; i++)\n    {\n        for (long j = 0; j <= a; j++)\n        {\n            for (long k = 0; k <= a; k++)\n            {\n                for (long l = 0; l <= a; l++)\n                {\n                    if (i + j + k + l == a)\n                    {\n                        if (i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0)\n                        {\n                            a = i;\n                            b = j;\n                            c = k;\n                            d = l;\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoozwp6yo.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpoozwp6yo.__unittest_L47_C1() [0x427b72]\n??:? void tmpoozwp6yo.__modtest() [0x427c60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        // n is even\n        long n_half = n / 2;\n        if (n_half % 2 == 0)\n        {\n            // n_half is even\n            long n_half_half = n_half / 2;\n            if (n_half_half % 2 == 0)\n            {\n                // n_half_half is even\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8h6fts4u.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp8h6fts4u.__unittest_L45_C1() [0x427af9]\n??:? void tmp8h6fts4u.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dp24ec3.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dp24ec3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long sum = 0;\n        long i = 0;\n        while (sum < n)\n        {\n            sum += 2 * i;\n            i++;\n        }\n        if (sum == n)\n        {\n            result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgy1q593g.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpgy1q593g.__unittest_L33_C1() [0x427aa9]\n??:? void tmpgy1q593g.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long sum = 0;\n    for (a = 2; a <= n; a += 2)\n    {\n        for (b = 2; b <= n; b += 2)\n        {\n            for (c = 2; c <= n; c += 2)\n            {\n                for (d = 2; d <= n; d += 2)\n                {\n                    sum = a + b + c + d;\n                    if (sum == n)\n                        return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dp24ec3.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dp24ec3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    while (a > 0)\n    {\n        while (b > 0)\n        {\n            while (c > 0)\n            {\n                while (d > 0)\n                {\n                    if (a + b + c + d == n)\n                        return true;\n                    d--;\n                }\n                c--;\n                d = n / 2;\n            }\n            b--;\n            c = n / 2;\n        }\n        a--;\n        b = n / 2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzawox_cd.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmpzawox_cd.__unittest_L49_C1() [0x427b2e]\n??:? void tmpzawox_cd.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        for (long i = 0; i <= n / 2; i++)\n        {\n            for (long j = 0; j <= n / 2; j++)\n            {\n                for (long k = 0; k <= n / 2; k++)\n                {\n                    for (long l = 0; l <= n / 2; l++)\n                    {\n                        if (i + j + k + l == n)\n                        {\n                            a = i;\n                            b = j;\n                            c = k;\n                            d = l;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (a == 0 && b == 0 && c == 0 && d == 0)\n            return false;\n        else\n            return true;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjd1lspav.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpjd1lspav.__unittest_L50_C1() [0x427b5e]\n??:? void tmpjd1lspav.__modtest() [0x427c4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long sum = 0;\n    long count = 0;\n    for (long i = 2; i <= n; i += 2)\n    {\n        sum += i;\n        count++;\n        if (sum == n)\n            return true;\n        if (sum > n)\n            return false;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgzuyabn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpdgzuyabn.__unittest_L35_C1() [0x427ae9]\n??:? void tmpdgzuyabn.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    long sum = a + b + c + d;\n    while (sum != n)\n    {\n        if (sum > n)\n        {\n            if (a > 0)\n                a--;\n            else if (b > 0)\n                b--;\n            else if (c > 0)\n                c--;\n            else if (d > 0)\n                d--;\n            else\n                return false;\n        }\n        else\n        {\n            if (d < n)\n                d++;\n            else if (c < n)\n                c++;\n            else if (b < n)\n                b++;\n            else if (a < n)\n                a++;\n            else\n                return false;\n        }\n        sum = a + b + c + d;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp28de5k_b.d(61): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmp28de5k_b.__unittest_L57_C1() [0x427b62]\n??:? void tmp28de5k_b.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n % 2 != 0) return false;\n    if(n == 0) return true;\n    if(n == 2) return false;\n    if(n == 4) return true;\n    if(n == 6) return false;\n    if(n == 8) return true;\n    if(n == 10) return false;\n    if(n == 12) return true;\n    if(n == 14) return false;\n    if(n == 16) return true;\n    if(n == 18) return false;\n    if(n == 20) return true;\n    if(n == 22) return false;\n    if(n == 24) return true;\n    if(n == 26) return false;\n    if(n == 28) return true;\n    if(n == 30) return false;\n    if(n == 32) return true;\n    if(n == 34) return false;\n    if(n == 36) return true;\n    if(n == 38) return false;\n    if(n == 40) return true;\n    if(n == 42) return false;\n    if(n == 44) return true;\n    if(n == 46) return false;\n    if(n == 48) return true;\n    if(n == 50) return false;\n    if(n == 52) return true;\n    if(n == 54) return false;\n    if(n == 56) return true;\n    if(n == 58) return false;\n    if(n == 60) return true;\n    if(n == 62) return false;\n    if(n == 64) return true;\n    if(n == 66) return false;\n    if(n == 68) return true;\n    if(n == 70) return false;\n    if(n == 72) return true;\n    if(n == 74) return false;\n    if(n == 76) return true;\n    if(n == 78) return false;\n    if(n == 80) return true;\n    if(n == 82) return false;\n    if(n == 84) return true;\n    if(n == 86) return false;\n    if(n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnnsu1nas.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnnsu1nas.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt5szxn9p.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpt5szxn9p.__unittest_L21_C1() [0x427a6e]\n??:? void tmpt5szxn9p.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long i = 2;\n    long j = n - i;\n    while (i <= j)\n    {\n        if (i % 2 == 0 && j % 2 == 0)\n            return true;\n        i += 2;\n        j -= 2;\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph1ait2er.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmph1ait2er.__unittest_L45_C1() [0x427ada]\n??:? void tmph1ait2er.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy9fp2i3n.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpy9fp2i3n.__unittest_L34_C1() [0x427a62]\n??:? void tmpy9fp2i3n.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    if (n == 4) \n    {\n        return false;\n    }\n    if (n == 6) \n    {\n        return false;\n    }\n    if (n == 8) \n    {\n        return true;\n    }\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        i++;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnkdoqj2.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpsnkdoqj2.__unittest_L27_C1() [0x427aa5]\n??:? void tmpsnkdoqj2.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        if (sum == n)\n            return true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn5c0opgv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpn5c0opgv.__unittest_L31_C1() [0x427abd]\n??:? void tmpn5c0opgv.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    while (a > 0)\n    {\n        while (b > 0)\n        {\n            while (c > 0)\n            {\n                while (d > 0)\n                {\n                    if (a + b + c + d == n)\n                        return true;\n                    d--;\n                }\n                c--;\n                d = n / 2;\n            }\n            b--;\n            c = n / 2;\n            d = n / 2;\n        }\n        a--;\n        b = n / 2;\n        c = n / 2;\n        d = n / 2;\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmper6s6ijq.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmper6s6ijq.__unittest_L62_C1() [0x427b2a]\n??:? void tmper6s6ijq.__modtest() [0x427c18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplvzwzqh0.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmplvzwzqh0.__unittest_L26_C1() [0x427ad9]\n??:? void tmplvzwzqh0.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n < 8) return false;\n    if (n == 8) return true;\n    long m = n / 2;\n    long a = m / 2;\n    long b = m - a;\n    if (a % 2 != 0) return false;\n    if (b % 2 != 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp93qsneof.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp93qsneof.__unittest_L26_C1() [0x427b15]\n??:? void tmp93qsneof.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpze26k8hj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpze26k8hj.__unittest_L34_C1() [0x427aae]\n??:? void tmpze26k8hj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    auto evens = iota(2L, n / 2 + 1, 2L);\n    return evens.combinations(4).any!(a => a.sum == n);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpasbemdik.d(18): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasbemdik.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n % 2 != 0)\n        return false;\n    if(n == 0)\n        return true;\n    if(n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd4kj_4mz.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpd4kj_4mz.__unittest_L36_C1() [0x427aae]\n??:? void tmpd4kj_4mz.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1)\n        return false;\n    if (n == 0)\n        return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    long sum = a + b + c + d;\n    if (sum == n)\n        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp98x8zqeb.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp98x8zqeb.__unittest_L30_C1() [0x427ae2]\n??:? void tmp98x8zqeb.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7uvmtnib.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp7uvmtnib.__unittest_L36_C1() [0x427a6e]\n??:? void tmp7uvmtnib.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyonf0dac.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpyonf0dac.__unittest_L24_C1() [0x427aae]\n??:? void tmpyonf0dac.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    else \n    {\n        long sum = 0;\n        for (long i = 2; i <= n; i += 2) \n        {\n            sum += i;\n            if (sum == n) \n            {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm_fa4kin.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpm_fa4kin.__unittest_L34_C1() [0x427ab5]\n??:? void tmpm_fa4kin.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n < 8) return false;\n    if (n % 2 != 0) return false;\n    if (n % 4 == 0) return true;\n    return is_equal_to_sum_even(n - 4);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt3ixlt8g.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpt3ixlt8g.__unittest_L21_C1() [0x427ad5]\n??:? void tmpt3ixlt8g.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    long sum = a + b + c + d;\n    while (sum != n)\n    {\n        if (sum > n)\n        {\n            if (a > 2)\n                a -= 2;\n            else if (b > 2)\n                b -= 2;\n            else if (c > 2)\n                c -= 2;\n            else if (d > 2)\n                d -= 2;\n            else\n                return false;\n        }\n        else\n        {\n            if (a < n / 2)\n                a += 2;\n            else if (b < n / 2)\n                b += 2;\n            else if (c < n / 2)\n                c += 2;\n            else if (d < n / 2)\n                d += 2;\n            else\n                return false;\n        }\n        sum = a + b + c + d;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp71g7g050.d(65): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmp71g7g050.__unittest_L61_C1() [0x427bba]\n??:? void tmp71g7g050.__modtest() [0x427ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]\n??:? runModuleUnitTests [0x42ba21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428374]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0udlh1od.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp0udlh1od.__unittest_L32_C1() [0x427a6a]\n??:? void tmp0udlh1od.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 4)\n        return false;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n - 4);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ok8rtye.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp5ok8rtye.__unittest_L26_C1() [0x427ac9]\n??:? void tmp5ok8rtye.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    true\n    >>> is_equal_to_sum_odd(8L)\n    false\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8zj6w0no.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp8zj6w0no.__unittest_L36_C1() [0x427a7a]\n??:? void tmp8zj6w0no.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm25syqf6.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpm25syqf6.__unittest_L22_C1() [0x427a7a]\n??:? void tmpm25syqf6.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    long a = 2;\n    long b = n - a;\n    while (a <= b)\n    {\n        if (a % 2 == 0 && b % 2 == 0)\n            return true;\n        a += 2;\n        b -= 2;\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpygk6q_wi.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpygk6q_wi.__unittest_L45_C1() [0x427ada]\n??:? void tmpygk6q_wi.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n % 2 != 0)\n        return false;\n    else\n    {\n        long sum = 0;\n        long i = 0;\n        while(sum < n)\n        {\n            sum += 2*i;\n            i++;\n        }\n        if(sum == n)\n            return true;\n        else\n            return false;\n    }\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7wm1awbq.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmp7wm1awbq.__unittest_L45_C1() [0x427ab1]\n??:? void tmp7wm1awbq.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    for (i = 2; i <= n; i += 2)\n    {\n        for (j = 2; j <= n; j += 2)\n        {\n            for (k = 2; k <= n; k += 2)\n            {\n                for (l = 2; l <= n; l += 2)\n                {\n                    if (i + j + k + l == n)\n                        return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n        return false;\n    if (n == 0) \n        return true;\n    if (n < 0) \n        return false;\n    for (long i = 2; i <= n / 2; i += 2) \n    {\n        if (is_equal_to_sum_even(n - i)) \n            return true;\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjzgi_00l.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpjzgi_00l.__unittest_L41_C1() [0x427ade]\n??:? void tmpjzgi_00l.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n        return false;\n    if (n == 0) \n        return true;\n    if (n < 0) \n        return false;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    for (i = 2; i <= n; i += 2) \n    {\n        for (j = 2; j <= n; j += 2) \n        {\n            for (k = 2; k <= n; k += 2) \n            {\n                for (l = 2; l <= n; l += 2) \n                {\n                    if (i + j + k + l == n) \n                        return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 4)\n        return false;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplvzwzqh0.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmplvzwzqh0.__unittest_L26_C1() [0x427ad9]\n??:? void tmplvzwzqh0.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n < 8) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n    if (n == 90) return false;\n    if (n == 92) return true;\n    if (n == 94) return false;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmr72enq5.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmr72enq5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    long sum = a + b + c + d;\n    if (sum == n)\n        return true;\n    while (a > 0)\n    {\n        if (sum == n)\n            return true;\n        a--;\n        b++;\n        sum = a + b + c + d;\n    }\n    while (b > 0)\n    {\n        if (sum == n)\n            return true;\n        b--;\n        c++;\n        sum = a + b + c + d;\n    }\n    while (c > 0)\n    {\n        if (sum == n)\n            return true;\n        c--;\n        d++;\n        sum = a + b + c + d;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpakivvoim.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpakivvoim.__unittest_L55_C1() [0x427bc5]\n??:? void tmpakivvoim.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        i++;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yuo3t7c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp6yuo3t7c.__unittest_L31_C1() [0x427ac5]\n??:? void tmp6yuo3t7c.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    return n % 2 == 0 && n > 3;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9uo7qcg9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp9uo7qcg9.__unittest_L28_C1() [0x427a4e]\n??:? void tmp9uo7qcg9.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long a = 2;\n    long b = n - a;\n    while (a <= b)\n    {\n        if (a % 2 == 0 && b % 2 == 0)\n            return true;\n        a += 2;\n        b -= 2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbxaux6ge.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpbxaux6ge.__unittest_L31_C1() [0x427aca]\n??:? void tmpbxaux6ge.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    if(n % 2 != 0)\n        return false;\n    if(n == 0)\n        return true;\n    if(n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa01nt6g9.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpa01nt6g9.__unittest_L25_C1() [0x427a6e]\n??:? void tmpa01nt6g9.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long sum = 0;\n        for (long i = 2; i <= n; i += 2)\n        {\n            sum += i;\n            if (sum == n)\n            {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp87vn_8ne.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmp87vn_8ne.__unittest_L32_C1() [0x427aad]\n??:? void tmp87vn_8ne.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n < 8) return false;\n    if (n % 2 != 0) return false;\n    long a = 2;\n    long b = 2;\n    long c = 2;\n    long d = n - (a + b + c);\n    while (d <= c) {\n        if (d % 2 == 0) return true;\n        d -= 2;\n        c += 2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0y1ruflq.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp0y1ruflq.__unittest_L29_C1() [0x427b21]\n??:? void tmp0y1ruflq.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsa9mljln.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpsa9mljln.__unittest_L21_C1() [0x427a6e]\n??:? void tmpsa9mljln.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long sum = 0;\n    for (i = 2; i < n; i += 2)\n    {\n        for (j = 2; j < n; j += 2)\n        {\n            for (k = 2; k < n; k += 2)\n            {\n                for (l = 2; l < n; l += 2)\n                {\n                    sum = i + j + k + l;\n                    if (sum == n)\n                    {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 4) return false;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    return is_equal_to_sum_even(n - 4);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl_7e0x64.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpl_7e0x64.__unittest_L22_C1() [0x427ac9]\n??:? void tmpl_7e0x64.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy9fp2i3n.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpy9fp2i3n.__unittest_L34_C1() [0x427a62]\n??:? void tmpy9fp2i3n.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        return a + b + c + d == n;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpne0fdrsm.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpne0fdrsm.__unittest_L27_C1() [0x427ac2]\n??:? void tmpne0fdrsm.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    for (long i = 1; i <= n / 2; i++)\n    {\n        for (long j = 1; j <= n / 2; j++)\n        {\n            for (long k = 1; k <= n / 2; k++)\n            {\n                for (long l = 1; l <= n / 2; l++)\n                {\n                    if (2 * i + 2 * j + 2 * k + 2 * l == n)\n                    {\n                        result = true;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a = n / 2;\n        long b = a - 2;\n        long c = b - 2;\n        long d = c - 2;\n        if (a + b + c + d == n)\n        {\n            result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsoai827m.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpsoai827m.__unittest_L30_C1() [0x427aca]\n??:? void tmpsoai827m.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    int sum = 0;\n    for (int i = 0; i < n; i += 2)\n    {\n        sum += i;\n        if (sum == n)\n            return true;\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpufikcjjc.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpufikcjjc.__unittest_L37_C1() [0x427aa9]\n??:? void tmpufikcjjc.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxidsj210.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxidsj210.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else if (n == 0)\n        return true;\n    else\n        return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw9nfw8op.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpw9nfw8op.__unittest_L23_C1() [0x427a62]\n??:? void tmpw9nfw8op.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1kdcuzcb.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp1kdcuzcb.__unittest_L33_C1() [0x427a62]\n??:? void tmp1kdcuzcb.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long a = n / 2;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        for (int i = 0; i < n / 2; i++)\n        {\n            if (a + b + c + d == n)\n                return true;\n            else\n            {\n                if (a > 0)\n                    a--;\n                else if (b > 0)\n                    b--;\n                else if (c > 0)\n                    c--;\n                else if (d > 0)\n                    d--;\n                else\n                    d++;\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt9k9ed4v.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpt9k9ed4v.__unittest_L45_C1() [0x427b32]\n??:? void tmpt9k9ed4v.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa5umi50k.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpa5umi50k.__unittest_L36_C1() [0x427a6e]\n??:? void tmpa5umi50k.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        if (a + b + c + d == n)\n        {\n            result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5jf_ck5o.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp5jf_ck5o.__unittest_L30_C1() [0x427ac6]\n??:? void tmp5jf_ck5o.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    long max_even = n / 2;\n    long min_even = 4;\n    long max_even_sqrt = (long)sqrt(max_even);\n    long min_even_sqrt = (long)sqrt(min_even);\n    long max_even_sqrt_sqr = max_even_sqrt * max_even_sqrt;\n    long min_even_sqrt_sqr = min_even_sqrt * min_even_sqrt;\n    long max_even_sqrt_sqr_sqrt = (long)sqrt(max_even_sqrt_sqr);\n    long min_even_sqrt_sqr_sqrt = (long)sqrt(min_even_sqrt_sqr);\n    long max_even_sqrt_sqr_sqrt_sqr = max_even_sqrt_sqr_sqrt * max_even_sqrt_sqr_sqrt;\n    long min_even_sqrt_sqr_sqrt_sqr = min_even_sqrt_sqr_sqrt * min_even_sqrt_sqr_sqrt;\n    if (n == max_even_sqrt_sqr_sqrt_sqr)\n        return true;\n    if (n == min_even_sqrt_sqr_sqrt_sqr)\n        return true;\n    long max_even_sqrt_sqr_sqrt_sqr_sqrt = (long)sqrt(max_even_sqrt_sqr_sqrt_sqr);\n    long min_even_sqrt_sqr_sqrt_sqr_sqrt = (long)sqrt(min_even_sqrt_sqr_sqrt_sqr);\n    long max_even_sqrt_sqr_sqrt_sqr_sqrt_sqr = max_even_sqrt_sqr_sqrt_sqr_sqrt * max_even_sqrt_sqr_sqrt_sqr\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7nsfpa6w.d(24): Error: C style cast illegal, use `cast(long)sqrt(max_even)`\n/tmp/tmp7nsfpa6w.d(25): Error: C style cast illegal, use `cast(long)sqrt(min_even)`\n/tmp/tmp7nsfpa6w.d(28): Error: C style cast illegal, use `cast(long)sqrt(max_even_sqrt_sqr)`\n/tmp/tmp7nsfpa6w.d(29): Error: C style cast illegal, use `cast(long)sqrt(min_even_sqrt_sqr)`\n/tmp/tmp7nsfpa6w.d(36): Error: C style cast illegal, use `cast(long)sqrt(max_even_sqrt_sqr_sqrt_sqr)`\n/tmp/tmp7nsfpa6w.d(37): Error: C style cast illegal, use `cast(long)sqrt(min_even_sqrt_sqr_sqrt_sqr)`\n/tmp/tmp7nsfpa6w.d(39): Error: semicolon expected, not `unittest`\n/tmp/tmp7nsfpa6w.d(39): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nsfpa6w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    return n % 2 == 0 && n > 3;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    true\n    >>> is_equal_to_sum_odd(8L)\n    false\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqdrmj7ei.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpqdrmj7ei.__unittest_L28_C1() [0x427a4e]\n??:? void tmpqdrmj7ei.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0) \n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        long sum = a + b + c + d;\n        if (sum == n) \n        {\n            result = true;\n        }\n    }\n    return result;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdhmjn92g.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpdhmjn92g.__unittest_L43_C1() [0x427ac6]\n??:? void tmpdhmjn92g.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsa9mljln.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpsa9mljln.__unittest_L21_C1() [0x427a6e]\n??:? void tmpsa9mljln.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a = n / 2;\n        if (a % 2 == 0)\n        {\n            long b = a / 2;\n            if (b % 2 == 0)\n            {\n                long c = b / 2;\n                if (c % 2 == 0)\n                {\n                    long d = c / 2;\n                    if (d % 2 == 0)\n                    {\n                        result = true;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfdwh_ziy.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpfdwh_ziy.__unittest_L39_C1() [0x427b3a]\n??:? void tmpfdwh_ziy.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 4);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzxfpc4yj.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpzxfpc4yj.__unittest_L38_C1() [0x427a86]\n??:? void tmpzxfpc4yj.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    return n % 2 == 0 && n > 3;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfescqqtg.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpfescqqtg.__unittest_L18_C1() [0x427a4e]\n??:? void tmpfescqqtg.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnhibml0k.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhibml0k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp80mke8hr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp80mke8hr.__unittest_L24_C1() [0x427a7a]\n??:? void tmp80mke8hr.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    return n % 2 == 0 && n % 4 != 0;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpflk4qo2k.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpflk4qo2k.__unittest_L18_C1() [0x427a85]\n??:? void tmpflk4qo2k.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        i++;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpznmsigwd.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpznmsigwd.__unittest_L28_C1() [0x427ac5]\n??:? void tmpznmsigwd.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 4)\n        return false;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n - 4);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ok8rtye.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp5ok8rtye.__unittest_L26_C1() [0x427ac9]\n??:? void tmp5ok8rtye.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyonf0dac.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpyonf0dac.__unittest_L24_C1() [0x427aae]\n??:? void tmpyonf0dac.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n % 2 != 0) return false;\n    if(n == 0) return true;\n    if(n == 2) return false;\n    if(n == 4) return true;\n    if(n == 6) return false;\n    if(n == 8) return true;\n    if(n == 10) return false;\n    if(n == 12) return true;\n    if(n == 14) return false;\n    if(n == 16) return true;\n    if(n == 18) return false;\n    if(n == 20) return true;\n    if(n == 22) return false;\n    if(n == 24) return true;\n    if(n == 26) return false;\n    if(n == 28) return true;\n    if(n == 30) return false;\n    if(n == 32) return true;\n    if(n == 34) return false;\n    if(n == 36) return true;\n    if(n == 38) return false;\n    if(n == 40) return true;\n    if(n == 42) return false;\n    if(n == 44) return true;\n    if(n == 46) return false;\n    if(n == 48) return true;\n    if(n == 50) return false;\n    if(n == 52) return true;\n    if(n == 54) return false;\n    if(n == 56) return true;\n    if(n == 58) return false;\n    if(n == 60) return true;\n    if(n == 62) return false;\n    if(n == 64) return true;\n    if(n == 66) return false;\n    if(n == 68) return true;\n    if(n == 70) return false;\n    if(n == 72) return true;\n    if(n == 74) return false;\n    if(n == 76) return true;\n    if(n == 78) return false;\n    if(n == 80) return true;\n    if(n == 82) return false;\n    if(n == 84) return true;\n    if(n == 86) return false;\n    if(n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnnsu1nas.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnnsu1nas.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    return n % 2 == 0 && n >= 8 && n % 4 == 0;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    >>> is_equal_to_sum_odd(15L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8hgr6ro.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp_8hgr6ro.__unittest_L32_C1() [0x427ac9]\n??:? void tmp_8hgr6ro.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcq8f9pmg.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpcq8f9pmg.__unittest_L28_C1() [0x427a86]\n??:? void tmpcq8f9pmg.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long k = n / 2;\n    long m = (long)sqrt(k);\n    for (long i = 2; i <= m; i++)\n    {\n        if (k % i == 0)\n        {\n            long j = k / i;\n            if (i % 2 == 0 && j % 2 == 0)\n                return true;\n        }\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphn9k8k8i.d(21): Error: C style cast illegal, use `cast(long)sqrt(k)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphn9k8k8i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        i++;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpku_78vd4.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpku_78vd4.__unittest_L29_C1() [0x427ab5]\n??:? void tmpku_78vd4.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long sum = 0;\n        long i = 0;\n        while (sum < n)\n        {\n            sum += 2 * i;\n            i++;\n        }\n        return sum == n;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsjv_y56a.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpsjv_y56a.__unittest_L30_C1() [0x427aa5]\n??:? void tmpsjv_y56a.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // Your code here\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn3f9ivu4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpn3f9ivu4.__unittest_L25_C1() [0x427aae]\n??:? void tmpn3f9ivu4.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long n_half = n / 2;\n        long n_half_sqrt = sqrt(n_half);\n        for (long i = 2; i <= n_half_sqrt; i += 2)\n        {\n            if (n_half % i == 0)\n            {\n                long a = i;\n                long b = n_half / i;\n                if (a % 2 == 0 && b % 2 == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp12f30a2o.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp12f30a2o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        if (a + b + c + d == n)\n        {\n            result = true;\n        }\n    }\n    return result;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkw_8ocxq.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpkw_8ocxq.__unittest_L42_C1() [0x427ac6]\n??:? void tmpkw_8ocxq.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long a = 0;\n    long b = n;\n    while (a <= b)\n    {\n        long c = (a + b) / 2;\n        long d = n - c;\n        if (c + d == n && c % 2 == 0 && d % 2 == 0)\n            return true;\n        if (c + d > n)\n            b = c - 2;\n        else\n            a = c + 2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0usfatxr.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp0usfatxr.__unittest_L37_C1() [0x427b26]\n??:? void tmp0usfatxr.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    long sum = 0;\n    long count = 0;\n    for (long i = 2; i <= n; i += 2) \n    {\n        sum += i;\n        count++;\n        if (sum == n) \n        {\n            return count == 4;\n        }\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppdp1xewk.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmppdp1xewk.__unittest_L43_C1() [0x427ae2]\n??:? void tmppdp1xewk.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    long sum = 0;\n    long count = 0;\n    for (long i = 2; i <= n; i += 2) \n    {\n        sum += i;\n        count++;\n        if (sum == n) \n        {\n            return count == 4;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpldsd6uxu.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpldsd6uxu.__unittest_L33_C1() [0x427ae2]\n??:? void tmpldsd6uxu.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    if(n % 2 != 0)\n        return false;\n    if(n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0ofikk0t.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp0ofikk0t.__unittest_L23_C1() [0x427a62]\n??:? void tmp0ofikk0t.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    else \n    {\n        long sum = 0;\n        long i = 2;\n        while (sum < n) \n        {\n            sum += i;\n            i += 2;\n        }\n        return sum == n;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9y80q89c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp9y80q89c.__unittest_L32_C1() [0x427aa9]\n??:? void tmp9y80q89c.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy9fp2i3n.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpy9fp2i3n.__unittest_L34_C1() [0x427a62]\n??:? void tmpy9fp2i3n.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n < 0) return false;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2)\n    {\n        sum += i;\n        if (sum == n)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2uhqqzte.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2uhqqzte.__unittest_L27_C1() [0x427ab5]\n??:? void tmp2uhqqzte.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy9fp2i3n.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpy9fp2i3n.__unittest_L34_C1() [0x427a62]\n??:? void tmpy9fp2i3n.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 4)\n        return false;\n    if (n == 6)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    for (long i = 1; i <= n / 2; i++)\n    {\n        if (is_equal_to_sum_even(n - 2 * i))\n            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx_xsb3bh.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpx_xsb3bh.__unittest_L27_C1() [0x427a96]\n??:? void tmpx_xsb3bh.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnhibml0k.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhibml0k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    if(n % 2 != 0)\n        return false;\n    if(n == 0)\n        return true;\n    if(n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa01nt6g9.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpa01nt6g9.__unittest_L25_C1() [0x427a6e]\n??:? void tmpa01nt6g9.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1)\n        return false;\n    else\n    {\n        long sum = 0;\n        for (long i = 0; i < n; i += 2)\n        {\n            sum += i;\n            if (sum == n)\n                return true;\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq4n8_tma.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpq4n8_tma.__unittest_L30_C1() [0x427aad]\n??:? void tmpq4n8_tma.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnhibml0k.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhibml0k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyonf0dac.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpyonf0dac.__unittest_L24_C1() [0x427aae]\n??:? void tmpyonf0dac.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    long a = n / 2;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqh9rfz2m.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh9rfz2m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1)\n        return false;\n    if (n == 4)\n        return false;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n - 4);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp18dk_41m.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp18dk_41m.__unittest_L26_C1() [0x427ac9]\n??:? void tmp18dk_41m.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpftdofpy1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpftdofpy1.__unittest_L22_C1() [0x427a66]\n??:? void tmpftdofpy1.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    long sum = a + b + c + d;\n    if (sum == n)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1sszc7da.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp1sszc7da.__unittest_L29_C1() [0x427ade]\n??:? void tmp1sszc7da.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    long sum = a + b + c + d;\n    if (sum == n)\n        return true;\n    else\n        return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9x6ic_ii.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9x6ic_ii.__unittest_L44_C1() [0x427aee]\n??:? void tmp9x6ic_ii.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    for (i = 2; i <= n; i += 2)\n    {\n        for (j = 2; j <= n; j += 2)\n        {\n            for (k = 2; k <= n; k += 2)\n            {\n                for (l = 2; l <= n; l += 2)\n                {\n                    if (i + j + k + l == n)\n                        return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnhibml0k.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhibml0k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    long a = n / 2;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqh9rfz2m.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh9rfz2m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dp24ec3.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dp24ec3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1gvgsaz8.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp1gvgsaz8.__unittest_L37_C1() [0x427a7a]\n??:? void tmp1gvgsaz8.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n%2!=0)\n        return false;\n    else\n    {\n        long a,b,c,d;\n        for(a=2;a<=n/4;a+=2)\n        {\n            for(b=2;b<=n/4;b+=2)\n            {\n                for(c=2;c<=n/4;c+=2)\n                {\n                    for(d=2;d<=n/4;d+=2)\n                    {\n                        if(a+b+c+d==n)\n                            return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprxkvbz6x.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmprxkvbz6x.__unittest_L38_C1() [0x427b89]\n??:? void tmprxkvbz6x.__modtest() [0x427c18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    long m = n / 2;\n    long a = 2;\n    long b = 2;\n    long c = 2;\n    long d = 2;\n    while (a + b + c + d <= m)\n    {\n        if (a + b + c + d == m)\n            return true;\n        if (a + b + c + d < m)\n        {\n            if (d < m - a - b - c)\n                d += 2;\n            else if (c < m - a - b - d)\n                c += 2;\n            else if (b < m - a - c - d)\n                b += 2;\n            else if (a < m - b - c - d)\n                a += 2;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp45p0ybqj.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmp45p0ybqj.__unittest_L45_C1() [0x427bcd]\n??:? void tmp45p0ybqj.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    else \n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        return (a + b + c + d) == n;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwn0h48ec.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpwn0h48ec.__unittest_L29_C1() [0x427ac2]\n??:? void tmpwn0h48ec.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n%2!=0)\n        return false;\n    if(n==0)\n        return true;\n    if(n<0)\n        return false;\n    return is_equal_to_sum_even(n-2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6f539pmf.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6f539pmf.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6f539pmf.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    return n % 2 == 0 && n >= 4 && n <= 16;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwoiu_qhw.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpwoiu_qhw.__unittest_L28_C1() [0x427a56]\n??:? void tmpwoiu_qhw.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    long a = 2;\n    long b = n - 2;\n    while (a <= b)\n    {\n        if (a + b == n)\n            return true;\n        a += 2;\n        b -= 2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgifh7r21.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpgifh7r21.__unittest_L35_C1() [0x427aca]\n??:? void tmpgifh7r21.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n < 8) return false;\n    if (n % 2 != 0) return false;\n    long a = n / 4;\n    long b = a + 2;\n    long c = b + 2;\n    long d = c + 2;\n    return a + b + c + d == n;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj1accb3m.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpj1accb3m.__unittest_L36_C1() [0x427ac2]\n??:? void tmpj1accb3m.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    if (n < 8) \n    {\n        return false;\n    }\n    if (n == 8) \n    {\n        return true;\n    }\n    if (n == 10) \n    {\n        return false;\n    }\n    if (n == 12) \n    {\n        return true;\n    }\n    if (n == 14) \n    {\n        return false;\n    }\n    if (n == 16) \n    {\n        return true;\n    }\n    if (n == 18) \n    {\n        return false;\n    }\n    if (n == 20) \n    {\n        return true;\n    }\n    if (n == 22) \n    {\n        return false;\n    }\n    if (n == 24) \n    {\n        return true;\n    }\n    if (n == 26) \n    {\n        return false;\n    }\n    if (n == 28) \n    {\n        return true;\n    }\n    if (n == 30) \n    {\n        return false;\n    }\n    if (n == 32) \n    {\n        return true;\n    }\n    if (n == 34) \n    {\n        return false;\n    }\n    if (n == 36) \n    {\n        return true;\n    }\n    if (n == 38) \n    {\n        return false;\n    }\n    if (n == 40) \n    {\n        return true;\n    }\n    if (n == 42) \n    {\n        return false;\n    }\n    if (n == 44) \n    {\n        return true;\n    }\n    if (n == 46) \n    {\n        return false;\n    }\n    if (n == 48) \n    {\n        return true;\n    }\n    if (n == 50) \n    {\n        return false;\n    }\n    if (n == 52) \n    {\n        return true;\n    }\n    if (n == 54)\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmxw0ucqh.d(117): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxw0ucqh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        i++;\n    }\n    return sum == n;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpio0olirc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpio0olirc.__unittest_L41_C1() [0x427ab5]\n??:? void tmpio0olirc.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long sum = 0;\n    long count = 0;\n    for (long i = 2; i <= n; i += 2)\n    {\n        sum += i;\n        count++;\n        if (sum == n)\n            return true;\n        if (sum > n)\n            return false;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnh7362ko.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpnh7362ko.__unittest_L33_C1() [0x427ad9]\n??:? void tmpnh7362ko.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 4)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiafsqd8a.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpiafsqd8a.__unittest_L36_C1() [0x427aae]\n??:? void tmpiafsqd8a.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long sum = 0;\n        for (int i = 0; i < 4; i++)\n        {\n            sum += n;\n            n -= 2;\n        }\n        return sum == n;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdv9yhuy4.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpdv9yhuy4.__unittest_L29_C1() [0x427abe]\n??:? void tmpdv9yhuy4.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        if (a + b + c + d == n)\n        {\n            result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5jf_ck5o.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp5jf_ck5o.__unittest_L30_C1() [0x427ac6]\n??:? void tmp5jf_ck5o.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        i += 2;\n        sum += i;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnw43104o.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpnw43104o.__unittest_L29_C1() [0x427ab5]\n??:? void tmpnw43104o.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    if (n % 2 != 0) return false;\n    if (n == 4) return false;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1kdcuzcb.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp1kdcuzcb.__unittest_L33_C1() [0x427a62]\n??:? void tmp1kdcuzcb.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpih9o2o9j.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpih9o2o9j.__unittest_L22_C1() [0x427a66]\n??:? void tmpih9o2o9j.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    long sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            sum += i;\n            if (sum == n)\n            {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp05vgmjwc.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmp05vgmjwc.__unittest_L32_C1() [0x427a9d]\n??:? void tmp05vgmjwc.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else if (n == 0)\n        return true;\n    else\n        return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw9nfw8op.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpw9nfw8op.__unittest_L23_C1() [0x427a62]\n??:? void tmpw9nfw8op.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else if (n == 0)\n        return true;\n    else\n        return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw9nfw8op.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpw9nfw8op.__unittest_L23_C1() [0x427a62]\n??:? void tmpw9nfw8op.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsa9mljln.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpsa9mljln.__unittest_L21_C1() [0x427a6e]\n??:? void tmpsa9mljln.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long sum = 0;\n        for (long i = 1; i <= n / 2; i++)\n        {\n            if (sum == n)\n            {\n                result = true;\n                break;\n            }\n            sum += 2 * i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqt_nqskw.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpqt_nqskw.__unittest_L32_C1() [0x427abd]\n??:? void tmpqt_nqskw.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n    {\n        return false;\n    }\n    else \n    {\n        long sum = 0;\n        long i = 0;\n        while (sum < n) \n        {\n            sum += 2 * i;\n            i++;\n        }\n        return sum == n;\n    }\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxbp88k31.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpxbp88k31.__unittest_L44_C1() [0x427aa5]\n??:? void tmpxbp88k31.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    int count = 0;\n    for (int i = 0; i <= n; i += 2)\n    {\n        for (int j = 0; j <= n; j += 2)\n        {\n            for (int k = 0; k <= n; k += 2)\n            {\n                for (int l = 0; l <= n; l += 2)\n                {\n                    if (i + j + k + l == n)\n                    {\n                        count++;\n                    }\n                }\n            }\n        }\n    }\n    return count == 1;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_5wsq4sk.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp_5wsq4sk.__unittest_L35_C1() [0x427af6]\n??:? void tmp_5wsq4sk.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnhibml0k.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhibml0k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n % 2 != 0)\n        return false;\n    if(n == 0)\n        return true;\n    long i = 2;\n    long sum = 0;\n    while(sum < n)\n    {\n        sum += i;\n        i += 2;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmgou9cjc.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpmgou9cjc.__unittest_L29_C1() [0x427ab9]\n??:? void tmpmgou9cjc.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n        return false;\n    if (n == 0) \n        return true;\n    if (n <= 0) \n        return false;\n    if (n == 2) \n        return false;\n    if (n == 4) \n        return true;\n    long m = n / 2;\n    long a = 2;\n    long b = 2;\n    long c = m - 4;\n    long d = m - 2;\n    if (c % 2 != 0) \n        return false;\n    if (d % 2 != 0) \n        return false;\n    if (c < 0) \n        return false;\n    if (d < 0) \n        return false;\n    if (c == 0) \n        return true;\n    if (d == 0) \n        return true;\n    if (c == 2) \n        return true;\n    if (d == 2) \n        return true;\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpirrecadb.d(64): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmpirrecadb.__unittest_L60_C1() [0x427b52]\n??:? void tmpirrecadb.__modtest() [0x427c40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42830c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dp24ec3.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dp24ec3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n        return false;\n    if (n == 0) \n        return true;\n    if (n < 0) \n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2uw4v8b4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp2uw4v8b4.__unittest_L36_C1() [0x427a6e]\n??:? void tmp2uw4v8b4.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else if (n == 0)\n        return true;\n    else\n        return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp69yv50sv.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp69yv50sv.__unittest_L35_C1() [0x427a62]\n??:? void tmp69yv50sv.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqxmgima3.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmpqxmgima3.__unittest_L19_C1() [0x427a6a]\n??:? void tmpqxmgima3.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt5szxn9p.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpt5szxn9p.__unittest_L21_C1() [0x427a6e]\n??:? void tmpt5szxn9p.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        for (long i = 0; i <= n; i += 2)\n        {\n            for (long j = 0; j <= n; j += 2)\n            {\n                for (long k = 0; k <= n; k += 2)\n                {\n                    for (long l = 0; l <= n; l += 2)\n                    {\n                        if (i + j + k + l == n)\n                        {\n                            a = i;\n                            b = j;\n                            c = k;\n                            d = l;\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp23tzv7cl.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp23tzv7cl.__unittest_L47_C1() [0x427af2]\n??:? void tmp23tzv7cl.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long sum = 0;\n    long i = 0;\n    while (sum < n)\n    {\n        sum += 2 * i;\n        i++;\n    }\n    return sum == n;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yuo3t7c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp6yuo3t7c.__unittest_L31_C1() [0x427ac5]\n??:? void tmp6yuo3t7c.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9ttge2hq.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp9ttge2hq.__unittest_L33_C1() [0x427a6e]\n??:? void tmp9ttge2hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n    long n_half = n / 2;\n    for (long i = 0; i <= n_half; i++)\n    {\n        for (long j = 0; j <= n_half; j++)\n        {\n            for (long k = 0; k <= n_half; k++)\n            {\n                for (long l = 0; l <= n_half; l++)\n                {\n                    if (i + j + k + l == n_half) return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptt_fu1p_.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmptt_fu1p_.__unittest_L34_C1() [0x427afe]\n??:? void tmptt_fu1p_.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        long a = n / 2;\n        long b = n / 2;\n        long c = n / 2;\n        long d = n / 2;\n        long sum = a + b + c + d;\n        if (sum == n)\n            return true;\n        else\n            return false;\n    }\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr2on2kbd.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpr2on2kbd.__unittest_L44_C1() [0x427ace]\n??:? void tmpr2on2kbd.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3grsu1u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpx3grsu1u.__unittest_L25_C1() [0x427a6e]\n??:? void tmpx3grsu1u.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    long sum = 0;\n    long count = 0;\n    long i = 2;\n    while (sum < n)\n    {\n        if (i % 2 == 0)\n        {\n            sum += i;\n            count++;\n        }\n        i++;\n    }\n    return sum == n && count == 4;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr3biqvhc.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpr3biqvhc.__unittest_L30_C1() [0x427ada]\n??:? void tmpr3biqvhc.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) \n        return false;\n    if (n == 0) \n        return true;\n    long m = n / 2;\n    long i = 2;\n    long j = m - 2;\n    while (i <= j) \n    {\n        if (i + j == m) \n            return true;\n        if (i + j > m) \n            j -= 2;\n        else \n            i += 2;\n    }\n    return false;\n}\n/*\nGiven a sequence of integers, find the longest subsequence that is strictly increasing.\n    Example\n    >>> longest_increasing_subsequence([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp73qogv9l.d(34): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73qogv9l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        for (i = 0; i <= n; i++)\n        {\n            for (j = 0; j <= n; j++)\n            {\n                for (k = 0; k <= n; k++)\n                {\n                    for (l = 0; l <= n; l++)\n                    {\n                        if (i + j + k + l == n)\n                        {\n                            if (i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0)\n                                return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_csatb3o.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmp_csatb3o.__unittest_L44_C1() [0x427b32]\n??:? void tmp_csatb3o.__modtest() [0x427c20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5dp24ec3.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dp24ec3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    bool result = false;\n    if (n % 2 == 0) {\n        long a = n / 2;\n        long b = a / 2;\n        long c = b / 2;\n        long d = c / 2;\n        if (a + b + c + d == n) {\n            result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0eeaok10.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp0eeaok10.__unittest_L28_C1() [0x427aea]\n??:? void tmp0eeaok10.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n <= 0) return false;\n    if (n % 2 != 0) return false;\n    if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8pbgnvst.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8pbgnvst.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    for (int i = 0; i < n / 2; i++)\n    {\n        if (a + b + c + d == n)\n            return true;\n        a--;\n        b--;\n        c--;\n        d--;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpve4zccx4.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpve4zccx4.__unittest_L37_C1() [0x427aea]\n??:? void tmpve4zccx4.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if(n % 2 != 0)\n        return false;\n    else\n    {\n        long sum = 0;\n        long i = 0;\n        while(sum < n)\n        {\n            sum += 2 * i;\n            i++;\n        }\n        if(sum == n)\n            return true;\n        else\n            return false;\n    }\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm853jc7y.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpm853jc7y.__unittest_L33_C1() [0x427ab1]\n??:? void tmpm853jc7y.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    int count = 0;\n    long sum = 0;\n    while (sum < n)\n    {\n        sum += 2;\n        count++;\n    }\n    if (sum == n)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmps26po72b.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmps26po72b.__unittest_L29_C1() [0x427a7e]\n??:? void tmps26po72b.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp09yg2xmo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp09yg2xmo.__unittest_L22_C1() [0x427a62]\n??:? void tmp09yg2xmo.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphti4ihre.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmphti4ihre.__unittest_L26_C1() [0x427aba]\n??:? void tmphti4ihre.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0) return false;\n    if (n == 0) return true;\n    if (n < 0) return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsa9mljln.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpsa9mljln.__unittest_L21_C1() [0x427a6e]\n??:? void tmpsa9mljln.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    // your code here\n    if(n % 2 != 0)\n        return false;\n    if(n == 0)\n        return true;\n    if(n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7yzmf8u_.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp7yzmf8u_.__unittest_L25_C1() [0x427aae]\n??:? void tmp7yzmf8u_.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2)\n    {\n        sum += i;\n        if (sum == n)\n            return true;\n        if (sum > n)\n            return false;\n    }\n    return false;\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjdx_g5_8.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpjdx_g5_8.__unittest_L43_C1() [0x427ae5]\n??:? void tmpjdx_g5_8.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ootx4hq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp6ootx4hq.__unittest_L24_C1() [0x427a6e]\n??:? void tmp6ootx4hq.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyonf0dac.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpyonf0dac.__unittest_L24_C1() [0x427aae]\n??:? void tmpyonf0dac.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2057tnst.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp2057tnst.__unittest_L36_C1() [0x427aae]\n??:? void tmp2057tnst.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n        return true;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    true\n    >>> is_equal_to_sum_odd(8L)\n    false\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8zj6w0no.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp8zj6w0no.__unittest_L36_C1() [0x427a7a]\n??:? void tmp8zj6w0no.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7uvmtnib.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp7uvmtnib.__unittest_L36_C1() [0x427a6e]\n??:? void tmp7uvmtnib.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n == 2)\n        return false;\n    long a = 2;\n    long b = n - 2;\n    while (a <= b)\n    {\n        if (a == b)\n            return true;\n        a += 2;\n        b -= 2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcfz0nebv.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpcfz0nebv.__unittest_L33_C1() [0x427ab6]\n??:? void tmpcfz0nebv.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n        return true;\n    if (n < 0)\n        return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2)\n    {\n        sum += i;\n        if (sum == n)\n            return true;\n        if (sum > n)\n            return false;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_dluqlbb.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp_dluqlbb.__unittest_L33_C1() [0x427ae5]\n??:? void tmp_dluqlbb.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n        return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n - 8);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq630z_xf.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpq630z_xf.__unittest_L24_C1() [0x427ac1]\n??:? void tmpq630z_xf.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    }
  ]
}