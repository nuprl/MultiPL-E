language: d
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : split;\n  \
    \  import std.conv : to;\n    import std.math : isPrime;\n    import std.range\
    \ : join;\n    import std.string : strip;\n    import std.typecons : tuple;\n\
    \    \n    return sentence.split(\" \")\n        .filter!(word => word.strip().to!int.isPrime)\n\
    \        .join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tul117s.d(29): Error: module `std.math` import `isPrime` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tul117s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163030
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j2mtp9a.d(26): Error: undefined identifier `split`

    /tmp/tmp6j2mtp9a.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j2mtp9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0i6gd90.d(26): Error: undefined identifier `split`

    /tmp/tmpy0i6gd90.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpy0i6gd90.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0i6gd90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j2mtp9a.d(26): Error: undefined identifier `split`

    /tmp/tmp6j2mtp9a.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j2mtp9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.range : joiner;\n \
    \   import std.conv : to;\n    import std.math : isPrime;\n    import std.array\
    \ : array;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.range : zip;\n    import std.algorithm : map;\n    import std.range\
    \ : take;\n    import std.range : dropOne;\n    import std.range : cycle;\n  \
    \  import std.range : retro;\n    import std.range : retroCycle;\n    import std.range\
    \ : retroTake;\n    import std.range : retroDropOne;\n    import std.range : retroZip;\n\
    \    import std.range : retroMap;\n    import std.range : retroFilter;\n    import\
    \ std.range : retroChunks;\n    import std.range : retroChunksOf;\n    import\
    \ std.range : retroSliced;\n    import std.range : retroSliced;\n    import std.range\
    \ : retroStride;\n    import std.range : retroStride;\n    import std.range :\
    \ retroChunks;\n    import std.range : retroChunksOf;\n    import std.range :\
    \ retroSliced;\n    import std.range : retroSliced;\n    import std.range : retroStride;\n\
    \    import std.range : retroStride;\n    import std.range : retroChunks;\n  \
    \  import std.range : retroChunksOf;\n    import std.range : retroSliced;\n  \
    \  import std.range : retroSliced;\n    import std.range : retroStride;\n    import\
    \ std.range : retroStride;\n    import std.range : retroChunks;\n    import std.range\
    \ : retroChunksOf;\n    import std.range : retroSliced;\n    import std.range\
    \ : retroSliced;\n    import std.range : retroStride;\n    import std.range :\
    \ retroStride;\n    import std.range : retroChunks;\n    import std.range : retroChunksOf;\n\
    \    import std.range : retroSliced;\n    import std.range : retroSliced;\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5a03gjo9.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5a03gjo9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n  \
    \  import std.math;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4lybhlqc.d(91): Error: identifier expected following `import`

    /tmp/tmp4lybhlqc.d(91): Error: `;` expected

    /tmp/tmp4lybhlqc.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lybhlqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0i6gd90.d(26): Error: undefined identifier `split`

    /tmp/tmpy0i6gd90.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpy0i6gd90.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0i6gd90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return strip(result);\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqaaoif6n.d(26): Error: undefined identifier `split`

    /tmp/tmpqaaoif6n.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpqaaoif6n.d(35): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqaaoif6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.math : isPrime;\n    import std.string : split;\n \
    \   import std.traits : isIntegral;\n    \n    static if (isIntegral!(typeof(sentence[0])))\n\
    \    {\n        static assert(false, \"sentence should be a string\");\n    }\n\
    \    \n    auto words = sentence.split(\" \");\n    auto primes = iota(2, words.length).filter!(a\
    \ => isPrime(a));\n    auto result = words.filter!(a => primes.canFind(a.length));\n\
    \    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi2np2q68.d(31): Error: module `std.math` import `isPrime` not found

    /tmp/tmpi2np2q68.d(42): Error: no property `canFind` for type `FilterResult!(__lambda2,
    Result)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda3, string[])`

    /tmp/tmpi2np2q68.d(42):        instantiated from here: `filter!(string[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2np2q68.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163030
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j2mtp9a.d(26): Error: undefined identifier `split`

    /tmp/tmp6j2mtp9a.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j2mtp9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    string result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52n6blnr.d(26): Error: undefined identifier `split`

    /tmp/tmp52n6blnr.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52n6blnr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3m2oaej.d(26): Error: undefined identifier `split`

    /tmp/tmpq3m2oaej.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpq3m2oaej.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3m2oaej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.math : isPrime;\n    import std.range\
    \ : iota;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    \n    auto words = sentence.split(\" \");\n    auto lens = words.map!(a =>\
    \ a.length).array;\n    auto primes = lens.filter!(a => isPrime(a));\n    auto\
    \ indices = iota(0, lens.length).filter!(a => lens[a] in primes).array;\n    auto\
    \ result = words.map!(a => a.to!string).array;\n    return result.only!(indices).join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkoolyrmv.d(29): Error: module `std.math` import `isPrime` not found

    /tmp/tmpkoolyrmv.d(37): Error: incompatible types for `(lens[a]) in (primes)`:
    `ulong` and `FilterResult!(__lambda3, ulong[])`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda4, Result)`

    /tmp/tmpkoolyrmv.d(37):        instantiated from here: `filter!(Result)`

    /tmp/tmpkoolyrmv.d(39): Error: no property `only` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkoolyrmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163030
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3m2oaej.d(26): Error: undefined identifier `split`

    /tmp/tmpq3m2oaej.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpq3m2oaej.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3m2oaej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_ola3c_.d(26): Error: undefined identifier `split`

    /tmp/tmpb_ola3c_.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpb_ola3c_.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_ola3c_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // TODO: implement this function\n    return \"\";\n}\nunittest\n{\n  \
    \  alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppe3cdv4o.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fb5]

    ??:? void tmppe3cdv4o.__unittest_L29_C1() [0x427aca]

    ??:? void tmppe3cdv4o.__modtest() [0x427d38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430134]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab45]

    ??:? runModuleUnitTests [0x42ba35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428404]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163030
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3m2oaej.d(26): Error: undefined identifier `split`

    /tmp/tmpq3m2oaej.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpq3m2oaej.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3m2oaej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.math : isPrime;\n    import std.range\
    \ : iota;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    \n    auto words = sentence.split(\" \");\n    auto word_lengths = words.map!(a\
    \ => a.length);\n    auto primes = word_lengths.filter!(a => isPrime(a));\n  \
    \  auto indices = primes.map!(a => word_lengths.indexOf(a));\n    auto result\
    \ = indices.map!(a => words[a]).array;\n    return result.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_0i42yc.d(29): Error: module `std.math` import `isPrime` not found

    /tmp/tmpg_0i42yc.d(37): Error: no property `indexOf` for type `MapResult!(__lambda2,
    string[])`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        instantiated
    from here: `MapResult!(__lambda4, FilterResult!(__lambda3, MapResult!(__lambda2,
    string[])))`

    /tmp/tmpg_0i42yc.d(37):        instantiated from here: `map!(FilterResult!(__lambda3,
    MapResult!(__lambda2, string[])))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_0i42yc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163030
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3m2oaej.d(26): Error: undefined identifier `split`

    /tmp/tmpq3m2oaej.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpq3m2oaej.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3m2oaej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0i6gd90.d(26): Error: undefined identifier `split`

    /tmp/tmpy0i6gd90.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpy0i6gd90.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0i6gd90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0i6gd90.d(26): Error: undefined identifier `split`

    /tmp/tmpy0i6gd90.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpy0i6gd90.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0i6gd90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j2mtp9a.d(26): Error: undefined identifier `split`

    /tmp/tmp6j2mtp9a.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j2mtp9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(i,\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq6ubzlw.d(26): Error: undefined identifier `split`

    /tmp/tmpkq6ubzlw.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpkq6ubzlw.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq6ubzlw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopyh2dx.d(26): Error: undefined identifier `split`

    /tmp/tmpoopyh2dx.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpoopyh2dx.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopyh2dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return join(result, \" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3viodl0.d(26): Error: undefined identifier `split`

    /tmp/tmps3viodl0.d(30): Error: undefined identifier `isPrime`

    /tmp/tmps3viodl0.d(35): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3viodl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.math : isPrime;\n    import std.string : split;\n \
    \   import std.algorithm : joiner;\n    import std.range : take;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : iota;\n    import std.math : isPrime;\n    import std.string : split;\n\
    \    import std.algorithm : joiner;\n    import std.range : take;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.conv :\
    \ to;\n    import std.range : iota;\n    import std.math : isPrime;\n    import\
    \ std.string : split;\n    import std.algorithm : joiner;\n    import std.range\
    \ : take;\n    import std.typecons : tuple;\n    import std.array : array;\n \
    \   import std.conv : to;\n    import std.range : iota;\n    import std.math :\
    \ isPrime;\n    import std.string : split;\n    import std.algorithm : joiner;\n\
    \    import std.range : take;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : iota;\n    import\
    \ std.math : isPrime;\n    import std.string : split;\n    import std.algorithm\
    \ : joiner;\n    import std.range : take;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : iota;\n    import std.math : isPrime;\n    import std.string : split;\n  \
    \  import std.algorithm : joiner;\n    import std.range : take;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : i\nunittest\n{\n    alias candidate = words_in_sentence;\n\n   \
    \ assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets\
    \ go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40vfxkh9.d(79): Error: `;` expected

    /tmp/tmp40vfxkh9.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40vfxkh9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eqy7yls.d(26): Error: undefined identifier `split`

    /tmp/tmp3eqy7yls.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3eqy7yls.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eqy7yls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8bijdb4.d(26): Error: undefined identifier `split`

    /tmp/tmpf8bijdb4.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpf8bijdb4.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bijdb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
