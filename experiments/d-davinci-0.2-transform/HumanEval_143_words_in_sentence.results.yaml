language: d
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : split;\n  \
    \  import std.conv : to;\n    import std.math : isPrime;\n    import std.range\
    \ : join;\n    import std.string : strip;\n    import std.typecons : tuple;\n\
    \    \n    return sentence.split(\" \")\n        .filter!(word => word.strip().to!int.isPrime)\n\
    \        .join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpit6thw8y.d(29): Error: module `std.math` import `isPrime` not
    found\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit6thw8y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9jit1r5.d(26): Error: undefined identifier `split`\n/tmp/tmpv9jit1r5.d(30):
    Error: undefined identifier `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv9jit1r5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ltoxuef.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9jit1r5.d(26): Error: undefined identifier `split`\n/tmp/tmpv9jit1r5.d(30):
    Error: undefined identifier `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv9jit1r5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.range : joiner;\n \
    \   import std.conv : to;\n    import std.math : isPrime;\n    import std.array\
    \ : array;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.range : zip;\n    import std.algorithm : map;\n    import std.range\
    \ : take;\n    import std.range : dropOne;\n    import std.range : cycle;\n  \
    \  import std.range : retro;\n    import std.range : retroCycle;\n    import std.range\
    \ : retroTake;\n    import std.range : retroDropOne;\n    import std.range : retroZip;\n\
    \    import std.range : retroMap;\n    import std.range : retroFilter;\n    import\
    \ std.range : retroChunks;\n    import std.range : retroChunksOf;\n    import\
    \ std.range : retroSliced;\n    import std.range : retroSliced;\n    import std.range\
    \ : retroStride;\n    import std.range : retroStride;\n    import std.range :\
    \ retroChunks;\n    import std.range : retroChunksOf;\n    import std.range :\
    \ retroSliced;\n    import std.range : retroSliced;\n    import std.range : retroStride;\n\
    \    import std.range : retroStride;\n    import std.range : retroChunks;\n  \
    \  import std.range : retroChunksOf;\n    import std.range : retroSliced;\n  \
    \  import std.range : retroSliced;\n    import std.range : retroStride;\n    import\
    \ std.range : retroStride;\n    import std.range : retroChunks;\n    import std.range\
    \ : retroChunksOf;\n    import std.range : retroSliced;\n    import std.range\
    \ : retroSliced;\n    import std.range : retroStride;\n    import std.range :\
    \ retroStride;\n    import std.range : retroChunks;\n    import std.range : retroChunksOf;\n\
    \    import std.range : retroSliced;\n    import std.range : retroSliced;\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpokj8h3at.d(73): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokj8h3at.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n  \
    \  import std.math;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_uyvh8r.d(91): Error: Identifier expected following import\n/tmp/tmp2_uyvh8r.d(91):
    Error: \'';\'' expected\n/tmp/tmp2_uyvh8r.d(103): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2_uyvh8r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ltoxuef.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return strip(result);\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplobo64su.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.math : isPrime;\n    import std.string : split;\n \
    \   import std.traits : isIntegral;\n    \n    static if (isIntegral!(typeof(sentence[0])))\n\
    \    {\n        static assert(false, \"sentence should be a string\");\n    }\n\
    \    \n    auto words = sentence.split(\" \");\n    auto primes = iota(2, words.length).filter!(a\
    \ => isPrime(a));\n    auto result = words.filter!(a => primes.canFind(a.length));\n\
    \    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xzjbz2w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9jit1r5.d(26): Error: undefined identifier `split`\n/tmp/tmpv9jit1r5.d(30):
    Error: undefined identifier `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv9jit1r5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    string result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhk2x4vo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5id1nm2x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.math : isPrime;\n    import std.range\
    \ : iota;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    \n    auto words = sentence.split(\" \");\n    auto lens = words.map!(a =>\
    \ a.length).array;\n    auto primes = lens.filter!(a => isPrime(a));\n    auto\
    \ indices = iota(0, lens.length).filter!(a => lens[a] in primes).array;\n    auto\
    \ result = words.map!(a => a.to!string).array;\n    return result.only!(indices).join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgw76hm_y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5id1nm2x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjozhfk9g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // TODO: implement this function\n    return \"\";\n}\nunittest\n{\n  \
    \  alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0n8dmixh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5id1nm2x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.math : isPrime;\n    import std.range\
    \ : iota;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    \n    auto words = sentence.split(\" \");\n    auto word_lengths = words.map!(a\
    \ => a.length);\n    auto primes = word_lengths.filter!(a => isPrime(a));\n  \
    \  auto indices = primes.map!(a => word_lengths.indexOf(a));\n    auto result\
    \ = indices.map!(a => words[a]).array;\n    return result.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a6y40ob.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5id1nm2x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ltoxuef.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ltoxuef.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9jit1r5.d(26): Error: undefined identifier `split`\n/tmp/tmpv9jit1r5.d(30):
    Error: undefined identifier `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv9jit1r5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(i,\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqwepdgr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h4y1ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return join(result, \" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78s5h3is.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.math : isPrime;\n    import std.string : split;\n \
    \   import std.algorithm : joiner;\n    import std.range : take;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : iota;\n    import std.math : isPrime;\n    import std.string : split;\n\
    \    import std.algorithm : joiner;\n    import std.range : take;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.conv :\
    \ to;\n    import std.range : iota;\n    import std.math : isPrime;\n    import\
    \ std.string : split;\n    import std.algorithm : joiner;\n    import std.range\
    \ : take;\n    import std.typecons : tuple;\n    import std.array : array;\n \
    \   import std.conv : to;\n    import std.range : iota;\n    import std.math :\
    \ isPrime;\n    import std.string : split;\n    import std.algorithm : joiner;\n\
    \    import std.range : take;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : iota;\n    import\
    \ std.math : isPrime;\n    import std.string : split;\n    import std.algorithm\
    \ : joiner;\n    import std.range : take;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : iota;\n    import std.math : isPrime;\n    import std.string : split;\n  \
    \  import std.algorithm : joiner;\n    import std.range : take;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : i\nunittest\n{\n    alias candidate = words_in_sentence;\n\n   \
    \ assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets\
    \ go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5uzocq96.d(79): Error: \'';\'' expected\n/tmp/tmp5uzocq96.d(91):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5uzocq96.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793754
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnql_wc0.d(26): Error: undefined identifier `split`\n/tmp/tmptnql_wc0.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmptnql_wc0.d(35): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnql_wc0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ryruu2a.d(26): Error: undefined identifier `split`\n/tmp/tmp4ryruu2a.d(30):
    Error: undefined identifier `isPrime`\n/tmp/tmp4ryruu2a.d(35): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ryruu2a.d",
    "-I/tmp"]\n'''
  stdout: b''
