language: d
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8j7ob_8e.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp8j7ob_8e.d(24): Error: undefined identifier `isupper`

    /tmp/tmp8j7ob_8e.d(26): Error: undefined identifier `tolower`

    /tmp/tmp8j7ob_8e.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8j7ob_8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Your code here\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpszz52qyv.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpszz52qyv.__unittest_L22_C1() [0x427ab2]

    ??:? void tmpszz52qyv.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               if(c == 'Z') \n                {\n                    c = 'B';\n\
    \                }\n                else if(c == 'Y') \n                {\n  \
    \                  c = 'A';\n                }\n                else \n      \
    \          {\n                    c += 2;\n                }\n            }\n\
    \            else \n            {\n                if(c == 'z') \n           \
    \     {\n                    c = 'b';\n                }\n                else\
    \ if(c == 'y') \n                {\n                    c = 'a';\n           \
    \     }\n                else \n                {\n                    c += 2;\n\
    \                }\n            }\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') \n            {\n                c = toupper(c);\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp56icb87m.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp56icb87m.d(24): Error: undefined identifier `isupper`

    /tmp/tmp56icb87m.d(56): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56icb87m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwtfmx5e.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpcwtfmx5e.d(28): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwtfmx5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(c\
    \ >= 'a' && c <= 'z') \n        {\n            result ~= toUpper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~=\
    \ toLower(c);\n        }\n        else if(c == 'a') \n        {\n            result\
    \ ~= 'c';\n        }\n        else if(c == 'e') \n        {\n            result\
    \ ~= 'g';\n        }\n        else if(c == 'i') \n        {\n            result\
    \ ~= 'k';\n        }\n        else if(c == 'o') \n        {\n            result\
    \ ~= 'q';\n        }\n        else if(c == 'u') \n        {\n            result\
    \ ~= 'y';\n        }\n        else \n        {\n            result ~= c;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbhigzwsr.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpbhigzwsr.d(28): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhigzwsr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa38rrh7.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpwa38rrh7.d(24): Error: undefined identifier `isupper`

    /tmp/tmpwa38rrh7.d(26): Error: undefined identifier `tolower`

    /tmp/tmpwa38rrh7.d(30): Error: undefined identifier `toupper`

    /tmp/tmpwa38rrh7.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa38rrh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9481iuts.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmp9481iuts.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9481iuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              if (c == 'Z')\n                    result ~= 'b';\n           \
    \     else if (c == 'Y')\n                    result ~= 'a';\n               \
    \ else\n                    result ~= char(c + 2);\n            }\n          \
    \  else\n            {\n                if (c == 'z')\n                    result\
    \ ~= 'b';\n                else if (c == 'y')\n                    result ~= 'a';\n\
    \                else\n                    result ~= char(c + 2);\n          \
    \  }\n        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp646v42rb.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp646v42rb.d(24): Error: undefined identifier `isupper`

    /tmp/tmp646v42rb.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp646v42rb.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp646v42rb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmzstxb1.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmzstxb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    encoded = encoded.replace(\"a\", \"c\");\n    encoded =\
    \ encoded.replace(\"e\", \"g\");\n    encoded = encoded.replace(\"i\", \"k\");\n\
    \    encoded = encoded.replace(\"o\", \"q\");\n    encoded = encoded.replace(\"\
    u\", \"w\");\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjor6qihn.d(24): Error: undefined identifier `toupper`

    /tmp/tmpjor6qihn.d(28): Error: undefined identifier `tolower`

    /tmp/tmpjor6qihn.d(35): Error: no property `replace` for type `string`

    /tmp/tmpjor6qihn.d(36): Error: no property `replace` for type `string`

    /tmp/tmpjor6qihn.d(37): Error: no property `replace` for type `string`

    /tmp/tmpjor6qihn.d(38): Error: no property `replace` for type `string`

    /tmp/tmpjor6qihn.d(39): Error: no property `replace` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjor6qihn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv5am6cfm.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpv5am6cfm.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpv5am6cfm.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpv5am6cfm.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5am6cfm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoglyfawv.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpoglyfawv.d(24): Error: undefined identifier `isupper`

    /tmp/tmpoglyfawv.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoglyfawv.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoglyfawv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkvpb839.d(22): Error: undefined identifier `isalpha`

    /tmp/tmprkvpb839.d(24): Error: undefined identifier `isupper`

    /tmp/tmprkvpb839.d(26): Error: undefined identifier `tolower`

    /tmp/tmprkvpb839.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkvpb839.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzvb1wdis.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42804d]

    ??:? void tmpzvb1wdis.__unittest_L37_C1() [0x427bf2]

    ??:? void tmpzvb1wdis.__modtest() [0x427dd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430478]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]

    ??:? runModuleUnitTests [0x42c4b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa38rrh7.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpwa38rrh7.d(24): Error: undefined identifier `isupper`

    /tmp/tmpwa38rrh7.d(26): Error: undefined identifier `tolower`

    /tmp/tmpwa38rrh7.d(30): Error: undefined identifier `toupper`

    /tmp/tmpwa38rrh7.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa38rrh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdq4sfui.d(22): Error: undefined identifier `isalpha`

    /tmp/tmphdq4sfui.d(24): Error: undefined identifier `isupper`

    /tmp/tmphdq4sfui.d(26): Error: undefined identifier `tolower`

    /tmp/tmphdq4sfui.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdq4sfui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp04dy6puh.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmp04dy6puh.__unittest_L37_C1() [0x427c62]

    ??:? void tmp04dy6puh.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(c >= 'a' && c <= 'z') \n        {\n            result ~= toupper(c);\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= tolower(c);\n        } \n        else \n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8pf7t2u3.d(24): Error: undefined identifier `toupper`

    /tmp/tmp8pf7t2u3.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8pf7t2u3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9xke6v0.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp_9xke6v0.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp_9xke6v0.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp_9xke6v0.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9xke6v0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'B';\n                else if(c == 'Y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzk3inx7v.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpzk3inx7v.d(24): Error: undefined identifier `isupper`

    /tmp/tmpzk3inx7v.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpzk3inx7v.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk3inx7v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9481iuts.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmp9481iuts.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9481iuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if (c == 'a')\n \
    \           {\n                c = 'c';\n            }\n            else if (c\
    \ == 'e')\n            {\n                c = 'g';\n            }\n          \
    \  else if (c == 'i')\n            {\n                c = 'k';\n            }\n\
    \            else if (c == 'o')\n            {\n                c = 'q';\n   \
    \         }\n            else if (c == 'u')\n            {\n                c\
    \ = 'w';\n            }\n            else if (c == 'y')\n            {\n     \
    \           c = 'a';\n            }\n            else\n            {\n       \
    \         c = c + 2;\n            }\n        }\n        result ~= c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcs_9lrwr.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpcs_9lrwr.d(24): Error: undefined identifier `isupper`

    /tmp/tmpcs_9lrwr.d(26): Error: undefined identifier `tolower`

    /tmp/tmpcs_9lrwr.d(30): Error: undefined identifier `toupper`

    /tmp/tmpcs_9lrwr.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs_9lrwr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            }\n            else \n    \
    \        {\n                result ~= toupper(c);\n            }\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqj4pgh5.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpxqj4pgh5.d(24): Error: undefined identifier `isupper`

    /tmp/tmpxqj4pgh5.d(26): Error: undefined identifier `tolower`

    /tmp/tmpxqj4pgh5.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqj4pgh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5l0d62t.d(24): Error: undefined identifier `toupper`

    /tmp/tmpk5l0d62t.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5l0d62t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= (char)(c + 2);\n            }\n            else\n     \
    \       {\n                if(c == 'W')\n                    result ~= 'A';\n\
    \                else if(c == 'X')\n                    result ~= 'B';\n     \
    \           else if(c == 'Y')\n                    result ~= 'C';\n          \
    \      else if(c == 'Z')\n                    result ~= 'D';\n               \
    \ else\n                    result ~= (char)(c + 2);\n            }\n        }\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb72xaize.d(35): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    /tmp/tmpb72xaize.d(48): Error: C style cast illegal, use `cast(char)(c + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb72xaize.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z')\n    \
    \    {\n            c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' &&\
    \ c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        switch\
    \ (c)\n        {\n            case 'A':\n            case 'a':\n             \
    \   c = 'C';\n                break;\n            case 'E':\n            case\
    \ 'e':\n                c = 'G';\n                break;\n            case 'I':\n\
    \            case 'i':\n                c = 'K';\n                break;\n   \
    \         case 'O':\n            case 'o':\n                c = 'M';\n       \
    \         break;\n            case 'U':\n            case 'u':\n             \
    \   c = 'Q';\n                break;\n        }\n        result += c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3xec1ma.d(25): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpd3xec1ma.d(29): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpd3xec1ma.d(31): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpd3xec1ma.d(54): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3xec1ma.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa38rrh7.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpwa38rrh7.d(24): Error: undefined identifier `isupper`

    /tmp/tmpwa38rrh7.d(26): Error: undefined identifier `tolower`

    /tmp/tmpwa38rrh7.d(30): Error: undefined identifier `toupper`

    /tmp/tmpwa38rrh7.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa38rrh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c =\
    \ (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp04tx0r5g.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ff5]

    ??:? void tmp04tx0r5g.__unittest_L34_C1() [0x427b96]

    ??:? void tmp04tx0r5g.__modtest() [0x427d74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430420]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fefd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]

    ??:? runModuleUnitTests [0x42c461]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428444]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa38rrh7.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpwa38rrh7.d(24): Error: undefined identifier `isupper`

    /tmp/tmpwa38rrh7.d(26): Error: undefined identifier `tolower`

    /tmp/tmpwa38rrh7.d(30): Error: undefined identifier `toupper`

    /tmp/tmpwa38rrh7.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa38rrh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bt2u0yy.d(43): Error: undefined identifier `toUpper`

    /tmp/tmp5bt2u0yy.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bt2u0yy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5awjaykx.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmp5awjaykx.__unittest_L37_C1() [0x427c62]

    ??:? void tmp5awjaykx.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoglyfawv.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpoglyfawv.d(24): Error: undefined identifier `isupper`

    /tmp/tmpoglyfawv.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoglyfawv.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoglyfawv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= tolower(c) + 2;\n            }\n            else\n            {\n\
    \                if(c == 'z')\n                    result ~= 'B';\n          \
    \      else if(c == 'y')\n                    result ~= 'A';\n               \
    \ else\n                    result ~= toupper(c) + 2;\n            }\n       \
    \ }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6hn1_cn.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpa6hn1_cn.d(24): Error: undefined identifier `isupper`

    /tmp/tmpa6hn1_cn.d(31): Error: undefined identifier `tolower`

    /tmp/tmpa6hn1_cn.d(40): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6hn1_cn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpblgqr4ss.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpblgqr4ss.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpblgqr4ss.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bt2u0yy.d(43): Error: undefined identifier `toUpper`

    /tmp/tmp5bt2u0yy.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bt2u0yy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoglyfawv.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpoglyfawv.d(24): Error: undefined identifier `isupper`

    /tmp/tmpoglyfawv.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoglyfawv.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoglyfawv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9481iuts.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmp9481iuts.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9481iuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1bm4sax.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpv1bm4sax.d(24): Error: undefined identifier `isupper`

    /tmp/tmpv1bm4sax.d(26): Error: undefined identifier `tolower`

    /tmp/tmpv1bm4sax.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1bm4sax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else if(c == 'a')\n        {\n          \
    \  result ~= 'c';\n        }\n        else if(c == 'e')\n        {\n         \
    \   result ~= 'g';\n        }\n        else if(c == 'i')\n        {\n        \
    \    result ~= 'k';\n        }\n        else if(c == 'o')\n        {\n       \
    \     result ~= 'q';\n        }\n        else if(c == 'u')\n        {\n      \
    \      result ~= 'y';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0pmrowe.d(24): Error: undefined identifier `toupper`

    /tmp/tmpg0pmrowe.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0pmrowe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n   \
    \             c = toLower(c);\n            }\n            else\n            {\n\
    \                c = toUpper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        encoded ~= c;\n    }\n    return\
    \ encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8k0si4s2.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmp8k0si4s2.d(24): Error: undefined identifier `isUpper`

    /tmp/tmp8k0si4s2.d(26): Error: undefined identifier `toLower`

    /tmp/tmp8k0si4s2.d(30): Error: undefined identifier `toUpper`

    /tmp/tmp8k0si4s2.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8k0si4s2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    result ~= 'C';\n                break;\n            case 'E':\n         \
    \       result ~= 'G';\n                break;\n            case 'I':\n      \
    \          result ~= 'K';\n                break;\n            case 'O':\n   \
    \             result ~= 'Q';\n                break;\n            case 'U':\n\
    \                result ~= 'S';\n                break;\n            case 'a':\n\
    \                result ~= 'c';\n                break;\n            case 'e':\n\
    \                result ~= 'g';\n                break;\n            case 'i':\n\
    \                result ~= 'k';\n                break;\n            case 'o':\n\
    \                result ~= 'q';\n                break;\n            case 'u':\n\
    \                result ~= 's';\n                break;\n            default:\n\
    \                result ~= c;\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbbjp62n5.d(24): Error: undefined identifier `toupper`

    /tmp/tmpbbjp62n5.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbjp62n5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0_83oj2.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpt0_83oj2.d(24): Error: undefined identifier `isupper`

    /tmp/tmpt0_83oj2.d(26): Error: undefined identifier `tolower`

    /tmp/tmpt0_83oj2.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0_83oj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= toLower(c) + 2;\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= c + 2;\n            }\n      \
    \  }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3ow4dtu.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmpl3ow4dtu.d(24): Error: undefined identifier `isUpper`

    /tmp/tmpl3ow4dtu.d(31): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3ow4dtu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= to!char(c - 'a'\
    \ + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n     \
    \       result ~= to!char(c - 'A' + 'a');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbjo35y9l.d(24): Error: template instance `to!char` template `to`
    is not defined

    /tmp/tmpbjo35y9l.d(28): Error: template instance `to!char` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjo35y9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp04dy6puh.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmp04dy6puh.__unittest_L37_C1() [0x427c62]

    ??:? void tmp04dy6puh.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= (char)(c + 2);\n            }\n            else\n     \
    \       {\n                if(c == 'W')\n                    result ~= 'A';\n\
    \                else if(c == 'X')\n                    result ~= 'B';\n     \
    \           else if(c == 'Y')\n                    result ~= 'C';\n          \
    \      else if(c == 'Z')\n                    result ~= 'D';\n               \
    \ else\n                    result ~= (char)(c + 2);\n            }\n        }\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb72xaize.d(35): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    /tmp/tmpb72xaize.d(48): Error: C style cast illegal, use `cast(char)(c + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb72xaize.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isAlpha(c))\n        {\n            if (isLower(c))\n            {\n  \
    \              if (c == 'w')\n                    result ~= 'a';\n           \
    \     else if (c == 'x')\n                    result ~= 'b';\n               \
    \ else if (c == 'y')\n                    result ~= 'c';\n                else\
    \ if (c == 'z')\n                    result ~= 'd';\n                else\n  \
    \                  result ~= c + 2;\n            }\n            else\n       \
    \     {\n                if (c == 'W')\n                    result ~= 'A';\n \
    \               else if (c == 'X')\n                    result ~= 'B';\n     \
    \           else if (c == 'Y')\n                    result ~= 'C';\n         \
    \       else if (c == 'Z')\n                    result ~= 'D';\n             \
    \   else\n                    result ~= c + 2;\n            }\n        }\n   \
    \     else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_l5x6ds.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmph_l5x6ds.d(24): Error: undefined identifier `isLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_l5x6ds.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zvnteyo.d(24): Error: undefined identifier `toupper`

    /tmp/tmp4zvnteyo.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zvnteyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pmn4khj.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp_pmn4khj.d(24): Error: undefined identifier `isupper`

    /tmp/tmp_pmn4khj.d(26): Error: undefined identifier `tolower`

    /tmp/tmp_pmn4khj.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pmn4khj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= tolower(c) + 2;\n            }\n            else\n            {\n\
    \                if(c == 'z')\n                    result ~= 'B';\n          \
    \      else if(c == 'y')\n                    result ~= 'A';\n               \
    \ else\n                    result ~= toupper(c) + 2;\n            }\n       \
    \ }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6hn1_cn.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpa6hn1_cn.d(24): Error: undefined identifier `isupper`

    /tmp/tmpa6hn1_cn.d(31): Error: undefined identifier `tolower`

    /tmp/tmpa6hn1_cn.d(40): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6hn1_cn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c.isUpper)\n        {\n            c = c.toLower;\n        }\n        else\
    \ if(c.isLower)\n        {\n            c = c.toUpper;\n        }\n        if(c\
    \ == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n\
    \        {\n            c = 'g';\n        }\n        else if(c == 'i')\n     \
    \   {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n\
    \            c = 'q';\n        }\n        else if(c == 'u')\n        {\n     \
    \       c = 'y';\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0_i0lew.d(22): Error: no property `isUpper` for type `char`

    /tmp/tmpg0_i0lew.d(24): Error: no property `toLower` for type `char`

    /tmp/tmpg0_i0lew.d(26): Error: no property `isLower` for type `char`

    /tmp/tmpg0_i0lew.d(28): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0_i0lew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzvb1wdis.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42804d]

    ??:? void tmpzvb1wdis.__unittest_L37_C1() [0x427bf2]

    ??:? void tmpzvb1wdis.__modtest() [0x427dd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430478]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]

    ??:? runModuleUnitTests [0x42c4b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else if (c == 'a')\n        {\n         \
    \   result ~= 'c';\n        }\n        else if (c == 'e')\n        {\n       \
    \     result ~= 'g';\n        }\n        else if (c == 'i')\n        {\n     \
    \       result ~= 'k';\n        }\n        else if (c == 'o')\n        {\n   \
    \         result ~= 'q';\n        }\n        else if (c == 'u')\n        {\n \
    \           result ~= 'y';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppc5jrbxf.d(24): Error: undefined identifier `toupper`

    /tmp/tmppc5jrbxf.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppc5jrbxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 32;\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ c + 32;\n        }\n        else if(c == 'a')\n        {\n            result\
    \ ~= 'c';\n        }\n        else if(c == 'e')\n        {\n            result\
    \ ~= 'g';\n        }\n        else if(c == 'i')\n        {\n            result\
    \ ~= 'k';\n        }\n        else if(c == 'o')\n        {\n            result\
    \ ~= 'q';\n        }\n        else if(c == 'u')\n        {\n            result\
    \ ~= 'w';\n        }\n        else if(c == 'A')\n        {\n            result\
    \ ~= 'C';\n        }\n        else if(c == 'E')\n        {\n            result\
    \ ~= 'G';\n        }\n        else if(c == 'I')\n        {\n            result\
    \ ~= 'K';\n        }\n        else if(c == 'O')\n        {\n            result\
    \ ~= 'Q';\n        }\n        else if(c == 'U')\n        {\n            result\
    \ ~= 'W';\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbdi478zh.d(81): unittest failure

    ----------------

    ??:? _d_unittestp [0x42835d]

    ??:? void tmpbdi478zh.__unittest_L77_C1() [0x427efe]

    ??:? void tmpbdi478zh.__modtest() [0x4280dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cce7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bbf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430559]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbcd]

    ??:? runModuleUnitTests [0x42cabd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbhjovy8.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpzbhjovy8.d(28): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbhjovy8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isUpper(c))\n        {\n            result ~= toLower(c);\n        }\n \
    \       else if(isLower(c))\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9798sq38.d(22): Error: undefined identifier `isUpper`

    /tmp/tmp9798sq38.d(24): Error: undefined identifier `toLower`

    /tmp/tmp9798sq38.d(26): Error: undefined identifier `isLower`

    /tmp/tmp9798sq38.d(28): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9798sq38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19ix8bi2.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19ix8bi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8j7ob_8e.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp8j7ob_8e.d(24): Error: undefined identifier `isupper`

    /tmp/tmp8j7ob_8e.d(26): Error: undefined identifier `tolower`

    /tmp/tmp8j7ob_8e.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8j7ob_8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bt2u0yy.d(43): Error: undefined identifier `toUpper`

    /tmp/tmp5bt2u0yy.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bt2u0yy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyn01h2y.d(24): Error: undefined identifier `toupper`

    /tmp/tmpzyn01h2y.d(28): Error: undefined identifier `tolower`

    /tmp/tmpzyn01h2y.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyn01h2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toupper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= tolower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59dtp8s2.d(43): Error: undefined identifier `toupper`

    /tmp/tmp59dtp8s2.d(45): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59dtp8s2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if (c == 'a')\n            result ~= 'c';\n        else if (c == 'e')\n  \
    \          result ~= 'g';\n        else if (c == 'i')\n            result ~= 'k';\n\
    \        else if (c == 'o')\n            result ~= 'q';\n        else if (c ==\
    \ 'u')\n            result ~= 'w';\n        else if (c == 'A')\n            result\
    \ ~= 'C';\n        else if (c == 'E')\n            result ~= 'G';\n        else\
    \ if (c == 'I')\n            result ~= 'K';\n        else if (c == 'O')\n    \
    \        result ~= 'Q';\n        else if (c == 'U')\n            result ~= 'W';\n\
    \        else if (c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n \
    \       else if (c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n  \
    \      else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7xpm2rq.d(43): Error: undefined identifier `toUpper`

    /tmp/tmpk7xpm2rq.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7xpm2rq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8j7ob_8e.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp8j7ob_8e.d(24): Error: undefined identifier `isupper`

    /tmp/tmp8j7ob_8e.d(26): Error: undefined identifier `tolower`

    /tmp/tmp8j7ob_8e.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8j7ob_8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco2d3fj.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco2d3fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0_83oj2.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpt0_83oj2.d(24): Error: undefined identifier `isupper`

    /tmp/tmpt0_83oj2.d(26): Error: undefined identifier `tolower`

    /tmp/tmpt0_83oj2.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0_83oj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj8lyyyjs.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpj8lyyyjs.d(24): Error: undefined identifier `isupper`

    /tmp/tmpj8lyyyjs.d(26): Error: undefined identifier `tolower`

    /tmp/tmpj8lyyyjs.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8lyyyjs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmzstxb1.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmzstxb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c - 'A' + 'a';\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprchqu1vz.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmprchqu1vz.__unittest_L37_C1() [0x427c62]

    ??:? void tmprchqu1vz.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    for (int i = 0; i < message.length; i++)\n    {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z')\n        {\n            result\
    \ ~= toupper(message[i]);\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z')\n        {\n            result ~= tolower(message[i]);\n        }\n\
    \        else\n        {\n            result ~= message[i];\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptkhxq_b7.d(24): Error: undefined identifier `toupper`

    /tmp/tmptkhxq_b7.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptkhxq_b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= c + 2;\n            }\n            else\n            {\n\
    \                if(c == 'W')\n                    result ~= 'A';\n          \
    \      else if(c == 'X')\n                    result ~= 'B';\n               \
    \ else if(c == 'Y')\n                    result ~= 'C';\n                else\
    \ if(c == 'Z')\n                    result ~= 'D';\n                else\n   \
    \                 result ~= c + 2;\n            }\n        }\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc90wi_ag.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpc90wi_ag.d(24): Error: undefined identifier `islower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc90wi_ag.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        encodedMessage ~= c;\n    }\n    return encodedMessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppp__72e.d(24): Error: undefined identifier `toupper`

    /tmp/tmpppp__72e.d(28): Error: undefined identifier `tolower`

    /tmp/tmpppp__72e.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppp__72e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzvb1wdis.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42804d]

    ??:? void tmpzvb1wdis.__unittest_L37_C1() [0x427bf2]

    ??:? void tmpzvb1wdis.__modtest() [0x427dd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430478]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]

    ??:? runModuleUnitTests [0x42c4b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n    \
    \            c = toUpper(c);\n            }\n            else\n            {\n\
    \                c = toLower(c);\n            }\n            if(c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n               \
    \ c = c + 2;\n            }\n            else if(c == 'Y')\n            {\n  \
    \              c = 'A';\n            }\n            else if(c == 'Z')\n      \
    \      {\n                c = 'B';\n            }\n            else\n        \
    \    {\n                c = c + 1;\n            }\n        }\n        result ~=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0h1zyfm8.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmp0h1zyfm8.d(24): Error: undefined identifier `isLower`

    /tmp/tmp0h1zyfm8.d(26): Error: undefined identifier `toUpper`

    /tmp/tmp0h1zyfm8.d(30): Error: undefined identifier `toLower`

    /tmp/tmp0h1zyfm8.d(34): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp0h1zyfm8.d(46): Error: cannot implicitly convert expression `cast(int)c
    + 1` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h1zyfm8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n   \
    \             c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n        encoded ~= c;\n\
    \    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoetny2tb.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpoetny2tb.d(24): Error: undefined identifier `isupper`

    /tmp/tmpoetny2tb.d(26): Error: undefined identifier `tolower`

    /tmp/tmpoetny2tb.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoetny2tb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1bm4sax.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpv1bm4sax.d(24): Error: undefined identifier `isupper`

    /tmp/tmpv1bm4sax.d(26): Error: undefined identifier `tolower`

    /tmp/tmpv1bm4sax.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1bm4sax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19ix8bi2.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19ix8bi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1bm4sax.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpv1bm4sax.d(24): Error: undefined identifier `isupper`

    /tmp/tmpv1bm4sax.d(26): Error: undefined identifier `tolower`

    /tmp/tmpv1bm4sax.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1bm4sax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5pr24fc.d(24): Error: undefined identifier `toupper`

    /tmp/tmpu5pr24fc.d(28): Error: undefined identifier `tolower`

    /tmp/tmpu5pr24fc.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5pr24fc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c - 'A' + 'a');\n        }\n        else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result\
    \ ~= (char)(c + 2);\n        }\n        else if (c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n        {\n            result ~= (char)(c + 2);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv80o53jy.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmpv80o53jy.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    /tmp/tmpv80o53jy.d(32): Error: C style cast illegal, use `cast(char)(c + 2)`

    /tmp/tmpv80o53jy.d(36): Error: C style cast illegal, use `cast(char)(c + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv80o53jy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19ix8bi2.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp19ix8bi2.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19ix8bi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n        {\n            c = c + 2;\n            if(c > 'z')\n \
    \           {\n                c = c - 'z' + 'a' - 1;\n            }\n       \
    \ }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            c = c + 2;\n            if(c > 'Z')\n            {\n \
    \               c = c - 'Z' + 'A' - 1;\n            }\n        }\n        encoded\
    \ ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi0qplnf4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpi0qplnf4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpi0qplnf4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpi0qplnf4.d(35): Error: cannot implicitly convert expression `cast(int)c
    - 122 + 97 - 1` of type `int` to `char`

    /tmp/tmpi0qplnf4.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpi0qplnf4.d(43): Error: cannot implicitly convert expression `cast(int)c
    - 90 + 65 - 1` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0qplnf4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'A':\n\
    \                c = 'C';\n                break;\n            case 'E':\n   \
    \             c = 'G';\n                break;\n            case 'I':\n      \
    \          c = 'K';\n                break;\n            case 'O':\n         \
    \       c = 'Q';\n                break;\n            case 'U':\n            \
    \    c = 'S';\n                break;\n            case 'a':\n               \
    \ c = 'c';\n                break;\n            case 'e':\n                c =\
    \ 'g';\n                break;\n            case 'i':\n                c = 'k';\n\
    \                break;\n            case 'o':\n                c = 'q';\n   \
    \             break;\n            case 'u':\n                c = 's';\n      \
    \          break;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl0mlsflu.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpl0mlsflu.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpl0mlsflu.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0mlsflu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(isAlpha(c))\
    \ \n        {\n            if(isUpper(c)) \n            {\n                c =\
    \ toLower(c);\n            }\n            else \n            {\n             \
    \   c = toUpper(c);\n            }\n            if(c == 'a') \n            {\n\
    \                c = 'c';\n            }\n            else if(c == 'e') \n   \
    \         {\n                c = 'g';\n            }\n            else if(c ==\
    \ 'i') \n            {\n                c = 'k';\n            }\n            else\
    \ if(c == 'o') \n            {\n                c = 'q';\n            }\n    \
    \        else if(c == 'u') \n            {\n                c = 'y';\n       \
    \     }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqcc0g4j1.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmpqcc0g4j1.d(24): Error: undefined identifier `isUpper`

    /tmp/tmpqcc0g4j1.d(26): Error: undefined identifier `toLower`

    /tmp/tmpqcc0g4j1.d(30): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqcc0g4j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoglyfawv.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpoglyfawv.d(24): Error: undefined identifier `isupper`

    /tmp/tmpoglyfawv.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoglyfawv.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoglyfawv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1bm4sax.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpv1bm4sax.d(24): Error: undefined identifier `isupper`

    /tmp/tmpv1bm4sax.d(26): Error: undefined identifier `tolower`

    /tmp/tmpv1bm4sax.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1bm4sax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               c = tolower(c);\n            } \n            else \n         \
    \   {\n                c = toupper(c);\n            }\n            switch(c) \n\
    \            {\n                case 'a':\n                    c = 'c';\n    \
    \                break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n            }\n      \
    \  }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q9q0zrb.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp6q9q0zrb.d(24): Error: undefined identifier `isupper`

    /tmp/tmp6q9q0zrb.d(26): Error: undefined identifier `tolower`

    /tmp/tmp6q9q0zrb.d(30): Error: undefined identifier `toupper`

    /tmp/tmp6q9q0zrb.d(32): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q9q0zrb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n  \
    \      }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            result ~= (c + 2);\n        }\n        else\n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn9lwh44d.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x42811d]

    ??:? void tmpn9lwh44d.__unittest_L45_C1() [0x427cc2]

    ??:? void tmpn9lwh44d.__modtest() [0x427ea0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42caa7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b98d]

    ??:? runModuleUnitTests [0x42c87d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42856c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= char(c + 2);\n            }\n            else\n       \
    \     {\n                if(c == 'W')\n                    result ~= 'A';\n  \
    \              else if(c == 'X')\n                    result ~= 'B';\n       \
    \         else if(c == 'Y')\n                    result ~= 'C';\n            \
    \    else if(c == 'Z')\n                    result ~= 'D';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1npql8ww.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp1npql8ww.d(24): Error: undefined identifier `islower`

    /tmp/tmp1npql8ww.d(35): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp1npql8ww.d(48): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1npql8ww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c.isAlpha)\n        {\n            if(c.isUpper)\n            {\n      \
    \          c = c.toLower;\n            }\n            else\n            {\n  \
    \              c = c.toUpper;\n            }\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n                c =\
    \ c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpegqkw42h.d(22): Error: no property `isAlpha` for type `char`

    /tmp/tmpegqkw42h.d(24): Error: no property `isUpper` for type `char`

    /tmp/tmpegqkw42h.d(26): Error: no property `toLower` for type `char`

    /tmp/tmpegqkw42h.d(30): Error: no property `toUpper` for type `char`

    /tmp/tmpegqkw42h.d(34): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegqkw42h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66gz9cxw.d(24): Error: undefined identifier `toupper`

    /tmp/tmp66gz9cxw.d(28): Error: undefined identifier `tolower`

    /tmp/tmp66gz9cxw.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66gz9cxw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else if(c == 'a')\n        {\n            c = 'c';\n     \
    \   }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n\
    \        else if(c == 'i')\n        {\n            c = 'k';\n        }\n     \
    \   else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else\
    \ if(c == 'u')\n        {\n            c = 'y';\n        }\n        else if(c\
    \ == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n\
    \        {\n            c = 'G';\n        }\n        else if(c == 'I')\n     \
    \   {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n\
    \            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n     \
    \       c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpda_sg7ps.d(24): Error: undefined identifier `toupper`

    /tmp/tmpda_sg7ps.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda_sg7ps.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1bm4sax.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpv1bm4sax.d(24): Error: undefined identifier `isupper`

    /tmp/tmpv1bm4sax.d(26): Error: undefined identifier `tolower`

    /tmp/tmpv1bm4sax.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1bm4sax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'A':\n\
    \                c = 'C';\n                break;\n            case 'E':\n   \
    \             c = 'G';\n                break;\n            case 'I':\n      \
    \          c = 'K';\n                break;\n            case 'O':\n         \
    \       c = 'Q';\n                break;\n            case 'U':\n            \
    \    c = 'S';\n                break;\n            case 'a':\n               \
    \ c = 'c';\n                break;\n            case 'e':\n                c =\
    \ 'g';\n                break;\n            case 'i':\n                c = 'k';\n\
    \                break;\n            case 'o':\n                c = 'q';\n   \
    \             break;\n            case 'u':\n                c = 's';\n      \
    \          break;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl0mlsflu.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpl0mlsflu.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpl0mlsflu.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0mlsflu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == ' ')\n        {\n            result ~= ' ';\n            continue;\n\
    \        }\n        if(c == 'z')\n        {\n            result ~= 'B';\n    \
    \        continue;\n        }\n        if(c == 'Z')\n        {\n            result\
    \ ~= 'b';\n            continue;\n        }\n        if(c == 'y')\n        {\n\
    \            result ~= 'A';\n            continue;\n        }\n        if(c ==\
    \ 'Y')\n        {\n            result ~= 'a';\n            continue;\n       \
    \ }\n        if(c == 'x')\n        {\n            result ~= '@';\n           \
    \ continue;\n        }\n        if(c == 'X')\n        {\n            result ~=\
    \ '`';\n            continue;\n        }\n        if(c == 'w')\n        {\n  \
    \          result ~= '?';\n            continue;\n        }\n        if(c == 'W')\n\
    \        {\n            result ~= '?';\n            continue;\n        }\n   \
    \     if(c == 'v')\n        {\n            result ~= '>';\n            continue;\n\
    \        }\n        if(c == 'V')\n        {\n            result ~= '>';\n    \
    \        continue;\n        }\n        if(c == 'u')\n        {\n            result\
    \ ~= '9';\n            continue;\n        }\n        if(c == 'U')\n        {\n\
    \            result ~= '9';\n            continue;\n        }\n        if(c ==\
    \ 't')\n        {\n            result ~= '8';\n            continue;\n       \
    \ }\n        if(c == 'T')\n        {\n            result ~= '8';\n           \
    \ continue;\n        }\n        if(c == 's')\n        {\n            result ~=\
    \ '7';\n            continue;\n        }\n        if(c == 'S')\n        {\n  \
    \          result ~= '7';\n            continue;\n        }\n        if(c == 'r')\n\
    \        {\n            result ~= '6';\n            continue;\n        }\n   \
    \     if(\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi7gry9yi.d(113): Error: expression expected, not `unittest`

    /tmp/tmpi7gry9yi.d(114): Error: found `{` when expecting `)`

    /tmp/tmpi7gry9yi.d(123): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7gry9yi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5l0d62t.d(24): Error: undefined identifier `toupper`

    /tmp/tmpk5l0d62t.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5l0d62t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message) {\n        if(isAlpha(c))\
    \ {\n            if(isUpper(c)) {\n                c = toLower(c);\n         \
    \   } else {\n                c = toUpper(c);\n            }\n            if(c\
    \ == 'a') {\n                c = 'c';\n            } else if(c == 'e') {\n   \
    \             c = 'g';\n            } else if(c == 'i') {\n                c =\
    \ 'k';\n            } else if(c == 'o') {\n                c = 'q';\n        \
    \    } else if(c == 'u') {\n                c = 'y';\n            }\n        }\n\
    \        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqe70vht.d(21): Error: undefined identifier `isAlpha`

    /tmp/tmplqe70vht.d(22): Error: undefined identifier `isUpper`

    /tmp/tmplqe70vht.d(23): Error: undefined identifier `toLower`

    /tmp/tmplqe70vht.d(25): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqe70vht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4moc4_aa.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmp4moc4_aa.__unittest_L37_C1() [0x427c62]

    ??:? void tmp4moc4_aa.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else if(c == 'a')\n        {\n            c = 'c';\n     \
    \   }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n\
    \        else if(c == 'i')\n        {\n            c = 'k';\n        }\n     \
    \   else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else\
    \ if(c == 'u')\n        {\n            c = 'y';\n        }\n        else if(c\
    \ == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n\
    \        {\n            c = 'G';\n        }\n        else if(c == 'I')\n     \
    \   {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n\
    \            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n     \
    \       c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpda_sg7ps.d(24): Error: undefined identifier `toupper`

    /tmp/tmpda_sg7ps.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda_sg7ps.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2lova9pb.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmp2lova9pb.__unittest_L37_C1() [0x427c62]

    ??:? void tmp2lova9pb.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzvb1wdis.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42804d]

    ??:? void tmpzvb1wdis.__unittest_L37_C1() [0x427bf2]

    ??:? void tmpzvb1wdis.__modtest() [0x427dd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430478]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]

    ??:? runModuleUnitTests [0x42c4b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphfng5hm1.d(24): Error: cannot modify `immutable` expression `c`

    /tmp/tmphfng5hm1.d(28): Error: cannot modify `immutable` expression `c`

    /tmp/tmphfng5hm1.d(32): Error: cannot modify `immutable` expression `c`

    /tmp/tmphfng5hm1.d(36): Error: cannot modify `immutable` expression `c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphfng5hm1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyn01h2y.d(24): Error: undefined identifier `toupper`

    /tmp/tmpzyn01h2y.d(28): Error: undefined identifier `tolower`

    /tmp/tmpzyn01h2y.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyn01h2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c + ('A'\
    \ - 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c + ('a' - 'A'));\n        }\n        else\n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35hlaeax.d(24): Error: C style cast illegal, use `cast(char)(c
    + (''A'' - ''a''))`

    /tmp/tmp35hlaeax.d(28): Error: C style cast illegal, use `cast(char)(c + (''a''
    - ''A''))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35hlaeax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n   \
    \     }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n\
    \        else if(c == 'e')\n        {\n            c = 'g';\n        }\n     \
    \   else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else\
    \ if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c\
    \ == 'u')\n        {\n            c = 'y';\n        }\n        else if(c == 'A')\n\
    \        {\n            c = 'C';\n        }\n        else if(c == 'E')\n     \
    \   {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n\
    \            c = 'K';\n        }\n        else if(c == 'O')\n        {\n     \
    \       c = 'Q';\n        }\n        else if(c == 'U')\n        {\n          \
    \  c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf6s10uu.d(24): Error: undefined identifier `toupper`

    /tmp/tmpzf6s10uu.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf6s10uu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            continue;\n        }\n      \
    \  switch(c)\n        {\n            case 'A':\n                c = 'C';\n   \
    \             break;\n            case 'E':\n                c = 'G';\n      \
    \          break;\n            case 'I':\n                c = 'K';\n         \
    \       break;\n            case 'O':\n                c = 'Q';\n            \
    \    break;\n            case 'U':\n                c = 'Y';\n               \
    \ break;\n            case 'a':\n                c = 'c';\n                break;\n\
    \            case 'e':\n                c = 'g';\n                break;\n   \
    \         case 'i':\n                c = 'k';\n                break;\n      \
    \      case 'o':\n                c = 'q';\n                break;\n         \
    \   case 'u':\n                c = 'y';\n                break;\n        }\n \
    \       encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzl0w68n.d(24): Error: undefined identifier `toupper`

    /tmp/tmplzl0w68n.d(28): Error: undefined identifier `tolower`

    /tmp/tmplzl0w68n.d(34): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzl0w68n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmrzmfvbb.d(24): Error: no property `toUpper` for type `char`

    /tmp/tmpmrzmfvbb.d(28): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrzmfvbb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9481iuts.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmp9481iuts.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9481iuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0_83oj2.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpt0_83oj2.d(24): Error: undefined identifier `isupper`

    /tmp/tmpt0_83oj2.d(26): Error: undefined identifier `tolower`

    /tmp/tmpt0_83oj2.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0_83oj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmzstxb1.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmzstxb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco2d3fj.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco2d3fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bt2u0yy.d(43): Error: undefined identifier `toUpper`

    /tmp/tmp5bt2u0yy.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bt2u0yy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9481iuts.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmp9481iuts.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9481iuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n\
    \        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c - 'A' + 'a';\n        }\n        else if (c == 'a')\n        {\n      \
    \      result ~= 'c';\n        }\n        else if (c == 'e')\n        {\n    \
    \        result ~= 'g';\n        }\n        else if (c == 'i')\n        {\n  \
    \          result ~= 'k';\n        }\n        else if (c == 'o')\n        {\n\
    \            result ~= 'q';\n        }\n        else if (c == 'u')\n        {\n\
    \            result ~= 'w';\n        }\n        else if (c == 'A')\n        {\n\
    \            result ~= 'C';\n        }\n        else if (c == 'E')\n        {\n\
    \            result ~= 'G';\n        }\n        else if (c == 'I')\n        {\n\
    \            result ~= 'K';\n        }\n        else if (c == 'O')\n        {\n\
    \            result ~= 'Q';\n        }\n        else if (c == 'U')\n        {\n\
    \            result ~= 'W';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx4ste6ru.d(81): unittest failure

    ----------------

    ??:? _d_unittestp [0x42836d]

    ??:? void tmpx4ste6ru.__unittest_L77_C1() [0x427f0e]

    ??:? void tmpx4ste6ru.__modtest() [0x4280ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ccf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a8c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430569]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbdd]

    ??:? runModuleUnitTests [0x42cacd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n    \
    \            c = toUpper(c);\n            }\n            else\n            {\n\
    \                c = toLower(c);\n            }\n            if(c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n               \
    \ c = c + 2;\n            }\n            else if(c == 'Z')\n            {\n  \
    \              c = 'B';\n            }\n            else if(c == 'Y')\n      \
    \      {\n                c = 'A';\n            }\n            else\n        \
    \    {\n                c = c + 1;\n            }\n        }\n        result ~=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvnthuo1.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmpuvnthuo1.d(24): Error: undefined identifier `isLower`

    /tmp/tmpuvnthuo1.d(26): Error: undefined identifier `toUpper`

    /tmp/tmpuvnthuo1.d(30): Error: undefined identifier `toLower`

    /tmp/tmpuvnthuo1.d(34): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpuvnthuo1.d(46): Error: cannot implicitly convert expression `cast(int)c
    + 1` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvnthuo1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if (c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else if (c == 'a')\n        {\n            result ~= 'c';\n\
    \        }\n        else if (c == 'e')\n        {\n            result ~= 'g';\n\
    \        }\n        else if (c == 'i')\n        {\n            result ~= 'k';\n\
    \        }\n        else if (c == 'o')\n        {\n            result ~= 'q';\n\
    \        }\n        else if (c == 'u')\n        {\n            result ~= 'y';\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_nnogeq.d(24): Error: undefined identifier `toupper`

    /tmp/tmpw_nnogeq.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_nnogeq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyn01h2y.d(24): Error: undefined identifier `toupper`

    /tmp/tmpzyn01h2y.d(28): Error: undefined identifier `tolower`

    /tmp/tmpzyn01h2y.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyn01h2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmzstxb1.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpdmzstxb1.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmzstxb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkvpb839.d(22): Error: undefined identifier `isalpha`

    /tmp/tmprkvpb839.d(24): Error: undefined identifier `isupper`

    /tmp/tmprkvpb839.d(26): Error: undefined identifier `tolower`

    /tmp/tmprkvpb839.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkvpb839.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngbgephy.d(110): Error: found `unittest` instead of statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngbgephy.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngbgephy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4moc4_aa.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmp4moc4_aa.__unittest_L37_C1() [0x427c62]

    ??:? void tmp4moc4_aa.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]

    ??:? runModuleUnitTests [0x42c81d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphpx8639u.d(24): Error: undefined identifier `toupper`

    /tmp/tmphpx8639u.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpx8639u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66gz9cxw.d(24): Error: undefined identifier `toupper`

    /tmp/tmp66gz9cxw.d(28): Error: undefined identifier `tolower`

    /tmp/tmp66gz9cxw.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66gz9cxw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa38rrh7.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpwa38rrh7.d(24): Error: undefined identifier `isupper`

    /tmp/tmpwa38rrh7.d(26): Error: undefined identifier `tolower`

    /tmp/tmpwa38rrh7.d(30): Error: undefined identifier `toupper`

    /tmp/tmpwa38rrh7.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa38rrh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpcu6k_4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpdpcu6k_4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpdpcu6k_4.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpcu6k_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n    \
    \            c = toLower(c);\n            }\n            else\n            {\n\
    \                c = toUpper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1mlt2rdk.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmp1mlt2rdk.d(24): Error: undefined identifier `isUpper`

    /tmp/tmp1mlt2rdk.d(26): Error: undefined identifier `toLower`

    /tmp/tmp1mlt2rdk.d(30): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mlt2rdk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(islower(c))\n            {\n                c = toupper(c);\n\
    \            }\n            else\n            {\n                c = tolower(c);\n\
    \            }\n            switch(c)\n            {\n                case 'A':\n\
    \                    c = 'C';\n                    break;\n                case\
    \ 'E':\n                    c = 'G';\n                    break;\n           \
    \     case 'I':\n                    c = 'K';\n                    break;\n  \
    \              case 'O':\n                    c = 'Q';\n                    break;\n\
    \                case 'U':\n                    c = 'S';\n                   \
    \ break;\n                case 'Y':\n                    c = 'A';\n          \
    \          break;\n                case 'C':\n                    c = 'E';\n \
    \                   break;\n                case 'G':\n                    c =\
    \ 'I';\n                    break;\n                case 'K':\n              \
    \      c = 'O';\n                    break;\n                case 'Q':\n     \
    \               c = 'U';\n                    break;\n                case 'S':\n\
    \                    c = 'Y';\n                    break;\n                case\
    \ 'a':\n                    c = 'c';\n                    break;\n           \
    \     case 'e':\n                    c = 'g';\n                    break;\n  \
    \              case 'i':\n                    c = 'k';\n                    break;\n\
    \                case 'o':\n                    c = 'q';\n                   \
    \ break;\n                case 'u':\n                    c = 's';\n          \
    \          break;\n                case 'y':\n                    c = 'a';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'o';\n                    break;\n                case 'q':\n\
    \                    c = 'u';\n                    break;\n                case\
    \ 's':\n                    c = 'y';\n                    break;\n           \
    \ }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk69amdmv.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpk69amdmv.d(24): Error: undefined identifier `islower`

    /tmp/tmpk69amdmv.d(26): Error: undefined identifier `toupper`

    /tmp/tmpk69amdmv.d(30): Error: undefined identifier `tolower`

    /tmp/tmpk69amdmv.d(32): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk69amdmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5rs74rzz.d(24): Error: undefined identifier `toupper`

    /tmp/tmp5rs74rzz.d(28): Error: undefined identifier `tolower`

    /tmp/tmp5rs74rzz.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rs74rzz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bt2u0yy.d(43): Error: undefined identifier `toUpper`

    /tmp/tmp5bt2u0yy.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bt2u0yy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toUpper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    result ~= 'C';\n                break;\n            case 'E':\n         \
    \       result ~= 'G';\n                break;\n            case 'I':\n      \
    \          result ~= 'K';\n                break;\n            case 'O':\n   \
    \             result ~= 'Q';\n                break;\n            case 'U':\n\
    \                result ~= 'S';\n                break;\n            case 'a':\n\
    \                result ~= 'c';\n                break;\n            case 'e':\n\
    \                result ~= 'g';\n                break;\n            case 'i':\n\
    \                result ~= 'k';\n                break;\n            case 'o':\n\
    \                result ~= 'q';\n                break;\n            case 'u':\n\
    \                result ~= 's';\n                break;\n            default:\n\
    \                result ~= c;\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa795tkl0.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpa795tkl0.d(28): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa795tkl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsm557cfi.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpsm557cfi.d(24): Error: undefined identifier `isupper`

    /tmp/tmpsm557cfi.d(26): Error: undefined identifier `tolower`

    /tmp/tmpsm557cfi.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsm557cfi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkvpb839.d(22): Error: undefined identifier `isalpha`

    /tmp/tmprkvpb839.d(24): Error: undefined identifier `isupper`

    /tmp/tmprkvpb839.d(26): Error: undefined identifier `tolower`

    /tmp/tmprkvpb839.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkvpb839.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO: implement\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi7wonlvs.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpi7wonlvs.__unittest_L22_C1() [0x427ab2]

    ??:? void tmpi7wonlvs.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ibheepu.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp1ibheepu.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ibheepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n   \
    \     }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc_fu7k1v.d(24): Error: undefined identifier `toupper`

    /tmp/tmpc_fu7k1v.d(28): Error: undefined identifier `tolower`

    /tmp/tmpc_fu7k1v.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc_fu7k1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvr6wepal.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428055]

    ??:? void tmpvr6wepal.__unittest_L37_C1() [0x427bf6]

    ??:? void tmpvr6wepal.__modtest() [0x427dd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430480]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]

    ??:? runModuleUnitTests [0x42c4c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= c.toUpper;\n       \
    \ else if(c >= 'A' && c <= 'Z')\n            result ~= c.toLower;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95iiwu90.d(43): Error: no property `toUpper` for type `char`

    /tmp/tmp95iiwu90.d(45): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95iiwu90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgkhup39n.d(24): Error: undefined identifier `toupper`

    /tmp/tmpgkhup39n.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkhup39n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c =\
    \ c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            c = c + 2;\n        }\n        encodedMessage ~= c;\n    }\n\
    \    return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusxx4n1h.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpusxx4n1h.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpusxx4n1h.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpusxx4n1h.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusxx4n1h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1bm4sax.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpv1bm4sax.d(24): Error: undefined identifier `isupper`

    /tmp/tmpv1bm4sax.d(26): Error: undefined identifier `tolower`

    /tmp/tmpv1bm4sax.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1bm4sax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco2d3fj.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpoco2d3fj.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco2d3fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaww1_qvl.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmpaww1_qvl.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaww1_qvl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bt2u0yy.d(43): Error: undefined identifier `toUpper`

    /tmp/tmp5bt2u0yy.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bt2u0yy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbhjovy8.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpzbhjovy8.d(28): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbhjovy8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5znl1w9.d(24): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmpe5znl1w9.d(28): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5znl1w9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa38rrh7.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpwa38rrh7.d(24): Error: undefined identifier `isupper`

    /tmp/tmpwa38rrh7.d(26): Error: undefined identifier `tolower`

    /tmp/tmpwa38rrh7.d(30): Error: undefined identifier `toupper`

    /tmp/tmpwa38rrh7.d(58): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa38rrh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            }\n            else \n    \
    \        {\n                result ~= toupper(c);\n            }\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqj4pgh5.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpxqj4pgh5.d(24): Error: undefined identifier `isupper`

    /tmp/tmpxqj4pgh5.d(26): Error: undefined identifier `tolower`

    /tmp/tmpxqj4pgh5.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqj4pgh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               c = tolower(c);\n            }\n            else \n          \
    \  {\n                c = toupper(c);\n            }\n            if(c == 'a')\
    \ \n            {\n                c = 'c';\n            }\n            else if(c\
    \ == 'e') \n            {\n                c = 'g';\n            }\n         \
    \   else if(c == 'i') \n            {\n                c = 'k';\n            }\n\
    \            else if(c == 'o') \n            {\n                c = 'q';\n   \
    \         }\n            else if(c == 'u') \n            {\n                c\
    \ = 'y';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo9tanezw.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpo9tanezw.d(24): Error: undefined identifier `isupper`

    /tmp/tmpo9tanezw.d(26): Error: undefined identifier `tolower`

    /tmp/tmpo9tanezw.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9tanezw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    foreach(char\
    \ c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n          \
    \  c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n    \
    \    {\n            c = c - 'A' + 'a';\n        }\n        if(vowels.canFind(c))\n\
    \        {\n            int index = vowels.indexOf(c);\n            index = (index\
    \ + 2) % 5;\n            c = vowels[index];\n        }\n        result ~= c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxkr2v34q.d(25): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpxkr2v34q.d(29): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpxkr2v34q.d(31): Error: no property `canFind` for type `string`

    /tmp/tmpxkr2v34q.d(33): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkr2v34q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n   \
    \     }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n    \
    \    result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa38vgbe6.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmpa38vgbe6.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa38vgbe6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 32);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (char)(c + 32);\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoitnptl9.d(24): Error: C style cast illegal, use `cast(char)(c
    - 32)`

    /tmp/tmpoitnptl9.d(28): Error: C style cast illegal, use `cast(char)(c + 32)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoitnptl9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23j42eg4.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp23j42eg4.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp23j42eg4.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp23j42eg4.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23j42eg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'Y')\n        {\n            c = 'A';\n        }\n        else if(c == 'Z')\n\
    \        {\n            c = 'B';\n        }\n        result ~= c;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rme69bm.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp7rme69bm.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp7rme69bm.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rme69bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppov47s_e.d(24): Error: undefined identifier `toupper`

    /tmp/tmppov47s_e.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppov47s_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'Y')\n        {\n            c = 'A';\n        }\n        else if(c == 'Z')\n\
    \        {\n            c = 'B';\n        }\n        result ~= c;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rme69bm.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    /tmp/tmp7rme69bm.d(28): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmp7rme69bm.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rme69bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdl6jz13e.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpdl6jz13e.d(24): Error: undefined identifier `isupper`

    /tmp/tmpdl6jz13e.d(31): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpdl6jz13e.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdl6jz13e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphpx8639u.d(24): Error: undefined identifier `toupper`

    /tmp/tmphpx8639u.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpx8639u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzvb1wdis.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42804d]

    ??:? void tmpzvb1wdis.__unittest_L37_C1() [0x427bf2]

    ??:? void tmpzvb1wdis.__modtest() [0x427dd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430478]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]

    ??:? runModuleUnitTests [0x42c4b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
