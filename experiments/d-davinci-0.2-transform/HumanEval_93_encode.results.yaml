language: d
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmhrzf5e.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpcmhrzf5e.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpcmhrzf5e.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpcmhrzf5e.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmhrzf5e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Your code here\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_kujtnyi.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f0d]\n??:? void tmp_kujtnyi.__unittest_L22_C1() [0x427ab2]\n??:?
    void tmp_kujtnyi.__modtest() [0x427c90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43008c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb69]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa9d]\n??:? runModuleUnitTests [0x42b98d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282e3]\n??:? _d_run_main [0x42824e]\n??:? main [0x427ca3]\n??:?
    __libc_start_main [0xcbca554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               if(c == 'Z') \n                {\n                    c = 'B';\n\
    \                }\n                else if(c == 'Y') \n                {\n  \
    \                  c = 'A';\n                }\n                else \n      \
    \          {\n                    c += 2;\n                }\n            }\n\
    \            else \n            {\n                if(c == 'z') \n           \
    \     {\n                    c = 'b';\n                }\n                else\
    \ if(c == 'y') \n                {\n                    c = 'a';\n           \
    \     }\n                else \n                {\n                    c += 2;\n\
    \                }\n            }\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') \n            {\n                c = toupper(c);\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvah2nei8.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpvah2nei8.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpvah2nei8.d(56): Error: undefined
    identifier `toupper`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvah2nei8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu7q71ktk.d(24): Error: undefined identifier `toUpper`\n/tmp/tmpu7q71ktk.d(28):
    Error: undefined identifier `toLower`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu7q71ktk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(c\
    \ >= 'a' && c <= 'z') \n        {\n            result ~= toUpper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~=\
    \ toLower(c);\n        }\n        else if(c == 'a') \n        {\n            result\
    \ ~= 'c';\n        }\n        else if(c == 'e') \n        {\n            result\
    \ ~= 'g';\n        }\n        else if(c == 'i') \n        {\n            result\
    \ ~= 'k';\n        }\n        else if(c == 'o') \n        {\n            result\
    \ ~= 'q';\n        }\n        else if(c == 'u') \n        {\n            result\
    \ ~= 'y';\n        }\n        else \n        {\n            result ~= c;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_v7aldv.d(24): Error: undefined identifier `toUpper`\n/tmp/tmpk_v7aldv.d(28):
    Error: undefined identifier `toLower`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk_v7aldv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt04030r3.d(24): Error: C style cast illegal, use `cast(char)(c
    - \''a\'' + \''A\'')`\n/tmp/tmpt04030r3.d(28): Error: C style cast illegal, use
    `cast(char)(c - \''A\'' + \''a\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt04030r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              if (c == 'Z')\n                    result ~= 'b';\n           \
    \     else if (c == 'Y')\n                    result ~= 'a';\n               \
    \ else\n                    result ~= char(c + 2);\n            }\n          \
    \  else\n            {\n                if (c == 'z')\n                    result\
    \ ~= 'b';\n                else if (c == 'y')\n                    result ~= 'a';\n\
    \                else\n                    result ~= char(c + 2);\n          \
    \  }\n        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_vgbnje.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpp_vgbnje.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpp_vgbnje.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpp_vgbnje.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_vgbnje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph7h_tuq5.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmph7h_tuq5.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7h_tuq5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    encoded = encoded.replace(\"a\", \"c\");\n    encoded =\
    \ encoded.replace(\"e\", \"g\");\n    encoded = encoded.replace(\"i\", \"k\");\n\
    \    encoded = encoded.replace(\"o\", \"q\");\n    encoded = encoded.replace(\"\
    u\", \"w\");\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8s16h2va.d(24): Error: undefined identifier `toupper`\n/tmp/tmp8s16h2va.d(28):
    Error: undefined identifier `tolower`\n/tmp/tmp8s16h2va.d(35): Error: no property
    `replace` for type `string`\n/tmp/tmp8s16h2va.d(36): Error: no property `replace`
    for type `string`\n/tmp/tmp8s16h2va.d(37): Error: no property `replace` for type
    `string`\n/tmp/tmp8s16h2va.d(38): Error: no property `replace` for type `string`\n/tmp/tmp8s16h2va.d(39):
    Error: no property `replace` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8s16h2va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphgync_8z.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmphgync_8z.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmphgync_8z.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmphgync_8z.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgync_8z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07rhv2ym.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp07rhv2ym.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp07rhv2ym.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp07rhv2ym.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07rhv2ym.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpben6ieux.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpben6ieux.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpben6ieux.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpben6ieux.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpben6ieux.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbxa5sqku.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42804d]\n??:? void tmpbxa5sqku.__unittest_L37_C1() [0x427bf2]\n??:?
    void tmpbxa5sqku.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428423]\n??:? _d_run_main [0x42838e]\n??:? main [0x427de3]\n??:?
    __libc_start_main [0x52449554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzx7lxwj.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpkzx7lxwj.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpkzx7lxwj.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpkzx7lxwj.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzx7lxwj.d", "-I/tmp"]\n'''
  stdout: b''
