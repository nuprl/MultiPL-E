language: d
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmhrzf5e.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpcmhrzf5e.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpcmhrzf5e.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpcmhrzf5e.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmhrzf5e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Your code here\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_kujtnyi.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f0d]\n??:? void tmp_kujtnyi.__unittest_L22_C1() [0x427ab2]\n??:?
    void tmp_kujtnyi.__modtest() [0x427c90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43008c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb69]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa9d]\n??:? runModuleUnitTests [0x42b98d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282e3]\n??:? _d_run_main [0x42824e]\n??:? main [0x427ca3]\n??:?
    __libc_start_main [0xcbca554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               if(c == 'Z') \n                {\n                    c = 'B';\n\
    \                }\n                else if(c == 'Y') \n                {\n  \
    \                  c = 'A';\n                }\n                else \n      \
    \          {\n                    c += 2;\n                }\n            }\n\
    \            else \n            {\n                if(c == 'z') \n           \
    \     {\n                    c = 'b';\n                }\n                else\
    \ if(c == 'y') \n                {\n                    c = 'a';\n           \
    \     }\n                else \n                {\n                    c += 2;\n\
    \                }\n            }\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') \n            {\n                c = toupper(c);\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvah2nei8.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpvah2nei8.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpvah2nei8.d(56): Error: undefined
    identifier `toupper`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvah2nei8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu7q71ktk.d(24): Error: undefined identifier `toUpper`\n/tmp/tmpu7q71ktk.d(28):
    Error: undefined identifier `toLower`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu7q71ktk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(c\
    \ >= 'a' && c <= 'z') \n        {\n            result ~= toUpper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~=\
    \ toLower(c);\n        }\n        else if(c == 'a') \n        {\n            result\
    \ ~= 'c';\n        }\n        else if(c == 'e') \n        {\n            result\
    \ ~= 'g';\n        }\n        else if(c == 'i') \n        {\n            result\
    \ ~= 'k';\n        }\n        else if(c == 'o') \n        {\n            result\
    \ ~= 'q';\n        }\n        else if(c == 'u') \n        {\n            result\
    \ ~= 'y';\n        }\n        else \n        {\n            result ~= c;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_v7aldv.d(24): Error: undefined identifier `toUpper`\n/tmp/tmpk_v7aldv.d(28):
    Error: undefined identifier `toLower`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk_v7aldv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt04030r3.d(24): Error: C style cast illegal, use `cast(char)(c
    - \''a\'' + \''A\'')`\n/tmp/tmpt04030r3.d(28): Error: C style cast illegal, use
    `cast(char)(c - \''A\'' + \''a\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt04030r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              if (c == 'Z')\n                    result ~= 'b';\n           \
    \     else if (c == 'Y')\n                    result ~= 'a';\n               \
    \ else\n                    result ~= char(c + 2);\n            }\n          \
    \  else\n            {\n                if (c == 'z')\n                    result\
    \ ~= 'b';\n                else if (c == 'y')\n                    result ~= 'a';\n\
    \                else\n                    result ~= char(c + 2);\n          \
    \  }\n        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_vgbnje.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpp_vgbnje.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpp_vgbnje.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpp_vgbnje.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_vgbnje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph7h_tuq5.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmph7h_tuq5.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7h_tuq5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    encoded = encoded.replace(\"a\", \"c\");\n    encoded =\
    \ encoded.replace(\"e\", \"g\");\n    encoded = encoded.replace(\"i\", \"k\");\n\
    \    encoded = encoded.replace(\"o\", \"q\");\n    encoded = encoded.replace(\"\
    u\", \"w\");\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8s16h2va.d(24): Error: undefined identifier `toupper`\n/tmp/tmp8s16h2va.d(28):
    Error: undefined identifier `tolower`\n/tmp/tmp8s16h2va.d(35): Error: no property
    `replace` for type `string`\n/tmp/tmp8s16h2va.d(36): Error: no property `replace`
    for type `string`\n/tmp/tmp8s16h2va.d(37): Error: no property `replace` for type
    `string`\n/tmp/tmp8s16h2va.d(38): Error: no property `replace` for type `string`\n/tmp/tmp8s16h2va.d(39):
    Error: no property `replace` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8s16h2va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphgync_8z.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmphgync_8z.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmphgync_8z.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmphgync_8z.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgync_8z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07rhv2ym.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp07rhv2ym.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp07rhv2ym.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp07rhv2ym.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07rhv2ym.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpben6ieux.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpben6ieux.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpben6ieux.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpben6ieux.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpben6ieux.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbxa5sqku.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42804d]\n??:? void tmpbxa5sqku.__unittest_L37_C1() [0x427bf2]\n??:?
    void tmpbxa5sqku.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428423]\n??:? _d_run_main [0x42838e]\n??:? main [0x427de3]\n??:?
    __libc_start_main [0x52449554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzx7lxwj.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpkzx7lxwj.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpkzx7lxwj.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpkzx7lxwj.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzx7lxwj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmbdxl8g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(c >= 'a' && c <= 'z') \n        {\n            result ~= toupper(c);\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= tolower(c);\n        } \n        else \n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4g_3gni3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlt4ezce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'B';\n                else if(c == 'Y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptfzg2z_r.d(31): Error: found \''(\'' when expecting \''.\''
    following char\n/tmp/tmptfzg2z_r.d(31): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmptfzg2z_r.d(40): Error: found \''(\'' when expecting
    \''.\'' following char\n/tmp/tmptfzg2z_r.d(40): Error: found \'')\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptfzg2z_r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt04030r3.d(24): Error: C style cast illegal, use `cast(char)(c
    - \''a\'' + \''A\'')`\n/tmp/tmpt04030r3.d(28): Error: C style cast illegal, use
    `cast(char)(c - \''A\'' + \''a\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt04030r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if (c == 'a')\n \
    \           {\n                c = 'c';\n            }\n            else if (c\
    \ == 'e')\n            {\n                c = 'g';\n            }\n          \
    \  else if (c == 'i')\n            {\n                c = 'k';\n            }\n\
    \            else if (c == 'o')\n            {\n                c = 'q';\n   \
    \         }\n            else if (c == 'u')\n            {\n                c\
    \ = 'w';\n            }\n            else if (c == 'y')\n            {\n     \
    \           c = 'a';\n            }\n            else\n            {\n       \
    \         c = c + 2;\n            }\n        }\n        result ~= c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfh0v5p1b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            }\n            else \n    \
    \        {\n                result ~= toupper(c);\n            }\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8ysg986.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmput0wretk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= (char)(c + 2);\n            }\n            else\n     \
    \       {\n                if(c == 'W')\n                    result ~= 'A';\n\
    \                else if(c == 'X')\n                    result ~= 'B';\n     \
    \           else if(c == 'Y')\n                    result ~= 'C';\n          \
    \      else if(c == 'Z')\n                    result ~= 'D';\n               \
    \ else\n                    result ~= (char)(c + 2);\n            }\n        }\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xn8cnlu.d(35): Error: C style cast illegal, use cast(char)(c
    + 2)\n/tmp/tmp4xn8cnlu.d(48): Error: C style cast illegal, use cast(char)(c +
    2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xn8cnlu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z')\n    \
    \    {\n            c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' &&\
    \ c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        switch\
    \ (c)\n        {\n            case 'A':\n            case 'a':\n             \
    \   c = 'C';\n                break;\n            case 'E':\n            case\
    \ 'e':\n                c = 'G';\n                break;\n            case 'I':\n\
    \            case 'i':\n                c = 'K';\n                break;\n   \
    \         case 'O':\n            case 'o':\n                c = 'M';\n       \
    \         break;\n            case 'U':\n            case 'u':\n             \
    \   c = 'Q';\n                break;\n        }\n        result += c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph07ltabi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c =\
    \ (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsl2j8c8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv10rw0bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsdagwbj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07rhv2ym.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp07rhv2ym.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp07rhv2ym.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp07rhv2ym.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07rhv2ym.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= tolower(c) + 2;\n            }\n            else\n            {\n\
    \                if(c == 'z')\n                    result ~= 'B';\n          \
    \      else if(c == 'y')\n                    result ~= 'A';\n               \
    \ else\n                    result ~= toupper(c) + 2;\n            }\n       \
    \ }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63tejrte.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_utar9q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv10rw0bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07rhv2ym.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp07rhv2ym.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp07rhv2ym.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp07rhv2ym.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07rhv2ym.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt04030r3.d(24): Error: C style cast illegal, use `cast(char)(c
    - \''a\'' + \''A\'')`\n/tmp/tmpt04030r3.d(28): Error: C style cast illegal, use
    `cast(char)(c - \''A\'' + \''a\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt04030r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3vozaa3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else if(c == 'a')\n        {\n          \
    \  result ~= 'c';\n        }\n        else if(c == 'e')\n        {\n         \
    \   result ~= 'g';\n        }\n        else if(c == 'i')\n        {\n        \
    \    result ~= 'k';\n        }\n        else if(c == 'o')\n        {\n       \
    \     result ~= 'q';\n        }\n        else if(c == 'u')\n        {\n      \
    \      result ~= 'y';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9z_a_e9w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n   \
    \             c = toLower(c);\n            }\n            else\n            {\n\
    \                c = toUpper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        encoded ~= c;\n    }\n    return\
    \ encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxxxq4ks.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    result ~= 'C';\n                break;\n            case 'E':\n         \
    \       result ~= 'G';\n                break;\n            case 'I':\n      \
    \          result ~= 'K';\n                break;\n            case 'O':\n   \
    \             result ~= 'Q';\n                break;\n            case 'U':\n\
    \                result ~= 'S';\n                break;\n            case 'a':\n\
    \                result ~= 'c';\n                break;\n            case 'e':\n\
    \                result ~= 'g';\n                break;\n            case 'i':\n\
    \                result ~= 'k';\n                break;\n            case 'o':\n\
    \                result ~= 'q';\n                break;\n            case 'u':\n\
    \                result ~= 's';\n                break;\n            default:\n\
    \                result ~= c;\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_4o1llt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtutdnma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= toLower(c) + 2;\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= c + 2;\n            }\n      \
    \  }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jlcwzwr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= to!char(c - 'a'\
    \ + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n     \
    \       result ~= to!char(c - 'A' + 'a');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptn3ggehd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmbdxl8g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= (char)(c + 2);\n            }\n            else\n     \
    \       {\n                if(c == 'W')\n                    result ~= 'A';\n\
    \                else if(c == 'X')\n                    result ~= 'B';\n     \
    \           else if(c == 'Y')\n                    result ~= 'C';\n          \
    \      else if(c == 'Z')\n                    result ~= 'D';\n               \
    \ else\n                    result ~= (char)(c + 2);\n            }\n        }\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xn8cnlu.d(35): Error: C style cast illegal, use cast(char)(c
    + 2)\n/tmp/tmp4xn8cnlu.d(48): Error: C style cast illegal, use cast(char)(c +
    2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xn8cnlu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isAlpha(c))\n        {\n            if (isLower(c))\n            {\n  \
    \              if (c == 'w')\n                    result ~= 'a';\n           \
    \     else if (c == 'x')\n                    result ~= 'b';\n               \
    \ else if (c == 'y')\n                    result ~= 'c';\n                else\
    \ if (c == 'z')\n                    result ~= 'd';\n                else\n  \
    \                  result ~= c + 2;\n            }\n            else\n       \
    \     {\n                if (c == 'W')\n                    result ~= 'A';\n \
    \               else if (c == 'X')\n                    result ~= 'B';\n     \
    \           else if (c == 'Y')\n                    result ~= 'C';\n         \
    \       else if (c == 'Z')\n                    result ~= 'D';\n             \
    \   else\n                    result ~= c + 2;\n            }\n        }\n   \
    \     else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mcjsz5m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5um12ra.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l_3hyp8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= tolower(c) + 2;\n            }\n            else\n            {\n\
    \                if(c == 'z')\n                    result ~= 'B';\n          \
    \      else if(c == 'y')\n                    result ~= 'A';\n               \
    \ else\n                    result ~= toupper(c) + 2;\n            }\n       \
    \ }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63tejrte.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c.isUpper)\n        {\n            c = c.toLower;\n        }\n        else\
    \ if(c.isLower)\n        {\n            c = c.toUpper;\n        }\n        if(c\
    \ == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n\
    \        {\n            c = 'g';\n        }\n        else if(c == 'i')\n     \
    \   {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n\
    \            c = 'q';\n        }\n        else if(c == 'u')\n        {\n     \
    \       c = 'y';\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjh3muuy0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbxa5sqku.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42804d]\n??:? void tmpbxa5sqku.__unittest_L37_C1() [0x427bf2]\n??:?
    void tmpbxa5sqku.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428423]\n??:? _d_run_main [0x42838e]\n??:? main [0x427de3]\n??:?
    __libc_start_main [0x52449554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else if (c == 'a')\n        {\n         \
    \   result ~= 'c';\n        }\n        else if (c == 'e')\n        {\n       \
    \     result ~= 'g';\n        }\n        else if (c == 'i')\n        {\n     \
    \       result ~= 'k';\n        }\n        else if (c == 'o')\n        {\n   \
    \         result ~= 'q';\n        }\n        else if (c == 'u')\n        {\n \
    \           result ~= 'y';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp311_yaq1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 32;\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ c + 32;\n        }\n        else if(c == 'a')\n        {\n            result\
    \ ~= 'c';\n        }\n        else if(c == 'e')\n        {\n            result\
    \ ~= 'g';\n        }\n        else if(c == 'i')\n        {\n            result\
    \ ~= 'k';\n        }\n        else if(c == 'o')\n        {\n            result\
    \ ~= 'q';\n        }\n        else if(c == 'u')\n        {\n            result\
    \ ~= 'w';\n        }\n        else if(c == 'A')\n        {\n            result\
    \ ~= 'C';\n        }\n        else if(c == 'E')\n        {\n            result\
    \ ~= 'G';\n        }\n        else if(c == 'I')\n        {\n            result\
    \ ~= 'K';\n        }\n        else if(c == 'O')\n        {\n            result\
    \ ~= 'Q';\n        }\n        else if(c == 'U')\n        {\n            result\
    \ ~= 'W';\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphn2yjn8b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv8_r7lw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isUpper(c))\n        {\n            result ~= toLower(c);\n        }\n \
    \       else if(isLower(c))\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphieei98.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpihwaiiur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmhrzf5e.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpcmhrzf5e.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpcmhrzf5e.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpcmhrzf5e.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmhrzf5e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv10rw0bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghql1i7u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toupper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= tolower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6hdne6g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if (c == 'a')\n            result ~= 'c';\n        else if (c == 'e')\n  \
    \          result ~= 'g';\n        else if (c == 'i')\n            result ~= 'k';\n\
    \        else if (c == 'o')\n            result ~= 'q';\n        else if (c ==\
    \ 'u')\n            result ~= 'w';\n        else if (c == 'A')\n            result\
    \ ~= 'C';\n        else if (c == 'E')\n            result ~= 'G';\n        else\
    \ if (c == 'I')\n            result ~= 'K';\n        else if (c == 'O')\n    \
    \        result ~= 'Q';\n        else if (c == 'U')\n            result ~= 'W';\n\
    \        else if (c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n \
    \       else if (c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n  \
    \      else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkm60i1ai.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmhrzf5e.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpcmhrzf5e.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpcmhrzf5e.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpcmhrzf5e.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmhrzf5e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd80xbjj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtutdnma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogxq9ale.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph7h_tuq5.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmph7h_tuq5.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7h_tuq5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c - 'A' + 'a';\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsgqi1u0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    for (int i = 0; i < message.length; i++)\n    {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z')\n        {\n            result\
    \ ~= toupper(message[i]);\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z')\n        {\n            result ~= tolower(message[i]);\n        }\n\
    \        else\n        {\n            result ~= message[i];\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabk_kuxu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= c + 2;\n            }\n            else\n            {\n\
    \                if(c == 'W')\n                    result ~= 'A';\n          \
    \      else if(c == 'X')\n                    result ~= 'B';\n               \
    \ else if(c == 'Y')\n                    result ~= 'C';\n                else\
    \ if(c == 'Z')\n                    result ~= 'D';\n                else\n   \
    \                 result ~= c + 2;\n            }\n        }\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl90l3p1r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        encodedMessage ~= c;\n    }\n    return encodedMessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcytbwrgy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbxa5sqku.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42804d]\n??:? void tmpbxa5sqku.__unittest_L37_C1() [0x427bf2]\n??:?
    void tmpbxa5sqku.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428423]\n??:? _d_run_main [0x42838e]\n??:? main [0x427de3]\n??:?
    __libc_start_main [0x52449554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n    \
    \            c = toUpper(c);\n            }\n            else\n            {\n\
    \                c = toLower(c);\n            }\n            if(c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n               \
    \ c = c + 2;\n            }\n            else if(c == 'Y')\n            {\n  \
    \              c = 'A';\n            }\n            else if(c == 'Z')\n      \
    \      {\n                c = 'B';\n            }\n            else\n        \
    \    {\n                c = c + 1;\n            }\n        }\n        result ~=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrngmq27.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n   \
    \             c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n        encoded ~= c;\n\
    \    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodixbg68.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3vozaa3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpihwaiiur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3vozaa3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjy4_913r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c - 'A' + 'a');\n        }\n        else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result\
    \ ~= (char)(c + 2);\n        }\n        else if (c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n        {\n            result ~= (char)(c + 2);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_j256vw.d(24): Error: C style cast illegal, use cast(char)(c
    - \''a\'' + \''A\'')\n/tmp/tmpe_j256vw.d(28): Error: C style cast illegal, use
    cast(char)(c - \''A\'' + \''a\'')\n/tmp/tmpe_j256vw.d(32): Error: C style cast
    illegal, use cast(char)(c + 2)\n/tmp/tmpe_j256vw.d(36): Error: C style cast illegal,
    use cast(char)(c + 2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_j256vw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpihwaiiur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n        {\n            c = c + 2;\n            if(c > 'z')\n \
    \           {\n                c = c - 'z' + 'a' - 1;\n            }\n       \
    \ }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            c = c + 2;\n            if(c > 'Z')\n            {\n \
    \               c = c - 'Z' + 'A' - 1;\n            }\n        }\n        encoded\
    \ ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpryult8o2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'A':\n\
    \                c = 'C';\n                break;\n            case 'E':\n   \
    \             c = 'G';\n                break;\n            case 'I':\n      \
    \          c = 'K';\n                break;\n            case 'O':\n         \
    \       c = 'Q';\n                break;\n            case 'U':\n            \
    \    c = 'S';\n                break;\n            case 'a':\n               \
    \ c = 'c';\n                break;\n            case 'e':\n                c =\
    \ 'g';\n                break;\n            case 'i':\n                c = 'k';\n\
    \                break;\n            case 'o':\n                c = 'q';\n   \
    \             break;\n            case 'u':\n                c = 's';\n      \
    \          break;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iqzmt7t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(isAlpha(c))\
    \ \n        {\n            if(isUpper(c)) \n            {\n                c =\
    \ toLower(c);\n            }\n            else \n            {\n             \
    \   c = toUpper(c);\n            }\n            if(c == 'a') \n            {\n\
    \                c = 'c';\n            }\n            else if(c == 'e') \n   \
    \         {\n                c = 'g';\n            }\n            else if(c ==\
    \ 'i') \n            {\n                c = 'k';\n            }\n            else\
    \ if(c == 'o') \n            {\n                c = 'q';\n            }\n    \
    \        else if(c == 'u') \n            {\n                c = 'y';\n       \
    \     }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyx81wc9f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07rhv2ym.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp07rhv2ym.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp07rhv2ym.d(31): Error: cannot implicitly
    convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp07rhv2ym.d(40):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07rhv2ym.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3vozaa3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               c = tolower(c);\n            } \n            else \n         \
    \   {\n                c = toupper(c);\n            }\n            switch(c) \n\
    \            {\n                case 'a':\n                    c = 'c';\n    \
    \                break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n            }\n      \
    \  }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1ghavxi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n  \
    \      }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            result ~= (c + 2);\n        }\n        else\n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5kowowk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= char(c + 2);\n            }\n            else\n       \
    \     {\n                if(c == 'W')\n                    result ~= 'A';\n  \
    \              else if(c == 'X')\n                    result ~= 'B';\n       \
    \         else if(c == 'Y')\n                    result ~= 'C';\n            \
    \    else if(c == 'Z')\n                    result ~= 'D';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzy6bres7.d(35): Error: found \''(\'' when expecting \''.\''
    following char\n/tmp/tmpzy6bres7.d(35): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpzy6bres7.d(48): Error: found \''(\'' when expecting
    \''.\'' following char\n/tmp/tmpzy6bres7.d(48): Error: found \'')\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzy6bres7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c.isAlpha)\n        {\n            if(c.isUpper)\n            {\n      \
    \          c = c.toLower;\n            }\n            else\n            {\n  \
    \              c = c.toUpper;\n            }\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n                c =\
    \ c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoynpjxwy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvfnmun_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else if(c == 'a')\n        {\n            c = 'c';\n     \
    \   }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n\
    \        else if(c == 'i')\n        {\n            c = 'k';\n        }\n     \
    \   else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else\
    \ if(c == 'u')\n        {\n            c = 'y';\n        }\n        else if(c\
    \ == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n\
    \        {\n            c = 'G';\n        }\n        else if(c == 'I')\n     \
    \   {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n\
    \            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n     \
    \       c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qdqatbj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3vozaa3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'A':\n\
    \                c = 'C';\n                break;\n            case 'E':\n   \
    \             c = 'G';\n                break;\n            case 'I':\n      \
    \          c = 'K';\n                break;\n            case 'O':\n         \
    \       c = 'Q';\n                break;\n            case 'U':\n            \
    \    c = 'S';\n                break;\n            case 'a':\n               \
    \ c = 'c';\n                break;\n            case 'e':\n                c =\
    \ 'g';\n                break;\n            case 'i':\n                c = 'k';\n\
    \                break;\n            case 'o':\n                c = 'q';\n   \
    \             break;\n            case 'u':\n                c = 's';\n      \
    \          break;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iqzmt7t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == ' ')\n        {\n            result ~= ' ';\n            continue;\n\
    \        }\n        if(c == 'z')\n        {\n            result ~= 'B';\n    \
    \        continue;\n        }\n        if(c == 'Z')\n        {\n            result\
    \ ~= 'b';\n            continue;\n        }\n        if(c == 'y')\n        {\n\
    \            result ~= 'A';\n            continue;\n        }\n        if(c ==\
    \ 'Y')\n        {\n            result ~= 'a';\n            continue;\n       \
    \ }\n        if(c == 'x')\n        {\n            result ~= '@';\n           \
    \ continue;\n        }\n        if(c == 'X')\n        {\n            result ~=\
    \ '`';\n            continue;\n        }\n        if(c == 'w')\n        {\n  \
    \          result ~= '?';\n            continue;\n        }\n        if(c == 'W')\n\
    \        {\n            result ~= '?';\n            continue;\n        }\n   \
    \     if(c == 'v')\n        {\n            result ~= '>';\n            continue;\n\
    \        }\n        if(c == 'V')\n        {\n            result ~= '>';\n    \
    \        continue;\n        }\n        if(c == 'u')\n        {\n            result\
    \ ~= '9';\n            continue;\n        }\n        if(c == 'U')\n        {\n\
    \            result ~= '9';\n            continue;\n        }\n        if(c ==\
    \ 't')\n        {\n            result ~= '8';\n            continue;\n       \
    \ }\n        if(c == 'T')\n        {\n            result ~= '8';\n           \
    \ continue;\n        }\n        if(c == 's')\n        {\n            result ~=\
    \ '7';\n            continue;\n        }\n        if(c == 'S')\n        {\n  \
    \          result ~= '7';\n            continue;\n        }\n        if(c == 'r')\n\
    \        {\n            result ~= '6';\n            continue;\n        }\n   \
    \     if(\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9qbsfp1p.d(113): Error: expression expected, not \''unittest\''\n/tmp/tmp9qbsfp1p.d(114):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmp9qbsfp1p.d(123): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp9qbsfp1p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmput0wretk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message) {\n        if(isAlpha(c))\
    \ {\n            if(isUpper(c)) {\n                c = toLower(c);\n         \
    \   } else {\n                c = toUpper(c);\n            }\n            if(c\
    \ == 'a') {\n                c = 'c';\n            } else if(c == 'e') {\n   \
    \             c = 'g';\n            } else if(c == 'i') {\n                c =\
    \ 'k';\n            } else if(c == 'o') {\n                c = 'q';\n        \
    \    } else if(c == 'u') {\n                c = 'y';\n            }\n        }\n\
    \        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiksd_lgg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfbo657z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else if(c == 'a')\n        {\n            c = 'c';\n     \
    \   }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n\
    \        else if(c == 'i')\n        {\n            c = 'k';\n        }\n     \
    \   else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else\
    \ if(c == 'u')\n        {\n            c = 'y';\n        }\n        else if(c\
    \ == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n\
    \        {\n            c = 'G';\n        }\n        else if(c == 'I')\n     \
    \   {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n\
    \            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n     \
    \       c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qdqatbj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y6zh4fv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbxa5sqku.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42804d]\n??:? void tmpbxa5sqku.__unittest_L37_C1() [0x427bf2]\n??:?
    void tmpbxa5sqku.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428423]\n??:? _d_run_main [0x42838e]\n??:? main [0x427de3]\n??:?
    __libc_start_main [0x52449554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy53xp_lh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghql1i7u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c + ('A'\
    \ - 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c + ('a' - 'A'));\n        }\n        else\n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvs2gdjvh.d(24): Error: C style cast illegal, use cast(char)(c
    + (\''A\'' - \''a\''))\n/tmp/tmpvs2gdjvh.d(28): Error: C style cast illegal, use
    cast(char)(c + (\''a\'' - \''A\''))\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpvs2gdjvh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n   \
    \     }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n\
    \        else if(c == 'e')\n        {\n            c = 'g';\n        }\n     \
    \   else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else\
    \ if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c\
    \ == 'u')\n        {\n            c = 'y';\n        }\n        else if(c == 'A')\n\
    \        {\n            c = 'C';\n        }\n        else if(c == 'E')\n     \
    \   {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n\
    \            c = 'K';\n        }\n        else if(c == 'O')\n        {\n     \
    \       c = 'Q';\n        }\n        else if(c == 'U')\n        {\n          \
    \  c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk96_p66x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            continue;\n        }\n      \
    \  switch(c)\n        {\n            case 'A':\n                c = 'C';\n   \
    \             break;\n            case 'E':\n                c = 'G';\n      \
    \          break;\n            case 'I':\n                c = 'K';\n         \
    \       break;\n            case 'O':\n                c = 'Q';\n            \
    \    break;\n            case 'U':\n                c = 'Y';\n               \
    \ break;\n            case 'a':\n                c = 'c';\n                break;\n\
    \            case 'e':\n                c = 'g';\n                break;\n   \
    \         case 'i':\n                c = 'k';\n                break;\n      \
    \      case 'o':\n                c = 'q';\n                break;\n         \
    \   case 'u':\n                c = 'y';\n                break;\n        }\n \
    \       encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbb5jrr8f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1esk2jp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt04030r3.d(24): Error: C style cast illegal, use `cast(char)(c
    - \''a\'' + \''A\'')`\n/tmp/tmpt04030r3.d(28): Error: C style cast illegal, use
    `cast(char)(c - \''A\'' + \''a\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt04030r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtutdnma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph7h_tuq5.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmph7h_tuq5.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7h_tuq5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd80xbjj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv10rw0bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt04030r3.d(24): Error: C style cast illegal, use `cast(char)(c
    - \''a\'' + \''A\'')`\n/tmp/tmpt04030r3.d(28): Error: C style cast illegal, use
    `cast(char)(c - \''A\'' + \''a\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt04030r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n\
    \        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c - 'A' + 'a';\n        }\n        else if (c == 'a')\n        {\n      \
    \      result ~= 'c';\n        }\n        else if (c == 'e')\n        {\n    \
    \        result ~= 'g';\n        }\n        else if (c == 'i')\n        {\n  \
    \          result ~= 'k';\n        }\n        else if (c == 'o')\n        {\n\
    \            result ~= 'q';\n        }\n        else if (c == 'u')\n        {\n\
    \            result ~= 'w';\n        }\n        else if (c == 'A')\n        {\n\
    \            result ~= 'C';\n        }\n        else if (c == 'E')\n        {\n\
    \            result ~= 'G';\n        }\n        else if (c == 'I')\n        {\n\
    \            result ~= 'K';\n        }\n        else if (c == 'O')\n        {\n\
    \            result ~= 'Q';\n        }\n        else if (c == 'U')\n        {\n\
    \            result ~= 'W';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtnqudlt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n    \
    \            c = toUpper(c);\n            }\n            else\n            {\n\
    \                c = toLower(c);\n            }\n            if(c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n               \
    \ c = c + 2;\n            }\n            else if(c == 'Z')\n            {\n  \
    \              c = 'B';\n            }\n            else if(c == 'Y')\n      \
    \      {\n                c = 'A';\n            }\n            else\n        \
    \    {\n                c = c + 1;\n            }\n        }\n        result ~=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnkqc32c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if (c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else if (c == 'a')\n        {\n            result ~= 'c';\n\
    \        }\n        else if (c == 'e')\n        {\n            result ~= 'g';\n\
    \        }\n        else if (c == 'i')\n        {\n            result ~= 'k';\n\
    \        }\n        else if (c == 'o')\n        {\n            result ~= 'q';\n\
    \        }\n        else if (c == 'u')\n        {\n            result ~= 'y';\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcgy8a_s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghql1i7u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph7h_tuq5.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmph7h_tuq5.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmph7h_tuq5.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7h_tuq5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpben6ieux.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpben6ieux.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpben6ieux.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpben6ieux.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpben6ieux.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s7qa9v2.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3s7qa9v2.d(120):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s7qa9v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfbo657z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyepnotk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvfnmun_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6sm2b1s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n    \
    \            c = toLower(c);\n            }\n            else\n            {\n\
    \                c = toUpper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpce1u3z41.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(islower(c))\n            {\n                c = toupper(c);\n\
    \            }\n            else\n            {\n                c = tolower(c);\n\
    \            }\n            switch(c)\n            {\n                case 'A':\n\
    \                    c = 'C';\n                    break;\n                case\
    \ 'E':\n                    c = 'G';\n                    break;\n           \
    \     case 'I':\n                    c = 'K';\n                    break;\n  \
    \              case 'O':\n                    c = 'Q';\n                    break;\n\
    \                case 'U':\n                    c = 'S';\n                   \
    \ break;\n                case 'Y':\n                    c = 'A';\n          \
    \          break;\n                case 'C':\n                    c = 'E';\n \
    \                   break;\n                case 'G':\n                    c =\
    \ 'I';\n                    break;\n                case 'K':\n              \
    \      c = 'O';\n                    break;\n                case 'Q':\n     \
    \               c = 'U';\n                    break;\n                case 'S':\n\
    \                    c = 'Y';\n                    break;\n                case\
    \ 'a':\n                    c = 'c';\n                    break;\n           \
    \     case 'e':\n                    c = 'g';\n                    break;\n  \
    \              case 'i':\n                    c = 'k';\n                    break;\n\
    \                case 'o':\n                    c = 'q';\n                   \
    \ break;\n                case 'u':\n                    c = 's';\n          \
    \          break;\n                case 'y':\n                    c = 'a';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'o';\n                    break;\n                case 'q':\n\
    \                    c = 'u';\n                    break;\n                case\
    \ 's':\n                    c = 'y';\n                    break;\n           \
    \ }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_44tkfs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk89mvecb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv10rw0bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toUpper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    result ~= 'C';\n                break;\n            case 'E':\n         \
    \       result ~= 'G';\n                break;\n            case 'I':\n      \
    \          result ~= 'K';\n                break;\n            case 'O':\n   \
    \             result ~= 'Q';\n                break;\n            case 'U':\n\
    \                result ~= 'S';\n                break;\n            case 'a':\n\
    \                result ~= 'c';\n                break;\n            case 'e':\n\
    \                result ~= 'g';\n                break;\n            case 'i':\n\
    \                result ~= 'k';\n                break;\n            case 'o':\n\
    \                result ~= 'q';\n                break;\n            case 'u':\n\
    \                result ~= 's';\n                break;\n            default:\n\
    \                result ~= c;\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp454uuggi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc27hxspj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpben6ieux.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpben6ieux.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmpben6ieux.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmpben6ieux.d(30): Error: undefined identifier `toupper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpben6ieux.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO: implement\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3_8zht9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxng03z3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n   \
    \     }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3otxmze9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpunt232mw.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428055]\n??:? void tmpunt232mw.__unittest_L37_C1() [0x427bf6]\n??:?
    void tmpunt232mw.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42842b]\n??:? _d_run_main [0x428396]\n??:? main [0x427de7]\n??:?
    __libc_start_main [0xa2658554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= c.toUpper;\n       \
    \ else if(c >= 'A' && c <= 'Z')\n            result ~= c.toLower;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbe49lvl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pd_vzk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c =\
    \ c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            c = c + 2;\n        }\n        encodedMessage ~= c;\n    }\n\
    \    return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2oiype2g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3vozaa3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd80xbjj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcoy7tqqz.d(24): Error: C style cast illegal, use cast(char)(c
    - \''a\'' + \''A\'')\n/tmp/tmpcoy7tqqz.d(28): Error: C style cast illegal, use
    cast(char)(c - \''A\'' + \''a\'')\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcoy7tqqz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv10rw0bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv8_r7lw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qfi9h0g.d(24): Error: C style cast illegal, use cast(char)(c
    - \''a\'' + \''A\'')\n/tmp/tmp7qfi9h0g.d(28): Error: C style cast illegal, use
    cast(char)(c - \''A\'' + \''a\'')\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qfi9h0g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q_65ofs.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp9q_65ofs.d(24):
    Error: undefined identifier `isupper`\n/tmp/tmp9q_65ofs.d(26): Error: undefined
    identifier `tolower`\n/tmp/tmp9q_65ofs.d(30): Error: undefined identifier `toupper`\n/tmp/tmp9q_65ofs.d(58):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q_65ofs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            }\n            else \n    \
    \        {\n                result ~= toupper(c);\n            }\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8ysg986.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               c = tolower(c);\n            }\n            else \n          \
    \  {\n                c = toupper(c);\n            }\n            if(c == 'a')\
    \ \n            {\n                c = 'c';\n            }\n            else if(c\
    \ == 'e') \n            {\n                c = 'g';\n            }\n         \
    \   else if(c == 'i') \n            {\n                c = 'k';\n            }\n\
    \            else if(c == 'o') \n            {\n                c = 'q';\n   \
    \         }\n            else if(c == 'u') \n            {\n                c\
    \ = 'y';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqjhvpx9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    foreach(char\
    \ c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n          \
    \  c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n    \
    \    {\n            c = c - 'A' + 'a';\n        }\n        if(vowels.canFind(c))\n\
    \        {\n            int index = vowels.indexOf(c);\n            index = (index\
    \ + 2) % 5;\n            c = vowels[index];\n        }\n        result ~= c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7isq5cp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n   \
    \     }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n    \
    \    result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2qebkjf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 32);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (char)(c + 32);\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfk72vda7.d(24): Error: C style cast illegal, use cast(char)(c
    - 32)\n/tmp/tmpfk72vda7.d(28): Error: C style cast illegal, use cast(char)(c +
    32)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfk72vda7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4nnza4c.d(24): Error: cannot implicitly convert expression
    `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(28): Error:
    cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpb4nnza4c.d(32):
    Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to
    `char`\n/tmp/tmpb4nnza4c.d(36): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4nnza4c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'Y')\n        {\n            c = 'A';\n        }\n        else if(c == 'Z')\n\
    \        {\n            c = 'B';\n        }\n        result ~= c;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4omo5x16.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o7m0vnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'Y')\n        {\n            c = 'A';\n        }\n        else if(c == 'Z')\n\
    \        {\n            c = 'B';\n        }\n        result ~= c;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4omo5x16.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvsee_nwu.d(31): Error: found \''(\'' when expecting \''.\''
    following char\n/tmp/tmpvsee_nwu.d(31): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpvsee_nwu.d(40): Error: found \''(\'' when expecting
    \''.\'' following char\n/tmp/tmpvsee_nwu.d(40): Error: found \'')\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsee_nwu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyepnotk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793397
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbxa5sqku.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42804d]\n??:? void tmpbxa5sqku.__unittest_L37_C1() [0x427bf2]\n??:?
    void tmpbxa5sqku.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42849c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428423]\n??:? _d_run_main [0x42838e]\n??:? main [0x427de3]\n??:?
    __libc_start_main [0x52449554]\n1/1 unittests FAILED\n'''
  stdout: b''
