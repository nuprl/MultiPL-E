name: HumanEval_115_max_fill
language: d
prompt: "import std.math;\n/*\n\n    You are given a rectangular grid of wells. Each\
  \ row represents a single well,\n    and each 1 in a row represents a single unit\
  \ of water.\n    Each well has a corresponding bucket that can be used to extract\
  \ water from it, \n    and all buckets have the same capacity.\n    Your task is\
  \ to use the buckets to empty the wells.\n    Output the number of times you need\
  \ to lower the buckets.\n\n    Example 1:\n    >>> max_fill([[0L, 0L, 1L, 0L], [0L,\
  \ 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L)\n    6L\n\n    Example 2:\n    >>> max_fill([[0L,\
  \ 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L)\n    5L\n\
  \    \n    Example 3:\n    >>> max_fill([[0L, 0L, 0L], [0L, 0L, 0L]], 5L)\n    0L\n\
  \n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length\
  \ <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 |\
  \ 1\n        * 1 <= capacity <= 10\n    \n*/\nlong max_fill(long[][] grid, long\
  \ capacity) \n"
tests: "unittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L,\
  \ 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L,\
  \ 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n\
  \    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L,\
  \ 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L,\
  \ 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}"
completions: ["{\n    long rows = grid.length;\n    long cols = grid[0].length;\n\
    \    long max_fill = 0;\n    long max_row = 0;\n    long max_col = 0;\n    long\
    \ max_row_fill = 0;\n    long max_col_fill = 0;\n    long max_row_fill_index =\
    \ 0;\n    long max_col_fill_index = 0;\n    long max_row_fill_index_2 = 0;\n \
    \   long max_col_fill_index_2 = 0;\n    long max_row_fill_2 = 0;\n    long max_col_fill_2\
    \ = 0;\n    long max_row_fill_index_3 = 0;\n    long max_col_fill_index_3 = 0;\n\
    \    long max_row_fill_3 = 0;\n    long max_col_fill_3 = 0;\n    long max_row_fill_index_4\
    \ = 0;\n    long max_col_fill_index_4 = 0;\n    long max_row_fill_4 = 0;\n   \
    \ long max_col_fill_4 = 0;\n    long max_row_fill_index_5 = 0;\n    long max_col_fill_index_5\
    \ = 0;\n    long max_row_fill_5 = 0;\n    long max_col_fill_5 = 0;\n    long max_row_fill_index_6\
    \ = 0;\n    long max_col_fill_index_6 = 0;\n    long max_row_fill_6 = 0;\n   \
    \ long max_col_fill_6 = 0;\n    long max_row_fill_index_7 = 0;\n    long max_col_fill_index_7\
    \ = 0;\n    long max_row_fill_7 = 0;\n    long max_col_fill_7 = 0;\n    long max_row_fill_index_8\
    \ = 0;\n    long max_col_fill_index_8 = 0;\n    long max_row_fill_8 = 0;\n   \
    \ long max_col_fill_8 = 0;\n    long max_row_fill_index_9 = 0;\n    long max_col_",
  "{\n    long max_fill = 0L;\n    long max_fill_row = 0L;\n    long max_fill_col\
    \ = 0L;\n    long max_fill_row_count = 0L;\n    long max_fill_col_count = 0L;\n\
    \    long row_count = 0L;\n    long col_count = 0L;\n    long row_index = 0L;\n\
    \    long col_index = 0L;\n    long row_length = grid.length;\n    long col_length\
    \ = grid[0].length;\n    long[][] grid_copy = new long[row_length][col_length];\n\
    \    for (long[] row : grid)\n    {\n        for (long col : row)\n        {\n\
    \            grid_copy[row_index][col_index] = col;\n            col_index++;\n\
    \        }\n        col_index = 0L;\n        row_index++;\n    }\n    for (long[]\
    \ row : grid_copy)\n    {\n        for (long col : row)\n        {\n         \
    \   if (col == 1L)\n            {\n                row_count++;\n            }\n\
    \        }\n        if (row_count > max_fill_row)\n        {\n            max_fill_row\
    \ = row_count;\n            max_fill_row_count = 1L;\n        }\n        else\
    \ if (row_count == max_fill_row)\n        {\n            max_fill_row_count++;\n\
    \        }\n        row_count = 0L;\n    }\n    for (long i = 0L; i < col_length;\
    \ i++)\n    {\n        for (long j = 0L; j < row_length; j++)\n        {\n   \
    \         if (grid_copy[j][i] == 1L)\n            {\n                col_count++;\n\
    \            }\n        }\n        if (col_count > max_fill_col)\n        {\n\
    \            max_fill_col = col_count;\n            max_fill_col_count = 1L;\n\
    \        }\n        else if (col_count == max_fill_col)\n        {\n         \
    \   max_fill_col_count++;\n        }\n        col_count =", "{\n    long max_fill\
    \ = 0L;\n    foreach(row; grid)\n    {\n        long row_fill = 0L;\n        foreach(cell;\
    \ row)\n        {\n            if(cell == 1L)\n            {\n               \
    \ row_fill += capacity;\n            }\n        }\n        max_fill = max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}", "{\n    long max_fill = 0L;\n \
    \   foreach(row; grid)\n    {\n        long row_fill = 0L;\n        foreach(col;\
    \ row)\n        {\n            if(col == 1L)\n            {\n                row_fill\
    \ += 1L;\n            }\n            else\n            {\n                if(row_fill\
    \ > 0L)\n                {\n                    max_fill += row_fill / capacity;\n\
    \                    if(row_fill % capacity != 0L)\n                    {\n  \
    \                      max_fill += 1L;\n                    }\n              \
    \      row_fill = 0L;\n                }\n            }\n        }\n        if(row_fill\
    \ > 0L)\n        {\n            max_fill += row_fill / capacity;\n           \
    \ if(row_fill % capacity != 0L)\n            {\n                max_fill += 1L;\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "{\n    long rows\
    \ = grid.length;\n    long cols = grid[0].length;\n    long max_fill = 0;\n  \
    \  long max_fill_row = 0;\n    long max_fill_col = 0;\n    long max_fill_row_count\
    \ = 0;\n    long max_fill_col_count = 0;\n    long max_fill_row_count_prev = 0;\n\
    \    long max_fill_col_count_prev = 0;\n    long max_fill_row_count_prev_prev\
    \ = 0;\n    long max_fill_col_count_prev_prev = 0;\n    long max_fill_row_count_prev_prev_prev\
    \ = 0;\n    long max_fill_col_count_prev_prev_prev = 0;\n    long max_fill_row_count_prev_prev_prev_prev\
    \ = 0;\n    long max_fill_col_count_prev_prev_prev_prev = 0;\n    long max_fill_row_count_prev_prev_prev_prev_prev\
    \ = 0;\n    long max_fill_col_count_prev_prev_prev_prev_prev = 0;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev = 0;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    long max_fill_row_count_prev_prev_prev_prev", "{\n    long max_fill = 0L;\n\
    \    long max_fill_row = 0L;\n    long max_fill_col = 0L;\n    long max_fill_row_count\
    \ = 0L;\n    long max_fill_col_count = 0L;\n    long max_fill_row_count_prev =\
    \ 0L;\n    long max_fill_col_count_prev = 0L;\n    long max_fill_row_count_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev", "{\n    long max_fill =\
    \ 0L;\n    long row_len = grid[0].length;\n    long col_len = grid.length;\n \
    \   long[][] fill_grid = new long[col_len][row_len];\n    long[][] bucket_grid\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy = new long[col_len][row_len];\n\
    \    long[][] bucket_grid_copy_copy = new long[col_len][row_len];\n    long[][]\
    \ bucket_grid_copy_copy_copy = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[col_len][row_len];\n    long[][] bucket_grid_copy_copy_copy_copy_copy_copy_copy_copy_",
  "{\n    long rows = grid.length;\n    long cols = grid[0].length;\n    long count\
    \ = 0;\n    for (long i = 0; i < rows; i++)\n    {\n        for (long j = 0; j\
    \ < cols; j++)\n        {\n            if (grid[i][j] == 1)\n            {\n \
    \               count += capacity;\n                for (long k = i + 1; k < rows;\
    \ k++)\n                {\n                    if (grid[k][j] == 1)\n        \
    \            {\n                        count += capacity;\n                 \
    \   }\n                    else\n                    {\n                     \
    \   break;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long max_fill = 0L;\n    long max_fill_row\
    \ = 0L;\n    long max_fill_col = 0L;\n    long max_fill_row_count = 0L;\n    long\
    \ max_fill_col_count = 0L;\n    long max_fill_count = 0L;\n    long max_fill_row_count_prev\
    \ = 0L;\n    long max_fill_col_count_prev = 0L;\n    long max_fill_count_prev\
    \ = 0L;\n    long row_count = 0L;\n    long col_count = 0L;\n    long row_count_prev\
    \ = 0L;\n    long col_count_prev = 0L;\n    long row_count_prev_prev = 0L;\n \
    \   long col_count_prev_prev = 0L;\n    long row_count_prev_prev_prev = 0L;\n\
    \    long col_count_prev_prev_prev = 0L;\n    long row_count_prev_prev_prev_prev\
    \ = 0L;\n    long col_count_prev_prev_prev_prev = 0L;\n    long row_count_prev_prev_prev_prev_prev\
    \ = 0L;\n    long col_count_prev_prev_prev_prev_prev = 0L;\n    long row_count_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long col_count_prev_prev_prev_prev_prev_prev = 0L;\n    long row_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long col_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long\
    \ row_count_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long col_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long\
    \ row_count_prev_prev", "{\n    long rows = grid.length;\n    long cols = grid[0].length;\n\
    \    long max_water = 0;\n    long max_water_per_row = 0;\n    long max_water_per_col\
    \ = 0;\n    long max_water_per_col_per_row = 0;\n    long max_water_per_row_per_col\
    \ = 0;\n    long max_water_per_col_per_row_per_col = 0;\n    long max_water_per_row_per_col_per_row\
    \ = 0;\n    long max_water_per_col_per_row_per_col_per_row = 0;\n    long max_water_per_row_per_col_per_row_per_col\
    \ = 0;\n    long max_water_per_col_per_row_per_col_per_row_per_col = 0;\n    long\
    \ max_water_per_row_per_col_per_row_per_col_per_row = 0;\n    long max_water_per_col_per_row_per_col_per_row_per_col_per_row\
    \ = 0;\n    long max_water_per_row_per_col_per_row_per_col_per_row_per_col = 0;\n\
    \    long max_water_per_col_per_row_per_col_per_row_per_col_per_row_per_col =\
    \ 0;\n    long max_water_per_row_per_col_per_row_per_col_per_row_per_col_per_row\
    \ = 0;\n    long max_water_per_col_per_row_per_col_per_row_per_col_per_row_per_col_per_row\
    \ = 0;\n    long max_water_per_row_per_col_per_row_per_col_per_row_per_col_per_row_per_col\
    \ = 0;\n    long max_water_per_col_per_row_per_col_per_row_per_col_per_row_per_col_per_row_per_col\
    \ = 0;\n    long", "{\n    long max_fill = 0L;\n    long max_fill_row = 0L;\n\
    \    long max_fill_col = 0L;\n    long max_fill_row_count = 0L;\n    long max_fill_col_count\
    \ = 0L;\n    long max_fill_row_count_max = 0L;\n    long max_fill_col_count_max\
    \ = 0L;\n    long max_fill_row_count_min = 0L;\n    long max_fill_col_count_min\
    \ = 0L;\n    long max_fill_row_count_max_max = 0L;\n    long max_fill_col_count_max_max\
    \ = 0L;\n    long max_fill_row_count_min_min = 0L;\n    long max_fill_col_count_min_min\
    \ = 0L;\n    long max_fill_row_count_max_max_max = 0L;\n    long max_fill_col_count_max_max_max\
    \ = 0L;\n    long max_fill_row_count_min_min_min = 0L;\n    long max_fill_col_count_min_min_min\
    \ = 0L;\n    long max_fill_row_count_max_max_max_max = 0L;\n    long max_fill_col_count_max_max_max_max\
    \ = 0L;\n    long max_fill_row_count_min_min_min_min = 0L;\n    long max_fill_col_count_min_min_min_min\
    \ = 0L;\n    long max_fill_row_count_max_max_max_max_max = 0L;\n    long max_fill_col_count_max_max_max_max_max\
    \ = 0L;\n    long max_fill_row_count_min_min_min_min_min = 0L;\n    long max_fill_col_count_min_min_min_min_min\
    \ = 0L;\n    long max_fill_row_count_max_max_max_max_max_max = 0L;\n    long max_fill_col_count_max_max_max_max_max_max",
  "{\n    long result = 0L;\n    long max_row = 0L;\n    long max_col = 0L;\n    long\
    \ max_row_sum = 0L;\n    long max_col_sum = 0L;\n    long max_row_sum_index =\
    \ 0L;\n    long max_col_sum_index = 0L;\n    long row_sum = 0L;\n    long col_sum\
    \ = 0L;\n    long row_sum_index = 0L;\n    long col_sum_index = 0L;\n    long\
    \ row_sum_index_prev = 0L;\n    long col_sum_index_prev = 0L;\n    long row_sum_index_next\
    \ = 0L;\n    long col_sum_index_next = 0L;\n    long row_sum_index_prev_prev =\
    \ 0L;\n    long col_sum_index_prev_prev = 0L;\n    long row_sum_index_next_next\
    \ = 0L;\n    long col_sum_index_next_next = 0L;\n    long row_sum_index_prev_prev_prev\
    \ = 0L;\n    long col_sum_index_prev_prev_prev = 0L;\n    long row_sum_index_next_next_next\
    \ = 0L;\n    long col_sum_index_next_next_next = 0L;\n    long row_sum_index_prev_prev_prev_prev\
    \ = 0L;\n    long col_sum_index_prev_prev_prev_prev = 0L;\n    long row_sum_index_next_next_next_next\
    \ = 0L;\n    long col_sum_index_next_next_next_next = 0L;\n    long row_sum_index_prev_prev_prev_prev_prev\
    \ = 0L;\n    long col_sum_index_prev_prev_prev_prev_prev = 0L;\n    long row_sum_index_next_next_next_next_next\
    \ = 0L;\n    long col_sum_index_next_next_next_next_next = 0L;\n    long row_sum_index_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n   ", "{\n    long max_fill = 0L;\n    long max_fill_row = 0L;\n    long\
    \ max_fill_col = 0L;\n    long max_fill_row_count = 0L;\n    long max_fill_col_count\
    \ = 0L;\n    long max_fill_row_count_prev = 0L;\n    long max_fill_col_count_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev = 0L;\n    long max_fill_col_count_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_col_count_prev_prev_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev = 0L;\n   \
    \ long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long max_fill_row_count_prev_prev_prev", "{\n    long max_fill = 0L;\n  \
    \  long row_count = grid.length;\n    long col_count = grid[0].length;\n    long[][]\
    \ fill_grid = new long[row_count][col_count];\n    for (long row = 0L; row < row_count;\
    \ row++) \n    {\n        for (long col = 0L; col < col_count; col++) \n     \
    \   {\n            if (grid[row][col] == 1L) \n            {\n               \
    \ fill_grid[row][col] = capacity;\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    for (long row = 0L; row < row_count; row++)\
    \ \n    {\n        for (long col = 0L; col < col_count; col++) \n        {\n \
    \           if (grid[row][col] == 1L) \n            {\n                long left_fill\
    \ = 0L;\n                long top_fill = 0L;\n                if (col > 0L) \n\
    \                {\n                    left_fill = fill_grid[row][col - 1L];\n\
    \                }\n                if (row > 0L) \n                {\n      \
    \              top_fill = fill_grid[row - 1L][col];\n                }\n     \
    \           long min_fill = min(left_fill, top_fill);\n                if (min_fill\
    \ > 0L) \n                {\n                    fill_grid[row][col] = min_fill;\n\
    \                    max_fill -= capacity - min_fill;\n                }\n   \
    \         }\n        }\n    }\n    return max_fill;\n}", "{\n    long max_fill\
    \ = 0L;\n    for (long i = 0L; i < grid.length; i++)\n    {\n        long row_fill\
    \ = 0L;\n        for (long j = 0L; j < grid[i].length; j++)\n        {\n     \
    \       if (grid[i][j] == 1L)\n            {\n                row_fill++;\n  \
    \          }\n        }\n        max_fill += min(row_fill, capacity);\n    }\n\
    \    return max_fill;\n}", "{\n    long max_fill = 0L;\n    foreach(row; grid)\n\
    \    {\n        long row_fill = 0L;\n        foreach(cell; row)\n        {\n \
    \           if(cell == 1L)\n            {\n                row_fill += 1L;\n \
    \           }\n        }\n        max_fill += min(row_fill, capacity);\n    }\n\
    \    return max_fill;\n}", "{\n    long count = 0;\n    long max_height = 0;\n\
    \    for (int i = 0; i < grid.length; i++)\n    {\n        long height = 0;\n\
    \        for (int j = 0; j < grid[i].length; j++)\n        {\n            if (grid[i][j]\
    \ == 1)\n            {\n                height++;\n            }\n        }\n\
    \        max_height = max(max_height, height);\n    }\n    for (int i = 0; i <\
    \ grid.length; i++)\n    {\n        long height = 0;\n        for (int j = 0;\
    \ j < grid[i].length; j++)\n        {\n            if (grid[i][j] == 1)\n    \
    \        {\n                height++;\n            }\n        }\n        count\
    \ += max_height - height;\n    }\n    return count;\n}", "{\n    long max_fill\
    \ = 0L;\n    long max_fill_row = 0L;\n    long max_fill_col = 0L;\n    long max_fill_row_count\
    \ = 0L;\n    long max_fill_col_count = 0L;\n    long max_fill_row_count_prev =\
    \ 0L;\n    long max_fill_col_count_prev = 0L;\n    long max_fill_row_count_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev", "{\n    long max_fill =\
    \ 0L;\n    long max_fill_row = 0L;\n    long max_fill_col = 0L;\n    long max_fill_row_count\
    \ = 0L;\n    long max_fill_col_count = 0L;\n    long max_fill_row_count_prev =\
    \ 0L;\n    long max_fill_col_count_prev = 0L;\n    long max_fill_row_count_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n\
    \    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long\
    \ max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0L;\n    long max_fill_row_count_prev_prev_prev", "{\n    long max_fill =\
    \ 0L;\n    foreach(row; grid)\n    {\n        long row_fill = 0L;\n        foreach(well;\
    \ row)\n        {\n            if(well == 1L)\n            {\n               \
    \ row_fill += capacity;\n            }\n        }\n        max_fill = max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
