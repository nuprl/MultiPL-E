name: HumanEval_114_minSubArraySum
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers\
  \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
  \    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L,\
  \ -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L,\
  \ 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n\
  \    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L])\
  \ == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n\
  \    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L,\
  \ -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L,\
  \ 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n\
  \    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n  \
  \  assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long minSum = long.max;\n    long sum = 0L;\n    foreach(i;\
    \ 0 .. nums.length)\n    {\n        sum += nums[i];\n        if(sum < minSum)\n\
    \            minSum = sum;\n        if(sum > 0L)\n            sum = 0L;\n    }\n\
    \    return minSum;\n}", "{\n    long minSum = long.max;\n    long sum = 0L;\n\
    \    foreach(i; 0 .. nums.length)\n    {\n        sum += nums[i];\n        minSum\
    \ = min(minSum, sum);\n        if(sum > 0L)\n            sum = 0L;\n    }\n  \
    \  return minSum;\n}", "{\n    long minSum = nums[0];\n    long sum = 0;\n   \
    \ foreach(i; 0 .. nums.length)\n    {\n        sum += nums[i];\n        minSum\
    \ = min(minSum, sum);\n        if(sum > 0)\n            sum = 0;\n    }\n    return\
    \ minSum;\n}", "{\n    long minSum = long.max;\n    long sum = 0L;\n    foreach(i;\
    \ 0 .. nums.length)\n    {\n        sum += nums[i];\n        minSum = min(minSum,\
    \ sum);\n        if(sum > 0L)\n            sum = 0L;\n    }\n    return minSum;\n\
    }", "{\n    long minSum = long.max;\n    long sum = 0L;\n    foreach(i; 0 .. nums.length)\n\
    \    {\n        sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum\
    \ > 0L)\n            sum = 0L;\n    }\n    return minSum;\n}", "{\n    long minSum\
    \ = long.max;\n    long sum = 0L;\n    foreach(i; 0 .. nums.length)\n    {\n \
    \       sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum >\
    \ 0L)\n            sum = 0L;\n    }\n    return minSum;\n}", "{\n    long minSum\
    \ = long.max;\n    long sum = 0L;\n    foreach(i; 0 .. nums.length)\n    {\n \
    \       sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum >\
    \ 0L)\n            sum = 0L;\n    }\n    return minSum;\n}", "{\n    long minSum\
    \ = long.max;\n    long sum = 0L;\n    foreach(i; 0 .. nums.length)\n    {\n \
    \       sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum >\
    \ 0L)\n            sum = 0L;\n    }\n    return minSum;\n}", "{\n    long minSum\
    \ = nums[0];\n    long sum = 0;\n    foreach(i; 0 .. nums.length)\n    {\n   \
    \     sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum > 0)\n\
    \            sum = 0;\n    }\n    return minSum;\n}", "{\n    long minSum = nums[0];\n\
    \    long currentSum = nums[0];\n    foreach(i; 1..nums.length)\n    {\n     \
    \   currentSum = min(currentSum + nums[i], nums[i]);\n        minSum = min(minSum,\
    \ currentSum);\n    }\n    return minSum;\n}", "{\n    long minSum = long.max;\n\
    \    long sum = 0L;\n    foreach(i; 0 .. nums.length)\n    {\n        sum += nums[i];\n\
    \        minSum = min(minSum, sum);\n        if(sum > 0L)\n            sum = 0L;\n\
    \    }\n    return minSum;\n}", "{\n    long min = nums[0];\n    long sum = nums[0];\n\
    \    foreach(i, n; nums[1..$])\n    {\n        sum += n;\n        if(sum < min)\n\
    \            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n  \
    \  return min;\n}", "{\n    long minSum = nums[0];\n    long sum = nums[0];\n\
    \    for (int i = 1; i < nums.length; i++) \n    {\n        sum = min(sum + nums[i],\
    \ nums[i]);\n        minSum = min(minSum, sum);\n    }\n    return minSum;\n}",
  "{\n    long minSum = long.max;\n    long sum = 0L;\n    foreach(i; 0 .. nums.length)\
    \ \n    {\n        sum += nums[i];\n        minSum = min(minSum, sum);\n     \
    \   if(sum > 0L) \n        {\n            sum = 0L;\n        }\n    }\n    return\
    \ minSum;\n}", "{\n    long minSum = long.max;\n    long sum = 0L;\n    foreach(i;\
    \ 0 .. nums.length)\n    {\n        sum += nums[i];\n        minSum = min(minSum,\
    \ sum);\n        if(sum > 0L)\n            sum = 0L;\n    }\n    return minSum;\n\
    }", "{\n    long minSum = long.max;\n    long sum = 0L;\n    foreach(i; 0 .. nums.length)\n\
    \    {\n        sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum\
    \ > 0L)\n            sum = 0L;\n    }\n    return minSum;\n}", "{\n    long minSum\
    \ = nums[0];\n    long sum = 0;\n    for (long n : nums) \n    {\n        sum\
    \ += n;\n        minSum = min(minSum, sum);\n        if (sum > 0) \n        {\n\
    \            sum = 0;\n        }\n    }\n    return minSum;\n}", "{\n    long\
    \ minSum = nums[0];\n    long sum = 0;\n    foreach(i; 0 .. nums.length)\n   \
    \ {\n        sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum\
    \ > 0)\n            sum = 0;\n    }\n    return minSum;\n}", "{\n    long minSum\
    \ = nums[0];\n    long sum = 0;\n    foreach(i; 0 .. nums.length)\n    {\n   \
    \     sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum > 0)\n\
    \            sum = 0;\n    }\n    return minSum;\n}", "{\n    long minSum = nums[0];\n\
    \    long sum = 0;\n    foreach(i; 0 .. nums.length)\n    {\n        sum += nums[i];\n\
    \        minSum = min(minSum, sum);\n        if(sum > 0)\n            sum = 0;\n\
    \    }\n    return minSum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
