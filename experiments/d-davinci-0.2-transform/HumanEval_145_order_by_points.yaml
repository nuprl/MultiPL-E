name: HumanEval_145_order_by_points
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
  \ sorts the given list of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
  \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
  \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
  \ nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[nums.length];\n    int[] sums = new\
    \ int[nums.length];\n    foreach(i, n; nums)\n    {\n        sums[i] = sumDigits(n);\n\
    \    }\n    auto sorted = sort(zip(sums, nums));\n    foreach(i, t; sorted)\n\
    \    {\n        result[i] = t[1];\n    }\n    return result;\n}", "{\n    // your\
    \ code here\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        if(temp < 0)\n            temp = -temp;\n        while(temp != 0)\n \
    \       {\n            sum[i] += temp % 10;\n            temp /= 10;\n       \
    \ }\n    }\n    int[] index = new int[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n        index[i] = i;\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        for(int j = i + 1; j < nums.length; j++)\n        {\n            if(sum[i]\
    \ > sum[j])\n            {\n                int temp = sum[i];\n             \
    \   sum[i] = sum[j];\n                sum[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n            else if(sum[i] == sum[j])\n            {\n           \
    \     if(index[i] > index[j])\n                {\n                    int temp\
    \ = index[i];\n                    index[i] = index[j];\n                    index[j]\
    \ = temp;\n                }\n            }\n        }\n    }\n    for(int i =\
    \ 0; i < nums.length; i++)\n        result[i] = nums[index[i]];\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, v; nums)\n    {\n        long sum = 0;\n        foreach (c; v.to!string)\n\
    \        {\n            if (c >= '0' && c <= '9')\n                sum += c -\
    \ '0';\n        }\n        sums[i] = sum;\n    }\n    auto sorted = zip(sums,\
    \ nums).sort!((a, b) => a[0] < b[0]);\n    return sorted.map!(a => a[1]).array;\n\
    }", "{\n    auto result = nums.dup;\n    auto sums = new long[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        sums[i] = sumDigits(num);\n    }\n\
    \    sort!((a, b) => a < b)(result, sums);\n    return result;\n}", "{\n    if\
    \ (nums.length == 0)\n        return nums;\n    auto nums_with_points = new Tuple!(long,\
    \ long)[nums.length];\n    foreach (i, num; nums)\n    {\n        nums_with_points[i]\
    \ = tuple(num, sum_of_digits(num));\n    }\n    nums_with_points.sort!((a, b)\
    \ => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, num; nums_with_points)\n\
    \    {\n        nums[i] = num[0];\n    }\n    return nums;\n}", "{\n    long[]\
    \ result;\n    int[] sum;\n    int i;\n    int j;\n    int temp;\n    int temp2;\n\
    \    int temp3;\n    int temp4;\n    int temp5;\n    int temp6;\n    int temp7;\n\
    \    int temp8;\n    int temp9;\n    int temp10;\n    int temp11;\n    int temp12;\n\
    \    int temp13;\n    int temp14;\n    int temp15;\n    int temp16;\n    int temp17;\n\
    \    int temp18;\n    int temp19;\n    int temp20;\n    int temp21;\n    int temp22;\n\
    \    int temp23;\n    int temp24;\n    int temp25;\n    int temp26;\n    int temp27;\n\
    \    int temp28;\n    int temp29;\n    int temp30;\n    int temp31;\n    int temp32;\n\
    \    int temp33;\n    int temp34;\n    int temp35;\n    int temp36;\n    int temp37;\n\
    \    int temp38;\n    int temp39;\n    int temp40;\n    int temp41;\n    int temp42;\n\
    \    int temp43;\n    int temp44;\n    int temp45;\n    int temp46;\n    int temp47;\n\
    \    int temp48;\n    int temp49;\n    int temp50;\n    int temp51;\n    int temp52;\n\
    \    int temp53;\n    int temp54;\n    int temp55;\n    int temp56;\n    int temp57;\n\
    \    int temp58;\n    int temp59;\n    int temp60;\n    int temp61;\n    int temp62;\n\
    \    int temp63;\n    int temp64;\n    int temp65;\n    int temp66;\n    int temp67;\n\
    \    int temp68;\n    int temp69;\n    int temp70;\n    int temp71;\n    int temp72;\n\
    \    int temp73;\n    int temp74;\n    int temp75;\n    int temp76;\n    int temp77;\n\
    \    int temp78;\n    int temp79;\n    int temp80;\n    int temp81;\n    int",
  "{\n    long[] result;\n    int[] sums;\n    int i;\n    int j;\n    int temp;\n\
    \    int temp2;\n    int sum;\n    int[] indices;\n    int[] indices2;\n    int[]\
    \ indices3;\n    int[] indices4;\n    int[] indices5;\n    int[] indices6;\n \
    \   int[] indices7;\n    int[] indices8;\n    int[] indices9;\n    int[] indices10;\n\
    \    int[] indices11;\n    int[] indices12;\n    int[] indices13;\n    int[] indices14;\n\
    \    int[] indices15;\n    int[] indices16;\n    int[] indices17;\n    int[] indices18;\n\
    \    int[] indices19;\n    int[] indices20;\n    int[] indices21;\n    int[] indices22;\n\
    \    int[] indices23;\n    int[] indices24;\n    int[] indices25;\n    int[] indices26;\n\
    \    int[] indices27;\n    int[] indices28;\n    int[] indices29;\n    int[] indices30;\n\
    \    int[] indices31;\n    int[] indices32;\n    int[] indices33;\n    int[] indices34;\n\
    \    int[] indices35;\n    int[] indices36;\n    int[] indices37;\n    int[] indices38;\n\
    \    int[] indices39;\n    int[] indices40;\n    int[] indices41;\n    int[] indices42;\n\
    \    int[] indices43;\n    int[] indices44;\n    int[] indices45;\n    int[] indices46;\n\
    \    int[] indices47;\n    int[] indices48;\n    int[] indices49;\n    int[] indices50;\n\
    \    int[] indices51;\n    int[] indices52;\n    int[] indices53;\n    int[] indices54;\n\
    \    int[] indices55;\n    int[] indices56;\n    int[] indices57;\n    int[] indices58;\n\
    \    int[] indices59;\n    int[] indices60;\n    int[] indices61;\n    int[] indices62;\n\
    \    int[] indices63;\n    int[] indices64;\n    int[] indices65;\n    int[] indices66;\n\
    \    int[] indices67;\n    int[]", "{\n    auto nums_with_points = nums.map!(x\
    \ => tuple(x, x.abs.sumOfDigits));\n    nums_with_points.sort!((a, b) => a[1]\
    \ < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(x\
    \ => x[0]).array;\n}", "{\n    auto nums_with_points = zip(nums, map!(a => a.reduce!((a,\
    \ b) => a + b).to!long)(map!(a => a.to!string.map!(a => a.to!long).array)(nums)));\n\
    \    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return nums_with_points.map!(a => a[0]).array;\n}", "{\n    long[] result\
    \ = nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n   \
    \ return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n  \
    \  else\n    {\n        long[] sums = new long[nums.length];\n        foreach\
    \ (i, n; nums)\n        {\n            long sum = 0;\n            foreach (c;\
    \ to!string(n))\n                sum += c.to!long - '0'.to!long;\n           \
    \ sums[i] = sum;\n        }\n        auto zipped = zip(nums, sums);\n        zipped.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n        return zipped.map!(a\
    \ => a[0]).array;\n    }\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto sum = new long[nums.length];\n    foreach (i, ref n; nums)\n    {\n\
    \        long s = 0;\n        while (n != 0)\n        {\n            s += n %\
    \ 10;\n            n /= 10;\n        }\n        sum[i] = s;\n    }\n    auto t\
    \ = tuple(nums, sum);\n    t.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    return t[0];\n}", "{\n    auto result = nums.dup;\n    auto sums\
    \ = new long[result.length];\n    foreach(i, ref n; result)\n    {\n        sums[i]\
    \ = sumDigits(n);\n    }\n    sort!(\"a < b\", \"a > b\")(result, sums);\n   \
    \ return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[][]\
    \ sums = new int[nums.length][2];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i][0] = i;\n        sums[i][1] = nums[i] < 0 ? -nums[i] :\
    \ nums[i];\n        while (sums[i][1] > 0)\n        {\n            sums[i][1]\
    \ = sums[i][1] / 10;\n            sums[i][1] += nums[i] % 10;\n        }\n   \
    \ }\n    sums.sort!((a, b) => a[1] < b[1]);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[sums[i][0]];\n    }\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    int[] sums = new\
    \ int[nums.length];\n    foreach (i, n; nums)\n    {\n        int sum = 0;\n \
    \       while (n != 0)\n        {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sums[i] = sum;\n    }\n    auto sorted = sort(zip(sums,\
    \ nums));\n    return map!(a => a[1])(sorted);\n}", "{\n    if (nums.length ==\
    \ 0)\n        return nums;\n    auto sum = new long[nums.length];\n    foreach\
    \ (i, v; nums)\n    {\n        sum[i] = v.abs;\n        while (sum[i] >= 10)\n\
    \        {\n            sum[i] = sum[i] / 10 + sum[i] % 10;\n        }\n    }\n\
    \    auto t = tuple(nums, sum);\n    t.sort!((a, b) => a[1] < b[1] || (a[1] ==\
    \ b[1] && a[0] < b[0]));\n    return t.map!(a => a[0]).array;\n}", "{\n    return\
    \ nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    struct Points\n\
    \    {\n        long num;\n        long points;\n        size_t index;\n    }\n\
    \    Points[] points;\n    foreach(i, num; nums)\n    {\n        long sum = 0;\n\
    \        foreach(c; num.to!string)\n        {\n            if(c.isDigit)\n   \
    \             sum += c.to!long;\n        }\n        points ~= Points(num, sum,\
    \ i);\n    }\n    sort!((a, b) => a.points < b.points || (a.points == b.points\
    \ && a.index < b.index))(points);\n    return points.map!(a => a.num).array;\n\
    }", "{\n    if (nums.length == 0) return nums;\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long min = sums[0];\n        int min_index = 0;\n     \
    \   for (int j = 1; j < nums.length; j++)\n        {\n            if (sums[j]\
    \ < min)\n            {\n                min = sums[j];\n                min_index\
    \ = j;\n            }\n        }\n        result[i] = nums[min_index];\n     \
    \   sums[min_index] = long.max;\n    }\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto sum = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n      \
    \  while (n != 0)\n        {\n            sum[i] += n % 10;\n            n /=\
    \ 10;\n        }\n    }\n    return nums.sort!((a, b) => sum[a] < sum[b] || (sum[a]\
    \ == sum[b] && a < b));\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto result = new long[nums.length];\n    auto sums = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long sum = 0;\n        foreach (c;\
    \ num.to!string)\n            sum += c.to!long - '0'.to!long;\n        sums[i]\
    \ = sum;\n    }\n    auto sorted = sort(sums);\n    foreach (i, sum; sorted)\n\
    \    {\n        foreach (j, num; nums)\n        {\n            if (sum == sums[j])\n\
    \            {\n                result[i] = num;\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        sums[i] = sumDigits(n);\n    }\n    auto\
    \ tuples = zip(sums, nums);\n    sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] < b[1]))(tuples);\n    foreach(i, t; tuples)\n    {\n        result[i]\
    \ = t[1];\n    }\n    return result;\n}", "{\n    if (nums.length == 0)\n    \
    \    return nums;\n    auto t = new Tuple!(long, long)(0, 0);\n    auto t2 = new\
    \ Tuple!(long, long)(0, 0);\n    auto t3 = new Tuple!(long, long)(0, 0);\n   \
    \ auto t4 = new Tuple!(long, long)(0, 0);\n    auto t5 = new Tuple!(long, long)(0,\
    \ 0);\n    auto t6 = new Tuple!(long, long)(0, 0);\n    auto t7 = new Tuple!(long,\
    \ long)(0, 0);\n    auto t8 = new Tuple!(long, long)(0, 0);\n    auto t9 = new\
    \ Tuple!(long, long)(0, 0);\n    auto t10 = new Tuple!(long, long)(0, 0);\n  \
    \  auto t11 = new Tuple!(long, long)(0, 0);\n    auto t12 = new Tuple!(long, long)(0,\
    \ 0);\n    auto t13 = new Tuple!(long, long)(0, 0);\n    auto t14 = new Tuple!(long,\
    \ long)(0, 0);\n    auto t15 = new Tuple!(long, long)(0, 0);\n    auto t16 = new\
    \ Tuple!(long, long)(0, 0);\n    auto t17 = new Tuple!(long, long)(0, 0);\n  \
    \  auto t18 = new Tuple!(long, long)(0, 0);\n    auto t19 = new Tuple!(long, long)(0,\
    \ 0);\n    auto t20 = new Tuple!(long, long)(0, 0);\n    auto t21 = new Tuple!(long,\
    \ long)(0, 0);\n    auto t22 = new Tuple!(long, long)(0, 0);\n    auto t23 = new\
    \ Tuple!(long, long)(0, 0);\n    auto t24 = new Tuple!(long, long)(0, 0);\n  \
    \  auto t25 = new Tuple!(long, long)(0, 0);\n    auto t26 = new Tuple!(long, long)(0,\
    \ 0);", "{\n    if (nums.length == 0)\n        return nums;\n    auto nums_with_sum\
    \ = new long[][2](nums.length);\n    foreach (i, num; nums)\n    {\n        nums_with_sum[i][0]\
    \ = num;\n        nums_with_sum[i][1] = sumDigits(num);\n    }\n    nums_with_sum.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_sum.map!(x\
    \ => x[0]).array;\n}", "{\n    auto result = nums.dup;\n    auto sums = nums.map!(a\
    \ => a.abs.sumDigits).array;\n    sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b))(result);\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto sum = new long[nums.length];\n    foreach\
    \ (i, v; nums)\n    {\n        sum[i] = 0;\n        foreach (c; v.to!string)\n\
    \            sum[i] += c.to!long - '0'.to!long;\n    }\n    auto result = new\
    \ long[nums.length];\n    foreach (i, v; nums)\n    {\n        auto min = minElement(sum);\n\
    \        result[i] = nums[min];\n        sum[min] = max(sum);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    foreach(i, num; nums)\n    {\n        sums[i]\
    \ = num.to!string.sumOfDigits;\n    }\n    foreach(i, num; nums)\n    {\n    \
    \    auto index = sums.indexOf(num.to!string.sumOfDigits);\n        result[index]\
    \ = num;\n    }\n    return result;\n}", "{\n    long[] res = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    foreach(i, v; nums)\n    {\n    \
    \    sums[i] = sumDigits(v);\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ v; sorted)\n    {\n        res[i] = nums[v];\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = 0;\n   \
    \     while (nums[i] != 0)\n        {\n            temp += nums[i] % 10;\n   \
    \         nums[i] /= 10;\n        }\n        sum[i] = temp;\n    }\n    int[]\
    \ index = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        index[i] = i;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n       \
    \     if (sum[i] > sum[j])\n            {\n                int temp = sum[i];\n\
    \                sum[i] = sum[j];\n                sum[j] = temp;\n          \
    \      temp = index[i];\n                index[i] = index[j];\n              \
    \  index[j] = temp;\n            }\n        }\n    }\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}", "{\n    auto sum = (long n) {\n        long sum = 0;\n        while\
    \ (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n  \
    \      return sum;\n    };\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) {\n        auto sa = sum(a);\n        auto sb = sum(b);\n        return sa\
    \ < sb || (sa == sb && a < b);\n    });\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n      \
    \  long sum = 0;\n        while (n != 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto result\
    \ = new long[nums.length];\n    foreach (i, ref n; nums)\n    {\n        auto\
    \ min = sums[0];\n        auto min_index = 0;\n        for (int j = 1; j < sums.length;\
    \ j++)\n        {\n            if (sums[j] < min)\n            {\n           \
    \     min = sums[j];\n                min_index = j;\n            }\n        }\n\
    \        result[i] = nums[min_index];\n        sums[min_index] = long.max;\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \     sum[i] = 0;\n        long n = nums[i];\n        if (n < 0)\n           \
    \ n = -n;\n        while (n > 0)\n        {\n            sum[i] += n % 10;\n \
    \           n /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n       \
    \     if (sum[i] > sum[j] || (sum[i] == sum[j] && index[i] > index[j]))\n    \
    \        {\n                int t = sum[i];\n                sum[i] = sum[j];\n\
    \                sum[j] = t;\n                t = index[i];\n                index[i]\
    \ = index[j];\n                index[j] = t;\n            }\n        }\n    }\n\
    \    for (int i = 0; i < nums.length; i++)\n        result[i] = nums[index[i]];\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        sums[i] = sumDigits(nums[i]);\n    }\n    int[] indices = sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    if (nums.length == 0)\n        return\
    \ nums;\n    long[] sums = new long[nums.length];\n    foreach (i, n; nums)\n\
    \    {\n        long sum = 0;\n        while (n != 0)\n        {\n           \
    \ sum += n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    return nums[$sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b]\
    \ && a < b))];\n}", "{\n    if (nums.length == 0)\n        return nums;\n    long[]\
    \ sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n        sums[i]\
    \ = sum(n.digits);\n    }\n    return nums.sort(sums);\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    \n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    \n    long[] sorted = nums.dup;\n    sort(sorted, (a, b) => sums[a]\
    \ < sums[b]);\n    return sorted;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, v; nums)\n    {\n  \
    \      sums[i] = sumDigits(v);\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ v; sorted)\n    {\n        result[i] = nums[v];\n    }\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    auto nums_with_points\
    \ = new Tuple!(long, long)[nums.length];\n    foreach (i, num; nums)\n    {\n\
    \        long sum = 0;\n        foreach (c; num.to!string)\n            sum +=\
    \ c.to!long - '0'.to!long;\n        nums_with_points[i] = tuple(num, sum);\n \
    \   }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    foreach (i, num; nums_with_points)\n        nums[i] = num[0];\n\
    \    return nums;\n}", "{\n    auto a = nums.dup;\n    a.sort!((a, b) => a.sumDigits()\
    \ < b.sumDigits());\n    return a;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \        indexes[i] = i;\n    }\n    sort(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[(int)indexes[i]];\n \
    \   }\n    return result;\n}\nlong sumDigits(long num)\n{\n    long sum = 0;\n\
    \    while (num != 0)\n    {\n        sum += num % 10;\n        num /= 10;\n \
    \   }\n    return sum;\n}", "{\n    int[] sums = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].to!string.sum!(a\
    \ => a.to!int - '0'.to!int);\n    }\n    return nums.dup.sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b));\n}", "{\n    auto points = new\
    \ long[nums.length];\n    foreach (i, n; nums)\n    {\n        points[i] = n.abs.sumDigits;\n\
    \    }\n    auto result = nums.dup;\n    sort!((a, b) => points[a] < points[b]\
    \ || (points[a] == points[b] && a < b))(result);\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto sums = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        long sum = 0;\n        foreach (c; n.to!string)\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    auto indices = new int[nums.length];\n    foreach (i; 0 .. nums.length)\n\
    \        indices[i] = i;\n    std.algorithm.sort!(\"a[i] < a[j]\")(sums, indices);\n\
    \    auto result = new long[nums.length];\n    foreach (i; 0 .. nums.length)\n\
    \        result[i] = nums[indices[i]];\n    return result;\n}", "{\n    auto result\
    \ = nums.dup;\n    auto sums = new long[result.length];\n    foreach(i, ref n;\
    \ result)\n    {\n        sums[i] = n.sumDigits;\n    }\n    sort(result, sums);\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n \
    \       long sum = 0;\n        foreach (c; to!string(n))\n            sum += c.to!long\
    \ - '0'.to!long;\n        sums[i] = sum;\n    }\n    auto t = tuple(nums, sums);\n\
    \    t.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return\
    \ t.expand.map!(a => a[0]).array;\n}", "{\n    if (nums.length == 0)\n       \
    \ return nums;\n    \n    auto sums = new long[nums.length];\n    foreach (i,\
    \ n; nums)\n    {\n        long sum = 0;\n        foreach (c; to!string(n))\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    \n    auto indices = new size_t[nums.length];\n    foreach (i; 0 .. nums.length)\n\
    \        indices[i] = i;\n    \n    sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b))(indices);\n    \n    auto result = new long[nums.length];\n\
    \    foreach (i, j; indices)\n        result[i] = nums[j];\n    \n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - sums[i]\
    \ % 10;\n            sums[i] = sums[i] / 10;\n        }\n    }\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sums[i] < sums[j])\n            {\n       \
    \         long temp = sums[i];\n                sums[i] = sums[j];\n         \
    \       sums[j] = temp;\n                temp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    return nums;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sums = new int[nums.length];\n    foreach(i, num; nums)\n    {\n        sums[i]\
    \ = sumDigits(num);\n    }\n    auto sorted = sort(sums);\n    foreach(i, num;\
    \ nums)\n    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n\
    }", "{\n    // your code here\n    long[] result = new long[nums.length];\n  \
    \  long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n        int minIndex\
    \ = i;\n        for (int j = i; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] < min)\n            {\n                min = sums[j];\n        \
    \        minIndex = j;\n            }\n        }\n        result[i] = nums[minIndex];\n\
    \        sums[minIndex] = sums[i];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  foreach(i, num; nums)\n    {\n        sums[i] = sumDigits(num);\n    }\n  \
    \  int[] sorted = sort(sums);\n    foreach(i, num; nums)\n    {\n        result[i]\
    \ = nums[sorted[i]];\n    }\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    auto sums = new long[result.length];\n    foreach(i, nums; i < result.length)\n\
    \    {\n        auto n = nums[i];\n        auto sum = 0L;\n        while(n !=\
    \ 0)\n        {\n            sum += n % 10;\n            n /= 10;\n        }\n\
    \        sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n    auto sorted_result\
    \ = new long[result.length];\n    foreach(i, sums; i < result.length)\n    {\n\
    \        auto index = sums.indexOf(sorted[i]);\n        sorted_result[i] = result[index];\n\
    \    }\n    return sorted_result;\n}", "{\n    auto sums = new long[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(num))\n\
    \        {\n            if(c.isDigit)\n                sum += c.to!long;\n   \
    \     }\n        sums[i] = sum;\n    }\n    auto zipped = zip(nums, sums);\n \
    \   zipped.sort!((a, b) => a[1] < b[1]);\n    return zipped.map!(a => a[0]).array;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    auto sums = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        long sum = 0;\n        foreach (c; to!string(n))\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    auto indices = sort!((a, b) => sums[a] < sums[b])(iota(nums.length));\n \
    \   return indices.map!(i => nums[i]).array;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = 0;\n        foreach (d; nums[i].to!string)\n\
    \        {\n            if (d.isDigit)\n                sums[i] += d.to!int;\n\
    \        }\n    }\n    auto sorted = sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] < b[1]))(zip(sums, iota(nums.length)));\n    return sorted.map!(a =>\
    \ nums[a[1]]).array;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto sums = new long[nums.length];\n    foreach (i, v; nums)\n    {\n   \
    \     sums[i] = v.abs;\n        while (sums[i] > 0)\n        {\n            sums[i]\
    \ -= sums[i] % 10;\n            sums[i] /= 10;\n        }\n    }\n    auto indices\
    \ = new int[nums.length];\n    foreach (i, v; nums)\n        indices[i] = i;\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n\
    \    auto result = new long[nums.length];\n    foreach (i, v; indices)\n     \
    \   result[i] = nums[v];\n    return result;\n}", "{\n    if (nums.length == 0)\n\
    \        return nums;\n    auto nums_with_sum = new tuple!(long, long)[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long sum = 0;\n        while (num\
    \ != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n   \
    \     }\n        nums_with_sum[i] = tuple(sum, i);\n    }\n    sort!((a, b) =>\
    \ a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]))(nums_with_sum);\n    auto result\
    \ = new long[nums.length];\n    foreach (i, num; nums_with_sum)\n        result[i]\
    \ = nums[num[1]];\n    return result;\n}", "{\n    auto nums_with_points = nums.map!(a\
    \ => tuple(a, a.to!string.map!(a => a.to!int).sum));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a\
    \ => a[0]).array;\n}", "{\n    if (nums.length == 0)\n        return nums;\n \
    \   auto nums_with_points = new long[][](nums.length);\n    foreach (i, num; nums)\n\
    \    {\n        nums_with_points[i] = new long[](2);\n        nums_with_points[i][0]\
    \ = num;\n        nums_with_points[i][1] = 0;\n        while (num != 0)\n    \
    \    {\n            nums_with_points[i][1] += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] ==\
    \ b[1] && a[0] < b[0]));\n    foreach (i, num; nums_with_points)\n        nums[i]\
    \ = num[0];\n    return nums;\n}", "{\n    auto nums_with_points = nums.map!(a\
    \ => tuple(a, a.sumDigits()));\n    nums_with_points.sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a => a[0]).array;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    foreach (char c; nums[i].to!string)\n        {\n            if (c.isDigit)\n\
    \            {\n                sum += c.to!int;\n            }\n        }\n \
    \       sums[i] = sum;\n    }\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        int min = sums[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sums[j] < min)\n  \
    \          {\n                min = sums[j];\n                min_index = j;\n\
    \            }\n        }\n        sums[min_index] = sums[i];\n        sums[i]\
    \ = min;\n        result[i] = nums[min_index];\n    }\n    return result;\n}",
  "{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long sum = 0;\n        while (num\
    \ != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n   \
    \     }\n        sums[i] = sum;\n    }\n    long[] result = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long min = sums[0];\n        long\
    \ min_index = 0;\n        foreach (j, sum; sums)\n        {\n            if (sum\
    \ < min)\n            {\n                min = sum;\n                min_index\
    \ = j;\n            }\n        }\n        result[i] = nums[min_index];\n     \
    \   sums[min_index] = long.max;\n    }\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto nums_with_points = new tuple[](nums.length);\n\
    \    foreach (i, num; nums)\n    {\n        long points = 0;\n        foreach\
    \ (c; num.to!string)\n        {\n            if (c.isDigit)\n                points\
    \ += c.to!long - '0'.to!long;\n        }\n        nums_with_points[i] = tuple(num,\
    \ points);\n    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] ==\
    \ b[1] && a[0] < b[0]));\n    foreach (i, num; nums_with_points)\n        nums[i]\
    \ = num[0];\n    return nums;\n}", "{\n    if (nums.length == 0)\n        return\
    \ nums;\n    auto sum = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long n = nums[i];\n        if (n < 0)\n            n =\
    \ -n;\n        while (n > 0)\n        {\n            sum[i] += n % 10;\n     \
    \       n /= 10;\n        }\n    }\n    auto index = new int[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n        index[i] = i;\n    sort!((a,\
    \ b) => sum[a] < sum[b] || (sum[a] == sum[b] && a < b))(index);\n    auto res\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n      \
    \  res[i] = nums[index[i]];\n    return res;\n}", "{\n    if (nums.length == 0)\n\
    \        return nums;\n    auto sums = new long[nums.length];\n    foreach (i,\
    \ n; nums)\n    {\n        sums[i] = n.abs;\n        while (sums[i] > 0)\n   \
    \     {\n            sums[i] -= sums[i] % 10;\n            sums[i] /= 10;\n  \
    \      }\n    }\n    auto indices = new long[nums.length];\n    foreach (i, _;\
    \ nums)\n        indices[i] = i;\n    auto result = new long[nums.length];\n \
    \   foreach (i, _; nums)\n    {\n        long min = sums[0];\n        long minIndex\
    \ = 0;\n        foreach (j, s; sums)\n        {\n            if (s < min)\n  \
    \          {\n                min = s;\n                minIndex = j;\n      \
    \      }\n        }\n        result[i] = nums[minIndex];\n        sums[minIndex]\
    \ = long.max;\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum[i] = nums[i];\n        while (sum[i] > 0)\n       \
    \ {\n            sum[i] = sum[i] / 10;\n            if (sum[i] > 0)\n        \
    \    {\n                sum[i] = sum[i] + (sum[i] % 10);\n            }\n    \
    \    }\n    }\n    int[] index = new int[nums.length];\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        index[i] = i;\n    }\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[i] > sum[j])\n            {\n                long\
    \ temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n\
    \                int temp2 = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp2;\n            }\n        }\n    }\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) =>\n    {\n        long sumA = 0;\n        long sumB = 0;\n        foreach(c;\
    \ a.to!string)\n        {\n            sumA += c.to!long - '0'.to!long;\n    \
    \    }\n        foreach(c; b.to!string)\n        {\n            sumB += c.to!long\
    \ - '0'.to!long;\n        }\n        return sumA < sumB;\n    });\n    return\
    \ result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indices = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n\
    }\nlong sumDigits(long num)\n{\n    long sum = 0;\n    while (num != 0)\n    {\n\
    \        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto sums = new long[nums.length];\n\
    \    auto indices = new long[nums.length];\n    foreach (i, n; nums)\n    {\n\
    \        sums[i] = sumDigits(n);\n        indices[i] = i;\n    }\n    sort!((a,\
    \ b) => a < b)(sums, indices);\n    auto result = new long[nums.length];\n   \
    \ foreach (i, n; nums)\n    {\n        result[i] = nums[indices[i]];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        long temp = nums[i];\n        if (temp < 0)\n        {\n       \
    \     temp = -temp;\n        }\n        while (temp > 0)\n        {\n        \
    \    sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        int min = i;\n        for\
    \ (int j = i + 1; j < nums.length; j++)\n        {\n            if (sum[j] < sum[min])\n\
    \            {\n                min = j;\n            }\n        }\n        if\
    \ (min != i)\n        {\n            long temp = sum[i];\n            sum[i] =\
    \ sum[min];\n            sum[min] = temp;\n            temp = nums[i];\n     \
    \       nums[i] = nums[min];\n            nums[min] = temp;\n        }\n    }\n\
    \    return nums;\n}", "{\n    if (nums.length == 0)\n        return nums;\n \
    \   auto nums_with_points = new Tuple!(long, long)[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long num\
    \ = nums[i];\n        while (num != 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        nums_with_points[i] = tuple(nums[i],\
    \ sum);\n    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1]\
    \ && a[0] < b[0]));\n    return nums_with_points.map!(x => x[0]).array;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        sums[i] = num.sumDigits();\n    }\n\
    \    long[] result = nums.dup;\n    sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b))(result);\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    foreach(i,\
    \ num; nums)\n    {\n        sums[i] = sum_digits(num);\n    }\n    sort(sums);\n\
    \    foreach(i, num; nums)\n    {\n        result[i] = num;\n    }\n    sort(result,\
    \ (a, b) => sum_digits(a) < sum_digits(b));\n    return result;\n}", "{\n    if\
    \ (nums.length == 0)\n        return nums;\n    auto result = new long[nums.length];\n\
    \    auto sums = new long[nums.length];\n    foreach (i, v; nums)\n    {\n   \
    \     sums[i] = v.abs.sumDigits;\n    }\n    auto sorted = sort(sums);\n    foreach\
    \ (i, v; sorted)\n    {\n        auto index = sums.indexOf(v);\n        result[i]\
    \ = nums[index];\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \     sum[i] = 0;\n        long n = nums[i];\n        while (n != 0)\n       \
    \ {\n            sum[i] += n % 10;\n            n /= 10;\n        }\n    }\n \
    \   sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n    foreach\
    \ (i, v; nums)\n    {\n        sums[i] = v.abs.sumDigits;\n    }\n    auto a =\
    \ zip(nums, sums);\n    a.sort!((a, b) => a[1] < b[1]);\n    return a.map!(x =>\
    \ x[0]).array;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        int temp = nums[i];\n        while (temp != 0)\n        {\n     \
    \       sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n    int[]\
    \ index = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        index[i] = i;\n    }\n    sort(sum, index);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n \
    \   return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indices = iota(nums.length).array;\n    sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    foreach (i, index;\
    \ indices)\n        result[i] = nums[index];\n    return result;\n}", "{\n   \
    \ long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sortedIndexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[sortedIndexes[i]];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] sums\
    \ = new int[nums.length];\n    foreach(i, num; nums)\n    {\n        int sum =\
    \ 0;\n        foreach(c; num.to!string)\n        {\n            if(c >= '0' &&\
    \ c <= '9')\n                sum += c - '0';\n        }\n        sums[i] = sum;\n\
    \    }\n    auto sorted = sort!((a, b) => a < b)(sums);\n    foreach(i, sum; sorted)\n\
    \    {\n        foreach(j, num; nums)\n        {\n            if(sum == sums[j])\n\
    \            {\n                result[i] = num;\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    else\n    {\n   \
    \     long[] result = new long[nums.length];\n        long[] sums = new long[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++)\n        {\n            sums[i]\
    \ = nums[i];\n            while (sums[i] != 0)\n            {\n              \
    \  sums[i] = sums[i] - (sums[i] % 10);\n                sums[i] = sums[i] / 10;\n\
    \            }\n        }\n        int[] indexes = new int[nums.length];\n   \
    \     for (int i = 0; i < nums.length; i++)\n            indexes[i] = i;\n   \
    \     sort(sums, indexes);\n        for (int i = 0; i < nums.length; i++)\n  \
    \          result[i] = nums[indexes[i]];\n        return result;\n    }\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto nums_with_points =\
    \ new Tuple!(long, long)[](nums.length);\n    foreach (i, num; nums)\n    {\n\
    \        auto points = 0L;\n        foreach (digit; num.to!string)\n         \
    \   points += digit.to!long;\n        nums_with_points[i] = tuple(num, points);\n\
    \    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    foreach (i, num_with_points; nums_with_points)\n        nums[i]\
    \ = num_with_points[0];\n    return nums;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    foreach(i, n; nums)\n    {\n    \
    \    int sum = 0;\n        foreach(c; to!string(n))\n        {\n            sum\
    \ += c.to!int - '0'.to!int;\n        }\n        sums[i] = sum;\n    }\n    auto\
    \ sorted = sort!((a, b) => a < b)(sums);\n    foreach(i, n; nums)\n    {\n   \
    \     result[sorted.indexOf(sums[i])] = n;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - sums[i]\
    \ % 10;\n            sums[i] = sums[i] / 10;\n        }\n    }\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n        int\
    \ index = i;\n        for (int j = i; j < nums.length; j++)\n        {\n     \
    \       if (sums[j] < min)\n            {\n                min = sums[j];\n  \
    \              index = j;\n            }\n        }\n        sums[index] = sums[i];\n\
    \        sums[i] = min;\n        result[i] = nums[index];\n    }\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    auto sums = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        long sum = 0;\n        while (n != 0)\n\
    \        {\n            sum += n % 10;\n            n /= 10;\n        }\n    \
    \    sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n    auto result = new\
    \ long[nums.length];\n    foreach (i, n; nums)\n    {\n        auto index = sorted.indexOf(sums[i]);\n\
    \        result[index] = n;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] sums\
    \ = new int[nums.length];\n    int[] indexes = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        indexes[i] = i;\n        sums[i]\
    \ = sumDigits(nums[i]);\n    }\n    sort(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}", "{\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n        while (nums[i]\
    \ != 0)\n        {\n            sums[i] += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n    }\n    long[] result = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        int min = sums[0];\n     \
    \   int min_index = 0;\n        for (int j = 0; j < sums.length; j++)\n      \
    \  {\n            if (sums[j] < min)\n            {\n                min = sums[j];\n\
    \                min_index = j;\n            }\n        }\n        result[i] =\
    \ nums[min_index];\n        sums[min_index] = int.max;\n    }\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    auto result = nums.dup;\n\
    \    auto sums = new int[nums.length];\n    foreach (i, n; nums)\n    {\n    \
    \    sums[i] = sumDigits(n);\n    }\n    sort!((a, b) => sums[a] < sums[b])(result);\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto nums_with_points = new long[][2](nums.length);\n    foreach (i, n; nums)\n\
    \    {\n        nums_with_points[i][0] = n;\n        nums_with_points[i][1] =\
    \ n.abs.to!string.sum!(a => a.to!long).to!long;\n    }\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a\
    \ => a[0]).array;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sortIndexes(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, n; nums)\n    {\n        sums[i] = n.abs;\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] -= sums[i] % 10;\n\
    \            sums[i] /= 10;\n        }\n    }\n    auto result = nums.dup;\n \
    \   sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n \
    \       long sum = 0;\n        foreach (c; to!string(n))\n            sum += c.to!int\
    \ - '0'.to!int;\n        sums[i] = sum;\n    }\n    auto zipped = zip(sums, nums);\n\
    \    zipped.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n \
    \   return zipped.map!(a => a[1]).array;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    int[] sortedSums\
    \ = sums.dup;\n    sort(sortedSums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int index = sums.indexOf(sortedSums[i]);\n        result[i] =\
    \ nums[index];\n    }\n    return result;\n}", "{\n    auto sum = (long n) =>\
    \ n.to!string.map!(a => a.to!long).sum;\n    auto result = nums.dup;\n    auto\
    \ sums = result.map!sum;\n    auto indices = iota(result.length);\n    sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    return\
    \ result[indices];\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n \
    \       sums[i] = n.abs;\n        while (sums[i] > 0)\n        {\n           \
    \ sums[i] -= sums[i] % 10;\n            sums[i] /= 10;\n        }\n    }\n   \
    \ return nums.sort!((a, b) => sums[a] > sums[b] || (sums[a] == sums[b] && a >\
    \ b));\n}", "{\n    if (nums.length == 0)\n        return nums;\n    auto sums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        long sum = 0;\n        long num = nums[i];\n        while (num != 0)\n\
    \        {\n            sum += num % 10;\n            num /= 10;\n        }\n\
    \        sums[i] = sum;\n    }\n    auto indices = new int[nums.length];\n   \
    \ for (int i = 0; i < nums.length; i++)\n        indices[i] = i;\n    sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    auto\
    \ result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \        result[i] = nums[indices[i]];\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, v; nums)\n    {\n        long sum = 0;\n        foreach(c; v.to!string)\n\
    \        {\n            if(c.isDigit)\n                sum += c.to!long;\n   \
    \     }\n        sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ v; sorted)\n    {\n        foreach(j, w; sums)\n        {\n            if(v\
    \ == w)\n            {\n                result[i] = nums[j];\n               \
    \ break;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, e; nums)\n    {\n        sums[i] = e.digits.sum;\n    }\n    auto\
    \ sort = sort!((a, b) => a > b);\n    sort(sums);\n    foreach(i, e; sums)\n \
    \   {\n        foreach(j, f; nums)\n        {\n            if(e == f.digits.sum)\n\
    \            {\n                result[i] = f;\n                nums[j] = 0;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].abs.to!string.sum.to!int;\n\
    \    }\n    auto sorted = sort!(\"a < b\")(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n\
    }", "{\n    // your code here\n    auto list = new long[nums.length];\n    auto\
    \ sum = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        list[i] = nums[i];\n        sum[i] = 0;\n        while(nums[i] !=\
    \ 0)\n        {\n            sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n    }\n    sort(list, sum);\n    return list;\n}", "{\n    auto points\
    \ = nums.map!(x => x.abs.sumDigits).array;\n    auto result = nums.dup;\n    sort!((a,\
    \ b) => points[a] < points[b] || (points[a] == points[b] && a < b))(result);\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    \n    auto nums_with_points = new tuple[](nums.length);\n    foreach (i,\
    \ num; nums)\n    {\n        long points = 0;\n        foreach (digit; num.to!string)\n\
    \            points += digit.to!long;\n        nums_with_points[i] = tuple(num,\
    \ points);\n    }\n    \n    nums_with_points.sort!((a, b) => a[1] < b[1]);\n\
    \    \n    foreach (i, num_with_points; nums_with_points)\n        nums[i] = num_with_points[0];\n\
    \    \n    return nums;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto nums_with_points = zip(nums, map!((x) => x.to!string().sum!((y) => y.to!int()))(nums));\n\
    \    sort!((x, y) => x[1] < y[1] || (x[1] == y[1] && x[0] < y[0]))(nums_with_points);\n\
    \    return map!((x) => x[0])(nums_with_points);\n}", "{\n    auto nums_with_index\
    \ = zip(nums, iota(nums.length));\n    auto nums_with_index_and_sum = map!(a =>\
    \ tuple(a[0], a[1], sum_digits(a[0])))(nums_with_index);\n    auto sorted_nums_with_index_and_sum\
    \ = sort!((a, b) => a[2] < b[2] || (a[2] == b[2] && a[1] < b[1]))(nums_with_index_and_sum);\n\
    \    return map!(a => a[0])(sorted_nums_with_index_and_sum);\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        long sum_temp = 0;\n        while (temp != 0)\n        {\n          \
    \  sum_temp += temp % 10;\n            temp /= 10;\n        }\n        sum[i]\
    \ = sum_temp;\n    }\n    int[] index = new int[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n    }\n    sort!((a,\
    \ b) => sum[a] < sum[b] || (sum[a] == sum[b] && a < b))(index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto a = new int[nums.length];\n    foreach (i, e; nums)\n    {\n       \
    \ a[i] = e.abs.to!int;\n    }\n    auto b = new int[nums.length];\n    foreach\
    \ (i, e; a)\n    {\n        int sum = 0;\n        while (e > 0)\n        {\n \
    \           sum += e % 10;\n            e /= 10;\n        }\n        b[i] = sum;\n\
    \    }\n    auto c = new int[nums.length];\n    foreach (i, e; b)\n    {\n   \
    \     c[i] = e;\n    }\n    auto d = new int[nums.length];\n    foreach (i, e;\
    \ nums)\n    {\n        d[i] = e.abs.to!int;\n    }\n    auto f = new int[nums.length];\n\
    \    foreach (i, e; nums)\n    {\n        f[i] = e.to!int;\n    }\n    auto g\
    \ = new int[nums.length];\n    foreach (i, e; nums)\n    {\n        g[i] = e.to!int;\n\
    \    }\n    auto h = new int[nums.length];\n    foreach (i, e; nums)\n    {\n\
    \        h[i] = e.to!int;\n    }\n    auto j = new int[nums.length];\n    foreach\
    \ (i, e; nums)\n    {\n        j[i] = e.to!int;\n    }\n    auto k = new int[nums.length];\n\
    \    foreach (i, e; nums)\n    {\n        k[i] = e.to!int;\n    }\n    auto l\
    \ = new int[nums.length];\n    foreach (i, e; nums)\n    {\n        l[i] = e.to!int;\n\
    \    }\n    auto m = new int[nums.length];\n    foreach (i, e; num", "{\n    if\
    \ (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long sum = 0;\n        foreach (c;\
    \ num.to!string)\n        {\n            if (c.isDigit)\n                sum +=\
    \ c.to!int;\n        }\n        sums[i] = sum;\n    }\n    auto zipped = zip(nums,\
    \ sums);\n    zipped.sort!((a, b) => a[1] < b[1]);\n    return zipped.map!(x =>\
    \ x[0]).array;\n}", "{\n    int[] sums;\n    int[] indices;\n    int[] sorted_indices;\n\
    \    int[] sorted_sums;\n    long[] sorted_nums;\n    int i;\n    int j;\n   \
    \ int k;\n    int len;\n    int sum;\n    int temp;\n    int temp2;\n    int temp3;\n\
    \    int temp4;\n    int temp5;\n    int temp6;\n    int temp7;\n    int temp8;\n\
    \    int temp9;\n    int temp10;\n    int temp11;\n    int temp12;\n    int temp13;\n\
    \    int temp14;\n    int temp15;\n    int temp16;\n    int temp17;\n    int temp18;\n\
    \    int temp19;\n    int temp20;\n    int temp21;\n    int temp22;\n    int temp23;\n\
    \    int temp24;\n    int temp25;\n    int temp26;\n    int temp27;\n    int temp28;\n\
    \    int temp29;\n    int temp30;\n    int temp31;\n    int temp32;\n    int temp33;\n\
    \    int temp34;\n    int temp35;\n    int temp36;\n    int temp37;\n    int temp38;\n\
    \    int temp39;\n    int temp40;\n    int temp41;\n    int temp42;\n    int temp43;\n\
    \    int temp44;\n    int temp45;\n    int temp46;\n    int temp47;\n    int temp48;\n\
    \    int temp49;\n    int temp50;\n    int temp51;\n    int temp52;\n    int temp53;\n\
    \    int temp54;\n    int temp55;\n    int temp56;\n    int temp57;\n    int temp58;\n\
    \    int temp59;\n    int temp60;\n    int temp61;\n    int temp62;\n    int temp63;\n\
    \    int temp64;\n    int temp65;\n    int temp66;\n    int temp67;\n    int temp68;\n\
    \    int temp69;\n    int temp70;\n    int temp71;\n    int temp72;\n    int temp73;\n\
    \    int temp74;\n    int", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto sums = new long[nums.length];\n    foreach (i, num; nums)\n    {\n \
    \       sums[i] = num.sumDigits();\n    }\n    auto indices = sort(sums);\n  \
    \  auto result = new long[nums.length];\n    foreach (i, index; indices)\n   \
    \ {\n        result[i] = nums[index];\n    }\n    return result;\n}", "{\n   \
    \ if (nums.length == 0)\n        return nums;\n    auto result = nums.dup;\n \
    \   sort!((a, b) => a.sumDigits() < b.sumDigits())(result);\n    return result;\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    auto nums_with_points\
    \ = zip(nums, map!(a => a.sum())(nums));\n    sort!((a, b) => a[1] < b[1] || (a[1]\
    \ == b[1] && a[0] < b[0]))(nums_with_points);\n    return map!(a => a[0])(nums_with_points);\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, n; nums)\n    {\n        long sum = 0;\n\
    \        while (n != 0)\n        {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto result = zip(nums,\
    \ sums);\n    result.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return result.map!(x => x[0]).array;\n}", "{\n    if (nums.length == 0)\n\
    \        return nums;\n    auto nums_with_points = new tuple[](nums.length);\n\
    \    foreach (i, num; nums)\n    {\n        long points = 0;\n        foreach\
    \ (digit; num.to!string)\n            points += digit.to!long;\n        nums_with_points[i]\
    \ = tuple(num, points);\n    }\n    nums_with_points.sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, num_with_points; nums_with_points)\n\
    \        nums[i] = num_with_points[0];\n    return nums;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        long num\
    \ = nums[i];\n        while (num != 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[] indexes\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        indexes[i] = i;\n    }\n    sort(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        int temp = nums[i];\n        while (temp != 0)\n        {\n     \
    \       sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n    int[]\
    \ index = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        index[i] = i;\n    }\n    sort(sum, index);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n \
    \   return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto d = new int[nums.length];\n    foreach (i, e; nums)\n    {\n       \
    \ d[i] = e.abs.digits.sum;\n    }\n    auto p = new int[nums.length];\n    foreach\
    \ (i, e; nums)\n    {\n        p[i] = i;\n    }\n    auto res = new long[nums.length];\n\
    \    auto t = new Tuple!(int, int)[nums.length];\n    foreach (i, e; nums)\n \
    \   {\n        t[i] = tuple(d[i], p[i]);\n    }\n    t.sort;\n    foreach (i,\
    \ e; t)\n    {\n        res[i] = nums[e[1]];\n    }\n    return res;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto nums_with_points =\
    \ new tuple[](nums.length);\n    foreach (i, num; nums)\n    {\n        nums_with_points[i]\
    \ = tuple(num, sum_digits(num));\n    }\n    nums_with_points.sort!((a, b) =>\
    \ a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, num; nums_with_points)\n\
    \    {\n        nums[i] = num[0];\n    }\n    return nums;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto sums = new long[nums.length];\n    foreach\
    \ (i, n; nums)\n    {\n        sums[i] = n.abs.digits.sum;\n    }\n    auto sorted\
    \ = sort(sums);\n    auto result = new long[nums.length];\n    foreach (i, n;\
    \ nums)\n    {\n        auto index = sorted.indexOf(n.abs.digits.sum);\n     \
    \   result[index] = n;\n    }\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto nums_with_points = new Tuple!(long, long)[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        nums_with_points[i] = tuple(num, sum_of_digits(num));\n\
    \    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    foreach (i, num; nums_with_points)\n    {\n        nums[i] =\
    \ num[0];\n    }\n    return nums;\n}", "{\n    if (nums.length == 0)\n      \
    \  return nums;\n    long[] sums = new long[nums.length];\n    foreach (i, n;\
    \ nums)\n    {\n        long sum = 0;\n        while (n != 0)\n        {\n   \
    \         sum += n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n\
    \    }\n    long[] result = new long[nums.length];\n    foreach (i, n; nums)\n\
    \    {\n        long min = sums[0];\n        long min_i = 0;\n        foreach\
    \ (j, s; sums)\n        {\n            if (s < min)\n            {\n         \
    \       min = s;\n                min_i = j;\n            }\n        }\n     \
    \   result[i] = nums[min_i];\n        sums[min_i] = long.max;\n    }\n    return\
    \ result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    auto sum\
    \ = new long[nums.length];\n    foreach (i, e; nums)\n    {\n        long s =\
    \ 0;\n        foreach (c; to!string(e))\n            s += c - '0';\n        sum[i]\
    \ = s;\n    }\n    auto sorted = sort!((a, b) => a < b)(sum);\n    auto result\
    \ = new long[nums.length];\n    foreach (i, e; nums)\n    {\n        auto index\
    \ = sorted.indexOf(sum[i]);\n        result[index] = e;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        sums[i] = sumDigits(num);\n    }\n\
    \    int[] sorted = sort(sums);\n    foreach(i, num; nums)\n    {\n        result[i]\
    \ = nums[sorted[i]];\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n        foreach (char\
    \ c; to!string(nums[i]).dup)\n        {\n            if (c >= '0' && c <= '9')\n\
    \                sums[i] += c - '0';\n        }\n    }\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        int min = sums[i];\n        int min_index\
    \ = i;\n        for (int j = i; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] < min)\n            {\n                min = sums[j];\n        \
    \        min_index = j;\n            }\n        }\n        sums[min_index] = sums[i];\n\
    \        sums[i] = min;\n        result[i] = nums[min_index];\n    }\n    return\
    \ result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    auto sums\
    \ = new long[nums.length];\n    foreach (i, n; nums)\n    {\n        sums[i] =\
    \ n.digits.sum;\n    }\n    auto indices = new long[nums.length];\n    foreach\
    \ (i, _; nums)\n    {\n        indices[i] = i;\n    }\n    sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    auto result = new\
    \ long[nums.length];\n    foreach (i, _; nums)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        int sum = 0;\n        foreach (char c; nums[i].to!string)\n\
    \        {\n            sum += c.to!int - '0'.to!int;\n        }\n        sums[i]\
    \ = sum;\n    }\n    auto sorted = sort(sums);\n    foreach (i, v; sorted)\n \
    \   {\n        result[i] = nums[v];\n    }\n    return result;\n}", "{\n    auto\
    \ nums_with_points = zip(nums, map!((x) => x.sum())(nums));\n    return sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(nums_with_points).map!(x\
    \ => x[0]).array();\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto sum = new long[nums.length];\n    foreach (i, v; nums)\n    {\n    \
    \    long s = 0;\n        foreach (c; to!string(v))\n            s += c.to!long\
    \ - '0'.to!long;\n        sum[i] = s;\n    }\n    auto zipped = zip(sum, nums);\n\
    \    zipped.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n \
    \   return zipped.map!(a => a[1]).array;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = 0;\n        foreach (char c; to!string(nums[i]))\n  \
    \      {\n            sum[i] += c - '0';\n        }\n    }\n    int[] index =\
    \ new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      index[i] = i;\n    }\n    sort!((a, b) => sum[a] < sum[b] || (sum[a] ==\
    \ sum[b] && a < b))(index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n    //\
    \ your code here\n    long[] result = new long[nums.length];\n    long[] sum =\
    \ new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n  \
    \      long temp = nums[i];\n        while(temp != 0)\n        {\n           \
    \ sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n    int[] index\
    \ = new int[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n \
    \       index[i] = i;\n    }\n    sort(sum, index);\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n\
    }", "{\n    auto nums_with_points = nums.map!(n => tuple(n, n.abs.sumDigits));\n\
    \    nums_with_points.sort!((a, b) => a[1] < b[1] || a[1] == b[1] && a[0] < b[0]);\n\
    \    return nums_with_points.map!(t => t[0]).array;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto sum = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n   \
    \     if (temp < 0)\n            temp *= -1;\n        while (temp > 0)\n     \
    \   {\n            sum[i] += temp % 10;\n            temp /= 10;\n        }\n\
    \    }\n    auto indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n        indices[i] = i;\n    sort!((a, b) => sum[a] < sum[b] || (sum[a]\
    \ == sum[b] && a < b))(indices);\n    auto result = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n        result[i] = nums[indices[i]];\n\
    \    return result;\n}", "{\n    auto sum = (long n) {\n        long res = 0;\n\
    \        while (n != 0) {\n            res += n % 10;\n            n /= 10;\n\
    \        }\n        return res;\n    };\n    auto cmp = (long a, long b) {\n \
    \       if (sum(a) == sum(b)) {\n            return a < b;\n        }\n      \
    \  return sum(a) < sum(b);\n    };\n    return nums.sort!cmp;\n}", "{\n    if\
    \ (nums.length == 0)\n        return nums;\n    else\n    {\n        int[] sums\
    \ = new int[nums.length];\n        foreach (i, n; nums)\n        {\n         \
    \   int sum = 0;\n            foreach (c; to!string(n))\n                sum +=\
    \ c.to!int() - '0'.to!int();\n            sums[i] = sum;\n        }\n        auto\
    \ zipped = zip(sums, nums);\n        zipped.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] < b[1]));\n        return zipped.map!(a => a[1]).array;\n  \
    \  }\n}", "{\n    if (nums.length == 0)\n        return nums;\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num != 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  int[] indexes = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n        indexes[i] = i;\n    indexes.sort!((a, b) => sums[a] < sums[b]);\n\
    \    for (int i = 0; i < nums.length; i++)\n        result[i] = nums[indexes[i]];\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto sum = new long[nums.length];\n    foreach (i, num; nums)\n    {\n  \
    \      long s = 0;\n        while (num != 0)\n        {\n            s += num\
    \ % 10;\n            num /= 10;\n        }\n        sum[i] = s;\n    }\n    auto\
    \ indices = new long[nums.length];\n    foreach (i, _; nums)\n        indices[i]\
    \ = i;\n    sort!((a, b) => sum[a] < sum[b] || (sum[a] == sum[b] && a < b))(indices);\n\
    \    auto result = new long[nums.length];\n    foreach (i, _; nums)\n        result[i]\
    \ = nums[indices[i]];\n    return result;\n}", "{\n    if (nums.length == 0)\n\
    \        return nums;\n    auto sums = new long[nums.length];\n    foreach (i,\
    \ n; nums)\n    {\n        long sum = 0;\n        foreach (c; to!string(n))\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    auto sorted = sort(zip(sums, nums));\n    return sorted.map!(a => a[1]).array;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto result = nums.dup;\n\
    \    auto sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n   \
    \     sums[i] = sum(n.digits);\n    }\n    auto indices = sort(sums);\n    foreach\
    \ (i, n; nums)\n    {\n        result[i] = nums[indices[i]];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a, b) => (sumDigits(a)\
    \ - sumDigits(b)) || (a - b));\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_of_digits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n    \
    \    while (nums[i] != 0)\n        {\n            sums[i] += nums[i] % 10;\n \
    \           nums[i] /= 10;\n        }\n    }\n    int[] indexes = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indexes[i] = i;\n \
    \   }\n    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indexes);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indexes = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indexes[i] = i;\n \
    \   }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        int sum = 0;\n        while (num != 0)\n        {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n\
    \    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto nums_with_points =\
    \ new tuple[](nums.length);\n    foreach (i, num; nums)\n    {\n        nums_with_points[i]\
    \ = tuple(num, sum_of_digits(num));\n    }\n    nums_with_points.sort!((a, b)\
    \ => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, num; nums_with_points)\n\
    \    {\n        nums[i] = num[0];\n    }\n    return nums;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto nums_with_points = new Tuple!(long, long)[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long points = 0;\n        foreach\
    \ (c; to!string(num))\n            points += c.to!long - '0'.to!long;\n      \
    \  nums_with_points[i] = tuple(num, points);\n    }\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, num; nums_with_points)\n\
    \        nums[i] = num[0];\n    return nums;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n        foreach (char\
    \ c; to!string(nums[i]).dup)\n        {\n            if (c >= '0' && c <= '9')\n\
    \                sums[i] += c - '0';\n        }\n    }\n    auto sorted = sort!((a,\
    \ b) => a[1] < b[1])(zip(nums, sums));\n    foreach (i, e; sorted)\n        result[i]\
    \ = e[0];\n    return result;\n}", "{\n    auto nums_with_points = zip(nums, map!(sum_digits)(nums));\n\
    \    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return map!(a => a[0])(nums_with_points);\n}", "{\n    if (nums.length ==\
    \ 0)\n        return nums;\n    auto nums_with_points = new tuple[](nums.length);\n\
    \    foreach (i, num; nums)\n    {\n        nums_with_points[i] = tuple(num, sum_digits(num));\n\
    \    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    return nums_with_points.map!(t => t[0]).array;\n}", "{\n    long[]\
    \ result = nums.dup;\n    result.sort!((a, b) => \n    {\n        long aSum =\
    \ 0;\n        long bSum = 0;\n        foreach(n; a.toString().split(\"\"))\n \
    \       {\n            aSum += to!long(n);\n        }\n        foreach(n; b.toString().split(\"\
    \"))\n        {\n            bSum += to!long(n);\n        }\n        return aSum\
    \ > bSum;\n    });\n    return result;\n}", "{\n    if (nums.length == 0)\n  \
    \      return nums;\n    auto result = nums.dup;\n    auto sums = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        sums[i] = sum_digits(num);\n    }\n\
    \    auto indexes = sort(sums);\n    foreach (i, index; indexes)\n    {\n    \
    \    result[i] = nums[index];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sum = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n        while\
    \ (n != 0)\n        {\n            sum[i] += n % 10;\n            n /= 10;\n \
    \       }\n    }\n    int[] index = new int[nums.length];\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        index[i] = i;\n    }\n    sort(sum, index);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indexes[i] = i;\n \
    \       sums[i] = 0;\n        long n = nums[i];\n        if (n < 0)\n        \
    \    n = -n;\n        while (n > 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    mergeSort(sums, indexes, 0, nums.length\
    \ - 1);\n    for (int i = 0; i < nums.length; i++)\n        result[i] = nums[(int)indexes[i]];\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    \n    auto nums_with_points = new Tuple!(long, long)[nums.length];\n    foreach\
    \ (i, num; nums)\n    {\n        long points = 0;\n        while (num != 0)\n\
    \        {\n            points += num % 10;\n            num /= 10;\n        }\n\
    \        nums_with_points[i] = tuple(points, nums[i]);\n    }\n    \n    nums_with_points.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n    \n    foreach (i,\
    \ num; nums_with_points)\n        nums[i] = num[1];\n    \n    return nums;\n}",
  "{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long num = nums[i];\n        int sum = 0;\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indices = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n        indices[i] = i;\n    sort(sums,\
    \ indices);\n    for (int i = 0; i < nums.length; i++)\n        result[i] = nums[indices[i]];\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto nums_with_points = zip(nums, map!(n => sum(map!(c => c - '0', to!string(n))),\
    \ nums));\n    auto sorted_nums_with_points = sort!((a, b) => a[1] < b[1] || (a[1]\
    \ == b[1] && a[0] < b[0]))(nums_with_points);\n    return map!(a => a[0])(sorted_nums_with_points);\n\
    }", "{\n    auto sums = new long[nums.length];\n    foreach(i, ref n; nums)\n\
    \    {\n        sums[i] = sum(n.digits);\n    }\n    auto sorted = sort!((a, b)\
    \ => a > b)(sums);\n    auto result = new long[nums.length];\n    foreach(i, ref\
    \ n; nums)\n    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n\
    }", "{\n    // your code here\n    long[] result = new long[nums.length];\n  \
    \  long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    long[] sorted\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sorted[i] == sums[j])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        int sum = 0;\n        int num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    return sort!((a, b) => sums[a]\
    \ < sums[b])(iota(nums.length)).map!(i => nums[i]).array;\n}", "{\n    long[]\
    \ result = nums.dup;\n    int[] sums = new int[nums.length];\n    foreach(i, n;\
    \ nums)\n    {\n        int sum = 0;\n        while(n != 0)\n        {\n     \
    \       sum += n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n\
    \    }\n    sort!((a, b) => a < b)(sums, result);\n    return result;\n}", "{\n\
    \    if (nums.length == 0) return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        long sum = 0;\n        while (n != 0)\n\
    \        {\n            sum += n % 10;\n            n /= 10;\n        }\n    \
    \    sums[i] = sum;\n    }\n    auto result = nums.dup;\n    sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b))(result);\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if (sum[i] > sum[j])\n  \
    \          {\n                int temp = sum[i];\n                sum[i] = sum[j];\n\
    \                sum[j] = temp;\n                temp = index[i];\n          \
    \      index[i] = index[j];\n                index[j] = temp;\n            }\n\
    \        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[index[i]];\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    long[] sums = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long num =\
    \ nums[i];\n        while (num != 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[] indices\
    \ = iota(nums.length).array;\n    sort(indices, (a, b) => sums[a] < sums[b] ||\
    \ (sums[a] == sums[b] && a < b));\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long num\
    \ = nums[i];\n        while (num != 0)\n        {\n            sums[i] += num\
    \ % 10;\n            num /= 10;\n        }\n    }\n    sort(sums, indices);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) =>\n    {\n        long sumA = 0;\n        long sumB = 0;\n        foreach(digit;\
    \ a.to!string)\n        {\n            sumA += digit.to!long;\n        }\n   \
    \     foreach(digit; b.to!string)\n        {\n            sumB += digit.to!long;\n\
    \        }\n        return sumA < sumB;\n    });\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n    }\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(indices);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        sums[i] = sumDigits(n);\n    }\n    auto\
    \ t = tuple(nums, sums);\n    t.sort!((a, b) => a[1] < b[1]);\n    foreach(i,\
    \ n; t)\n    {\n        result[i] = n[0];\n    }\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    int[] indices\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[indices[i]];\n    }\n    return result;\n}\nlong sumDigits(long n)\n\
    {\n    long sum = 0;\n    while (n != 0)\n    {\n        sum += n % 10;\n    \
    \    n /= 10;\n    }\n    return sum;\n}", "{\n    if (nums.length == 0)\n   \
    \     return nums;\n    auto nums_with_points = new Tuple!(long, long)[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        nums_with_points[i] = tuple(num, sum_of_digits(num));\n\
    \    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    return nums_with_points.map!(t => t[0]).array;\n}", "{\n    if\
    \ (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n            nums[i] = nums[i] / 10;\n \
    \       }\n    }\n    int[] index = new int[nums.length];\n    for (int i = 0;\
    \ i < nums.length; i++)\n        index[i] = i;\n    sort(sums, index);\n    long[]\
    \ result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \        result[i] = nums[index[i]];\n    return result;\n}", "{\n    long[] res\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        foreach (int\
    \ digit; nums[i].digits)\n        {\n            sum += digit;\n        }\n  \
    \      sums[i] = sum;\n    }\n    int[] sorted = sums.dup;\n    sorted.sort;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sorted[i]);\n\
    \        res[i] = nums[index];\n    }\n    return res;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        int sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indices = iota(nums.length).array;\n\
    \    sort!(\"a[i] < a[j]\")(sums, indices);\n    for (int i = 0; i < nums.length;\
    \ i++)\n        result[i] = nums[indices[i]];\n    return result;\n}", "{\n  \
    \  auto result = nums.dup;\n    auto sums = new long[result.length];\n    foreach(i,\
    \ nums; i < result.length)\n    {\n        sums[i] = sum_digits(nums[i]);\n  \
    \  }\n    sort!((a, b) => a < b)(result, sums);\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    auto nums_with_points =\
    \ nums.map!(a => tuple(a, a.abs.sumDigits));\n    nums_with_points.sort!((a, b)\
    \ => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a\
    \ => a[0]).array;\n}", "{\n    if (nums.length == 0)\n        return nums;\n \
    \   auto list = new Tuple!(long, long)[nums.length];\n    foreach (i, n; nums)\n\
    \    {\n        list[i] = tuple(n, sumDigits(n));\n    }\n    sort(list);\n  \
    \  foreach (i, t; list)\n    {\n        nums[i] = t[0];\n    }\n    return nums;\n\
    }", "{\n    auto result = nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n\
    \    return result;\n}", "{\n    long[] result = nums.dup;\n    auto sum = (long\
    \ x) => x.to!string.map!((c) => c.to!long).sum;\n    result.sort!((a, b) => sum(a)\
    \ > sum(b));\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n    }\n    int[] indices\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[indices[i]];\n    }\n    return result;\n}", "{\n    auto nums_with_points\
    \ = zip(nums, map!(sum_digits)(nums));\n    nums_with_points.sort!((a, b) => a[1]\
    \ < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0])(nums_with_points);\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            temp\
    \ += num % 10;\n            num /= 10;\n        }\n        sum[i] = temp;\n  \
    \  }\n    for (int i = 0; i < nums.length; i++)\n    {\n        int min = i;\n\
    \        for (int j = i + 1; j < nums.length; j++)\n        {\n            if\
    \ (sum[j] < sum[min])\n            {\n                min = j;\n            }\n\
    \        }\n        int temp = sum[i];\n        sum[i] = sum[min];\n        sum[min]\
    \ = temp;\n        long temp2 = nums[i];\n        nums[i] = nums[min];\n     \
    \   nums[min] = temp2;\n    }\n    return nums;\n}", "{\n    long[] res = nums.dup;\n\
    \    auto sums = new long[res.length];\n    foreach(i, e; res)\n    {\n      \
    \  sums[i] = sum_digits(e);\n    }\n    sort!((a, b) => a < b)(sums, res);\n \
    \   return res;\n}", "{\n    if (nums.length == 0)\n        return nums;\n   \
    \ auto nums_with_points = new Tuple!(long, long)[nums.length];\n    foreach (i,\
    \ num; nums)\n    {\n        nums_with_points[i] = tuple(num, sum_of_digits(num));\n\
    \    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    return nums_with_points.map!(t => t[0]).array;\n}", "{\n    auto\
    \ result = nums.dup;\n    auto sums = new long[result.length];\n    foreach(i,\
    \ ref n; result)\n    {\n        long sum = 0;\n        foreach(c; to!string(n))\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    sort!((a, b) => sums[a] < sums[b])(result);\n    return result;\n\
    }", "{\n    int[] sums = new int[nums.length];\n    foreach(i, v; nums)\n    {\n\
    \        sums[i] = 0;\n        foreach(c; v.to!string)\n        {\n          \
    \  if(c.isDigit)\n                sums[i] += c.to!int;\n        }\n    }\n   \
    \ return nums.dup.sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] &&\
    \ a < b));\n}", "{\n    if (nums.length == 0) return nums;\n    auto sum = new\
    \ long[nums.length];\n    foreach (i, v; nums)\n    {\n        sum[i] = v.abs;\n\
    \        while (sum[i] > 0)\n        {\n            sum[i] -= sum[i] % 10;\n \
    \           sum[i] /= 10;\n        }\n    }\n    auto res = new long[nums.length];\n\
    \    foreach (i, v; nums)\n    {\n        res[sum[i]] = v;\n    }\n    return\
    \ res;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach\
    \ (i, x; nums)\n    {\n        sums[i] = sum(digits(x));\n    }\n    auto sorted\
    \ = sort(sums);\n    foreach (i, x; sorted)\n    {\n        foreach (j, y; sums)\n\
    \        {\n            if (x == y)\n            {\n                result[i]\
    \ = nums[j];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] sums\
    \ = new int[nums.length];\n    foreach(int i, long num; nums)\n    {\n       \
    \ int sum = 0;\n        while(num != 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[] indices\
    \ = new int[nums.length];\n    foreach(int i; 0 .. nums.length)\n    {\n     \
    \   indices[i] = i;\n    }\n    sort(sums, indices);\n    foreach(int i; 0 ..\
    \ nums.length)\n    {\n        result[i] = nums[indices[i]];\n    }\n    return\
    \ result;\n}", "{\n    auto result = nums.dup;\n    auto sums = new long[result.length];\n\
    \    foreach(i, ref n; result)\n    {\n        long sum = 0;\n        foreach(c;\
    \ to!string(n))\n        {\n            if(c >= '0' && c <= '9')\n           \
    \     sum += c - '0';\n        }\n        sums[i] = sum;\n    }\n    sort!((a,\
    \ b) => a < b)(sums, result);\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    auto res = new long[nums.length];\n    auto\
    \ sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n        sums[i]\
    \ = n.abs.sumDigits;\n    }\n    auto sorted = sort(sums);\n    foreach (i, n;\
    \ sorted)\n    {\n        auto index = sums.indexOf(n);\n        res[i] = nums[index];\n\
    \    }\n    return res;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[0];\n\
    \        int minIndex = 0;\n        for (int j = 1; j < nums.length; j++)\n  \
    \      {\n            if (sums[j] < min)\n            {\n                min =\
    \ sums[j];\n                minIndex = j;\n            }\n        }\n        result[i]\
    \ = nums[minIndex];\n        sums[minIndex] = long.max;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        sums[i] = sumDigits(num);\n    }\n\
    \    auto sorted = sort(sums);\n    foreach(i, sum; sorted)\n    {\n        foreach(j,\
    \ num; nums)\n        {\n            if(sum == sumDigits(num))\n            {\n\
    \                result[i] = num;\n                nums[j] = 0;\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    int num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}",
  "{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach (i, v; nums)\n    {\n \
    \       long sum = 0;\n        foreach (c; to!string(v))\n            sum += c.to!long\
    \ - '0'.to!long;\n        sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n\
    \    foreach (i, v; sorted)\n    {\n        foreach (j, w; sums)\n        {\n\
    \            if (v == w)\n            {\n                result[i] = nums[j];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        int sum = 0;\n        foreach(c; to!string(n))\n\
    \        {\n            if(c >= '0' && c <= '9')\n                sum += c - '0';\n\
    \        }\n        sums[i] = sum;\n    }\n    foreach(i, n; nums)\n    {\n  \
    \      int min = sums[i];\n        int min_index = i;\n        foreach(j, m; nums[i..$])\n\
    \        {\n            if(sums[j] < min)\n            {\n                min\
    \ = sums[j];\n                min_index = j;\n            }\n        }\n     \
    \   result[i] = nums[min_index];\n        sums[min_index] = int.max;\n    }\n\
    \    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
