language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoew8kyy1.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpoew8kyy1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoew8kyy1.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpoew8kyy1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyvagmr82.d(83): Error: expression expected, not `unittest`\n/tmp/tmpyvagmr82.d(84):
    Error: found `{` when expecting `,`\n/tmp/tmpyvagmr82.d(85): Error: expression
    expected, not `alias`\n/tmp/tmpyvagmr82.d(85): Error: found `candidate` when expecting
    `,`\n/tmp/tmpyvagmr82.d(85): Error: expression expected, not `=`\n/tmp/tmpyvagmr82.d(85):
    Error: found `all_prefixes` when expecting `,`\n/tmp/tmpyvagmr82.d(85): Error:
    expression expected, not `;`\n/tmp/tmpyvagmr82.d(87): Error: found `assert` when
    expecting `,`\n/tmp/tmpyvagmr82.d(87): Error: found `;` when expecting `,`\n/tmp/tmpyvagmr82.d(88):
    Error: found `;` when expecting `,`\n/tmp/tmpyvagmr82.d(89): Error: found `;`
    when expecting `,`\n/tmp/tmpyvagmr82.d(90): Error: expression expected, not `}`\n/tmp/tmpyvagmr82.d(91):
    Error: found `void` when expecting `,`\n/tmp/tmpyvagmr82.d(91): Error: found `{`
    when expecting `,`\n/tmp/tmpyvagmr82.d(91): Error: expression expected, not `}`\n/tmp/tmpyvagmr82.d(91):
    Error: found `End of File` when expecting `,`\n/tmp/tmpyvagmr82.d(91): Error:
    found `End of File` when expecting `]`\n/tmp/tmpyvagmr82.d(91): Error: found `End
    of File` when expecting `;` following statement\n/tmp/tmpyvagmr82.d(91): Error:
    found `End of File` when expecting `}` following compound statement\n/tmp/tmpyvagmr82.d(91):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyvagmr82.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result\
    \ ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdcleki50.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdcleki50.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result\
    \ ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdcleki50.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdcleki50.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result\
    \ ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdcleki50.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdcleki50.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length)\
    \ \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpza4wieby.d(83): Error: found `unittest` instead of statement\n/tmp/tmpza4wieby.d(91):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpza4wieby.d(91):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpza4wieby.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ece7lit.d(79): Error: expression expected, not `unittest`\n/tmp/tmp4ece7lit.d(80):
    Error: found `{` when expecting `,`\n/tmp/tmp4ece7lit.d(81): Error: expression
    expected, not `alias`\n/tmp/tmp4ece7lit.d(81): Error: found `candidate` when expecting
    `,`\n/tmp/tmp4ece7lit.d(81): Error: expression expected, not `=`\n/tmp/tmp4ece7lit.d(81):
    Error: found `all_prefixes` when expecting `,`\n/tmp/tmp4ece7lit.d(81): Error:
    expression expected, not `;`\n/tmp/tmp4ece7lit.d(83): Error: found `assert` when
    expecting `,`\n/tmp/tmp4ece7lit.d(83): Error: found `;` when expecting `,`\n/tmp/tmp4ece7lit.d(84):
    Error: found `;` when expecting `,`\n/tmp/tmp4ece7lit.d(85): Error: found `;`
    when expecting `,`\n/tmp/tmp4ece7lit.d(86): Error: expression expected, not `}`\n/tmp/tmp4ece7lit.d(87):
    Error: found `void` when expecting `,`\n/tmp/tmp4ece7lit.d(87): Error: found `{`
    when expecting `,`\n/tmp/tmp4ece7lit.d(87): Error: expression expected, not `}`\n/tmp/tmp4ece7lit.d(87):
    Error: found `End of File` when expecting `,`\n/tmp/tmp4ece7lit.d(87): Error:
    found `End of File` when expecting `]`\n/tmp/tmp4ece7lit.d(87): Error: found `End
    of File` when expecting `;` following statement\n/tmp/tmp4ece7lit.d(87): Error:
    found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ece7lit.d(87):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ece7lit.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1xw3lc0.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1xw3lc0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result\
    \ ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdcleki50.d(11): Error: `string` is used as a type\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdcleki50.d", "-I/tmp"]\n'''
  stdout: b''
