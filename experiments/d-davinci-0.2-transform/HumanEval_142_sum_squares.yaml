name: HumanEval_142_sum_squares
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take\
  \ a list of integers. For all entries in the list, the function shall square the\
  \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
  \ entry if its index is a multiple of 4 and not a multiple of 3. The function will\
  \ not \n    change the entries in the list whose indexes are not a multiple of 3\
  \ or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n\
  \    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L,\
  \ 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
  \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
  \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
  \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L])\
  \ == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L,\
  \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L,\
  \ 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n\
  \    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L,\
  \ 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x *= x;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            x *= x * x;\n        }\n        sum += x;\n  \
    \  }\n    return sum;\n}\n/*\n\"\n    This function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,\
    \ ref x; lst)\n    {\n        if(i % 3 == 0)\n        {\n            x *= x;\n\
    \        }\n        else if(i % 4 == 0)\n        {\n            x *= x * x;\n\
    \        }\n        sum += x;\n    }\n    return sum;\n}\n/*\n\"\n    This function\
    \ will take a list of integers. For all entries in the list, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\n", "{\n    long sum = 0;\n\
    \    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n        {\n          \
    \  sum += e * e;\n        }\n        else if(i % 4 == 0 && i % 3 != 0)\n     \
    \   {\n            sum += e * e * e;\n        }\n        else\n        {\n   \
    \         sum += e;\n        }\n    }\n    return sum;\n}", "{\n    long sum =\
    \ 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n        {\n     \
    \       sum += e * e;\n        }\n        else if(i % 4 == 0 && i % 3 != 0)\n\
    \        {\n            sum += e * e * e;\n        }\n        else\n        {\n\
    \            sum += e;\n        }\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n        {\n   \
    \         sum += e * e;\n        }\n        else if(i % 4 == 0 && i % 3 != 0)\n\
    \        {\n            sum += e * e * e;\n        }\n        else\n        {\n\
    \            sum += e;\n        }\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0;\n    foreach(i, item; lst)\n    {\n        if(i % 3 == 0)\n        {\n\
    \            sum += item * item;\n        }\n        else if(i % 4 == 0 && i %\
    \ 3 != 0)\n        {\n            sum += item * item * item;\n        }\n    \
    \    else\n        {\n            sum += item;\n        }\n    }\n    return sum;\n\
    }", "{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 3 ==\
    \ 0)\n        {\n            sum += e * e;\n        }\n        else if (i % 4\
    \ == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n \
    \       {\n            sum += e;\n        }\n    }\n    return sum;\n}", "{\n\
    \    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if (i % 3 == 0) \n\
    \        {\n            sum += e * e;\n        } \n        else if (i % 4 == 0)\
    \ \n        {\n            sum += e * e * e;\n        } \n        else \n    \
    \    {\n            sum += e;\n        }\n    }\n    return sum;\n}", "{\n   \
    \ long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n     \
    \   {\n            sum += e * e;\n        }\n        else if(i % 4 == 0 && i %\
    \ 3 != 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}", "{\n\
    \    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n  \
    \      {\n            sum += e * e;\n        }\n        else if(i % 4 == 0 &&\
    \ i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}", "{\n\
    \    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i % 3 == 0)\n\
    \        {\n            sum += val * val;\n        }\n        else if(i % 4 ==\
    \ 0 && i % 3 != 0)\n        {\n            sum += val * val * val;\n        }\n\
    \        else\n        {\n            sum += val;\n        }\n    }\n    return\
    \ sum;\n}", "{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}", "{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}", "{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}", "{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += val * val;\n        }\n        else\
    \ if(i % 4 == 0 && i % 3 != 0)\n        {\n            sum += val * val * val;\n\
    \        }\n        else\n        {\n            sum += val;\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n \
    \       if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n    \
    \    else if(i % 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e *\
    \ e;\n        }\n        else\n        {\n            sum += e;\n        }\n \
    \   }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(i, val; lst)\n\
    \    {\n        if(i % 3 == 0)\n        {\n            sum += val * val;\n   \
    \     }\n        else if(i % 4 == 0 && i % 3 != 0)\n        {\n            sum\
    \ += val * val * val;\n        }\n        else\n        {\n            sum +=\
    \ val;\n        }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n\
    \        }\n        else if(i % 4 == 0 && i % 3 != 0)\n        {\n           \
    \ sum += e * e * e;\n        }\n        else\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n\
    \        }\n        else if(i % 4 == 0 && i % 3 != 0)\n        {\n           \
    \ sum += e * e * e;\n        }\n        else\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += e*e;\n  \
    \      }\n        else if(i % 4 == 0 && i % 3 != 0)\n        {\n            sum\
    \ += e*e*e;\n        }\n        else\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(i, e; lst)\
    \ \n    {\n        if (i % 3 == 0) \n        {\n            sum += e * e;\n  \
    \      }\n        else if (i % 4 == 0) \n        {\n            sum += e * e *\
    \ e;\n        }\n        else \n        {\n            sum += e;\n        }\n\
    \    }\n    return sum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
