name: HumanEval_102_choose_num
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive\
  \ numbers x and y and returns the\n    biggest even integer number that is in the\
  \ range [x, y] inclusive. If \n    there's no such number, then the function should\
  \ return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>>\
  \ choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n"
tests: "unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
  \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
  \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
  \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
  \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
completions: ["{\n    long z = -1;\n    if (x % 2 == 0)\n    {\n        z = x;\n \
    \   }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n   \
    \     z = -1;\n    }\n    return z;\n}", "{\n    if (x > y)\n    {\n        return\
    \ -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n\
    \        {\n            if (z % 2 == 0)\n            {\n                return\
    \ z;\n            }\n            else\n            {\n                z++;\n \
    \           }\n        }\n        return -1L;\n    }\n}", "{\n    long result\
    \ = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    if (x % 2 ==\
    \ 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x +\
    \ 1;\n    }\n    return result;\n}", "{\n    long result = -1;\n    if (x % 2\
    \ == 0) {\n        result = x;\n    } else {\n        result = x + 1;\n    }\n\
    \    if (result > y) {\n        result = -1;\n    }\n    return result;\n}", "{\n\
    \    long z = x;\n    while (z <= y)\n    {\n        if (z % 2 == 0)\n       \
    \ {\n            return z;\n        }\n        z++;\n    }\n    return -1;\n}",
  "{\n    static assert(x >= 0L);\n    static assert(y >= 0L);\n    static assert(x\
    \ <= y);\n    long z = y;\n    while (z >= x)\n    {\n        if (z % 2L == 0L)\n\
    \        {\n            return z;\n        }\n        z--;\n    }\n    return\
    \ -1L;\n}", "{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result\
    \ = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result\
    \ > y)\n    {\n        result = -1;\n    }\n    return result;\n}", "{\n    if\
    \ (x > y)\n        return -1;\n    else\n    {\n        long z = x % 2;\n    \
    \    if (z == 0)\n            return x;\n        else\n            return x +\
    \ 1;\n    }\n}", "{\n    long result = -1;\n    if (x > y)\n    {\n        return\
    \ result;\n    }\n    else if (x % 2 == 0)\n    {\n        result = x;\n    }\n\
    \    else\n    {\n        result = x + 1;\n    }\n    return result;\n}", "{\n\
    \    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n\
    \    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n         \
    \   if (i % 2 == 0)\n            {\n                result = i;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    if (x > y)\n    {\n       \
    \ return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <=\
    \ y)\n        {\n            if (z % 2 == 0)\n            {\n                return\
    \ z;\n            }\n            else\n            {\n                z = z +\
    \ 1;\n            }\n        }\n        return -1L;\n    }\n}", "{\n    long result\
    \ = -1;\n    if (x % 2 == 0) \n    {\n        result = x;\n    }\n    else \n\
    \    {\n        result = x + 1;\n    }\n    if (result > y) \n    {\n        result\
    \ = -1;\n    }\n    return result;\n}\n/*\nThis function takes a positive number\
    \ x and returns the biggest\n    odd integer number that is in the range [1, x]\
    \ inclusive. If there's no\n    such number, then the function should return -1.",
  "{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n   \
    \ }\n    else if (x+1 <= y)\n    {\n        result = x+1;\n    }\n    return result;\n\
    }", "{\n    long[] nums = new long[y-x+1];\n    long i = 0;\n    foreach(num;\
    \ x..y+1)\n    {\n        nums[i] = num;\n        i++;\n    }\n    foreach(num;\
    \ nums)\n    {\n        if(num % 2 == 0)\n        {\n            return num;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long result = -1;\n    if (x %\
    \ 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result\
    \ = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n \
    \   return result;\n}", "{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n\
    \        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n\
    \    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n\
    }", "{\n    if(x % 2 == 0)\n    {\n        return x;\n    }\n    else if(y % 2\
    \ == 0)\n    {\n        return y;\n    }\n    else\n    {\n        return -1;\n\
    \    }\n}", "{\n    // your code here\n    long result = -1;\n    if (x % 2 ==\
    \ 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x +\
    \ 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return\
    \ result;\n}", "{\n    long z = x;\n    while (z <= y)\n    {\n        if (z %\
    \ 2 == 0)\n        {\n            return z;\n        }\n        z++;\n    }\n\
    \    return -1;\n}", "{\n    if (x > y)\n    {\n        return -1L;\n    }\n \
    \   else\n    {\n        long z = x % 2;\n        if (z == 0)\n        {\n   \
    \         return x;\n        }\n        else\n        {\n            return choose_num(x\
    \ + 1, y);\n        }\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
