language: d
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpurofksj_.d(20): Error: no property `to` for type `long`\n/tmp/tmpurofksj_.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpurofksj_.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpurofksj_.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurofksj_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3jhmbjjk.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmp3jhmbjjk.__unittest_L27_C1() [0x427f52]\n??:?
    void tmp3jhmbjjk.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43067d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bc75]\n??:? runModuleUnitTests [0x42cbe1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x5dfc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5snvwy9w.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5snvwy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evens = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long\
    \ num; x)\n    {\n        int[] digits = [];\n        while(num > 0)\n       \
    \ {\n            digits ~= num % 10;\n            num /= 10;\n        }\n    \
    \    bool hasEven = false;\n        foreach(int digit; digits)\n        {\n  \
    \          if(evens.canFind(digit))\n            {\n                hasEven =\
    \ true;\n                break;\n            }\n        }\n        if(!hasEven)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6d12ltxf.d(30): Error: no property `canFind` for type `int[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d12ltxf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0oa2lk3.d(20): Error: no property `digits` for type `long`\n/tmp/tmpc0oa2lk3.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc0oa2lk3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzzv6j_jn.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzv6j_jn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits;\n    int[] temp;\n    int[] temp2;\n    int[] temp3;\n    int[] temp4;\n\
    \    int[] temp5;\n    int[] temp6;\n    int[] temp7;\n    int[] temp8;\n    int[]\
    \ temp9;\n    int[] temp10;\n    int[] temp11;\n    int[] temp12;\n    int[] temp13;\n\
    \    int[] temp14;\n    int[] temp15;\n    int[] temp16;\n    int[] temp17;\n\
    \    int[] temp18;\n    int[] temp19;\n    int[] temp20;\n    int[] temp21;\n\
    \    int[] temp22;\n    int[] temp23;\n    int[] temp24;\n    int[] temp25;\n\
    \    int[] temp26;\n    int[] temp27;\n    int[] temp28;\n    int[] temp29;\n\
    \    int[] temp30;\n    int[] temp31;\n    int[] temp32;\n    int[] temp33;\n\
    \    int[] temp34;\n    int[] temp35;\n    int[] temp36;\n    int[] temp37;\n\
    \    int[] temp38;\n    int[] temp39;\n    int[] temp40;\n    int[] temp41;\n\
    \    int[] temp42;\n    int[] temp43;\n    int[] temp44;\n    int[] temp45;\n\
    \    int[] temp46;\n    int[] temp47;\n    int[] temp48;\n    int[] temp49;\n\
    \    int[] temp50;\n    int[] temp51;\n    int[] temp52;\n    int[] temp53;\n\
    \    int[] temp54;\n    int[] temp55;\n    int[] temp56;\n    int[] temp57;\n\
    \    int[] temp58;\n    int[] temp59;\n    int[] temp60;\n    int[] temp61;\n\
    \    int[] temp62;\n    int[] temp63;\n    int[] temp64;\n    int[] temp65;\n\
    \    int[] temp66;\n    int[] temp67;\n   \nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6d8n4hw.d(88): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6d8n4hw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(e; x)\n    {\n        if(e.digits.all!(a => a % 2\
    \ != 0))\n        {\n            res ~= e;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx3nh0vst.d(20): Error: no property `digits` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3nh0vst.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] result = new long[x.length];\n    int count = 0;\n \
    \   for (i = 0; i < x.length; i++) {\n        bool flag = true;\n        long\
    \ temp = x[i];\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \      temp /= 10;\n        }\n        if (flag) {\n            result[count]\
    \ = x[i];\n            count++;\n        }\n    }\n    long[] final_result = new\
    \ long[count];\n    for (i = 0; i < count; i++) {\n        final_result[i] = result[i];\n\
    \    }\n    sort(final_result);\n    return final_result;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwy_kav7w.d(39): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwy_kav7w.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a\
    \ % 2 == 0).length == 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpebxmgmdi.d(20): Error: no property `digits` for type `long`\n/tmp/tmpebxmgmdi.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpebxmgmdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6ceybth.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428475]\n??:? void tmpe6ceybth.__unittest_L37_C1() [0x427f8e]\n??:?
    void tmpe6ceybth.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430811]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bd11]\n??:? runModuleUnitTests [0x42cc7d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884b]\n??:? _d_run_main [0x4287b6]\n??:? main [0x428207]\n??:?
    __libc_start_main [0x1437b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpusjj6ia9.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmpusjj6ia9.d(22):
    Error: cannot append type `long` to type `void[]`\n/tmp/tmpusjj6ia9.d(25): Error:
    no property `sort` for type `void[]`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpusjj6ia9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3jhmbjjk.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmp3jhmbjjk.__unittest_L27_C1() [0x427f52]\n??:?
    void tmp3jhmbjjk.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43067d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bc75]\n??:? runModuleUnitTests [0x42cbe1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x5dfc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6ceybth.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428475]\n??:? void tmpe6ceybth.__unittest_L37_C1() [0x427f8e]\n??:?
    void tmpe6ceybth.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430811]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bd11]\n??:? runModuleUnitTests [0x42cc7d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884b]\n??:? _d_run_main [0x4287b6]\n??:? main [0x428207]\n??:?
    __libc_start_main [0x1437b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return sort(result);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmk2crm01.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    for (int i = 0; i < x.length; i++)\n   \
    \ {\n        bool isUnique = true;\n        long num = x[i];\n        while (num\
    \ > 0)\n        {\n            if (num % 2 == 0)\n            {\n            \
    \    isUnique = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (isUnique)\n        {\n            result ~= x[i];\n\
    \        }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwo3z4hjr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5snvwy9w.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5snvwy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ num; x)\n    {\n        if(num.toString().length == 1)\n        {\n        \
    \    result[count] = num;\n            count++;\n        }\n        else\n   \
    \     {\n            bool isEven = false;\n            foreach(char c; num.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result[count] = num;\n                count++;\n            }\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6wovf2od.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto evenDigits = [](long n) {\n        while (n > 0) {\n            if (n\
    \ % 2 == 0) {\n                return true;\n            }\n            n /= 10;\n\
    \        }\n        return false;\n    };\n    return x.filter!(a => !evenDigits(a)).sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_3eryd3.d(17): Error: found \''n\'' when expecting \''.\''
    following long\n/tmp/tmpe_3eryd3.d(17): Error: found \'')\'' when expecting identifier
    following \''long.\''\n/tmp/tmpe_3eryd3.d(17): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpe_3eryd3.d(18): Error: expression expected, not \''while\''\n/tmp/tmpe_3eryd3.d(18):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpe_3eryd3.d(19): Error: expression
    expected, not \''if\''\n/tmp/tmpe_3eryd3.d(19): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpe_3eryd3.d(20): Error: expression expected, not \''return\''\n/tmp/tmpe_3eryd3.d(20):
    Error: found \''true\'' when expecting \'',\''\n/tmp/tmpe_3eryd3.d(20): Error:
    expression expected, not \'';\''\n/tmp/tmpe_3eryd3.d(21): Error: found \''}\''
    when expecting \'',\''\n/tmp/tmpe_3eryd3.d(22): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpe_3eryd3.d(23): Error: expression expected, not \''}\''\n/tmp/tmpe_3eryd3.d(24):
    Error: found \''return\'' when expecting \'',\''\n/tmp/tmpe_3eryd3.d(24): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpe_3eryd3.d(25): Error: expression
    expected, not \''}\''\n/tmp/tmpe_3eryd3.d(25): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpe_3eryd3.d(26): Error: expression expected, not \''return\''\n/tmp/tmpe_3eryd3.d(26):
    Error: found \''x\'' when expecting \'',\''\n/tmp/tmpe_3eryd3.d(26): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmpe_3eryd3.d(27): Error: expression expected,
    not \''}\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_3eryd3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n            i /= 10;\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu704acki.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zo6i32i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98diofch.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    0\") == 0 && i.toString().count(\"2\") == 0 && i.toString().count(\"4\") == 0\
    \ && i.toString().count(\"6\") == 0 && i.toString().count(\"8\") == 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzevejy1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            res ~= i;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6ru1y_5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1snh0eem.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpotu1r9fv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ is_unique = true;\n        while(i > 0)\n        {\n            if(i % 2 ==\
    \ 0)\n            {\n                is_unique = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(is_unique)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijl8rk84.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool even = false;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c.to!int % 2 == 0)\n                {\n                  \
    \  even = true;\n                    break;\n                }\n            }\n\
    \            if(!even)\n            {\n                result[count] = i;\n  \
    \              count++;\n            }\n        }\n    }\n    return result[0..count].sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeveoibp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long i;\
    \ x)\n    {\n        if(i.toString.length == 1)\n        {\n            res[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool flag = true;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c == '0' || c == '2' || c == '4' || c == '6' || c == '8')\n\
    \                {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n            if(flag)\n            {\n     \
    \           res[count] = i;\n                count++;\n            }\n       \
    \ }\n    }\n    res = res[0..count];\n    sort(res);\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd14m2xhm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0ndmeho.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        string\
    \ s = to!string(i);\n        bool flag = true;\n        foreach(char c; s)\n \
    \       {\n            if(c == '0' || c == '2' || c == '4' || c == '6' || c ==\
    \ '8')\n            {\n                flag = false;\n                break;\n\
    \            }\n        }\n        if(flag)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94qteqc6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxvri9ur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool even = false;\n            foreach(char c; i.to!string)\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 even = true;\n                    break;\n                }\n\
    \            }\n            if(!even)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cxwfzvs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x1, y, z;\n    long[] a;\n\
    \    a = new long[x.length];\n    for (i = 0; i < x.length; i++)\n    {\n    \
    \    if (x[i] < 10)\n        {\n            a[i] = x[i];\n        }\n        else\
    \ if (x[i] < 100)\n        {\n            if (x[i] % 2 == 0)\n            {\n\
    \                a[i] = 0;\n            }\n            else\n            {\n \
    \               a[i] = x[i];\n            }\n        }\n        else if (x[i]\
    \ < 1000)\n        {\n            if (x[i] % 2 == 0)\n            {\n        \
    \        a[i] = 0;\n            }\n            else\n            {\n         \
    \       a[i] = x[i];\n            }\n        }\n        else if (x[i] < 10000)\n\
    \        {\n            if (x[i] % 2 == 0)\n            {\n                a[i]\
    \ = 0;\n            }\n            else\n            {\n                a[i] =\
    \ x[i];\n            }\n        }\n        else if (x[i] < 100000)\n        {\n\
    \            if (x[i] % 2 == 0)\n            {\n                a[i] = 0;\n  \
    \          }\n            else\n            {\n                a[i] = x[i];\n\
    \            }\n        }\n        else if (x[i] < 1000000)\n        {\n     \
    \       if (x[i] % 2 == 0)\n            {\n                a[i] = 0;\n       \
    \     }\n            else\n            {\n                a[i] = x[i];\n     \
    \       }\n        }\n        else if (x[i] < 10000000)\n        {\n         \
    \   if (x[i] % 2 == 0)\n            {\n                a[i] = 0;\n           \
    \ }\n            else\n            {\n                a[i] = x[i];\n         \
    \   }\n        }\n        else if (x[\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0mzoyd1x.d(93): Error: expression expected, not \''unittest\''\n/tmp/tmp0mzoyd1x.d(94):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmp0mzoyd1x.d(95): Error: found
    \''alias\'' when expecting \'')\''\n/tmp/tmp0mzoyd1x.d(102): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0mzoyd1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        bool\
    \ hasEven = false;\n        while(num > 0)\n        {\n            if((num % 10)\
    \ % 2 == 0)\n            {\n                hasEven = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if(!hasEven)\n    \
    \    {\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhir0fke.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4y2r7s3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = [];\n    foreach(long i; x)\n    {\n        if(i.toString.length.even)\n\
    \            continue;\n        foreach(char c; i.toString)\n        {\n     \
    \       if(c.toString.length.even)\n                break;\n            res ~=\
    \ i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ympb3ra.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int len = x.length;\n    long[] res = new long[len];\n    int j = 0;\n   \
    \ for (int i = 0; i < len; i++) {\n        if (x[i] % 2 != 0) {\n            res[j]\
    \ = x[i];\n            j++;\n        }\n    }\n    res = res[0..j];\n    sort(res);\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1v_rzhe0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                is_unique = false;\n                break;\n      \
    \      }\n            i /= 10;\n        }\n        if(is_unique)\n           \
    \ result ~= i;\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuajkfc44.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isEven = false;\n        while(i > 0)\n        {\n            if((i % 10) %\
    \ 2 == 0)\n            {\n                isEven = true;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(!isEven)\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpculjv9lb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.isOdd)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctwafgfr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7iog0qg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6beiyce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < x.length; i++)\n    {\n        if (x[i] < 10)\n        {\n            result[j]\
    \ = x[i];\n            j++;\n        }\n        else\n        {\n            int\
    \ count = 0;\n            long temp = x[i];\n            while (temp > 0)\n  \
    \          {\n                if (temp % 2 == 0)\n                {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n            if (count == 0)\n            {\n                result[j]\
    \ = x[i];\n                j++;\n            }\n        }\n    }\n    long[] finalResult\
    \ = new long[j];\n    for (int i = 0; i < j; i++)\n    {\n        finalResult[i]\
    \ = result[i];\n    }\n    sort(finalResult);\n    return finalResult;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzehbzlw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        foreach(long j; i.toString().to!long)\n        {\n        \
    \    if(j % 2 == 0)\n            {\n                is_unique = false;\n     \
    \           break;\n            }\n        }\n        if(is_unique)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpex_jndx_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] res = new long[0];\n    for (i = 0; i < x.length; i++)\n\
    \    {\n        bool flag = true;\n        for (j = 0; j < x[i].stringof.length;\
    \ j++)\n        {\n            if (x[i].stringof[j] % 2 == 0)\n            {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if (flag)\n        {\n            res ~= x[i];\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5i58n6vs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98diofch.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x1 = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb\
    \ = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n \
    \   int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int\
    \ ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg\
    \ = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n\
    \    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int\
    \ ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt\
    \ = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n   \nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf6hyglfs.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6hyglfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84kqfun6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98diofch.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                isEven = true;\n                break;\n     \
    \       }\n            i /= 10;\n        }\n        if(!isEven)\n        {\n \
    \           result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxp8rm_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i.toString.length ==\
    \ 1)\n        {\n            res ~= i;\n        }\n        else\n        {\n \
    \           bool isEven = false;\n            foreach(char c; i.toString)\n  \
    \          {\n                if(c.to!int % 2 == 0)\n                {\n     \
    \               isEven = true;\n                    break;\n                }\n\
    \            }\n            if(!isEven)\n            {\n                res ~=\
    \ i;\n            }\n        }\n    }\n    return res.sort;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpffv9d91o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= num;\n       \
    \ }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_8_pg7e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i < 10)\n        {\n\
    \            res ~= i;\n        }\n        else\n        {\n            bool is_unique\
    \ = true;\n            while(i > 0)\n            {\n                if(i % 2 ==\
    \ 0)\n                {\n                    is_unique = false;\n            \
    \        break;\n                }\n                i /= 10;\n            }\n\
    \            if(is_unique)\n            {\n                res ~= i;\n       \
    \     }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi941co76.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7tt2e1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5snvwy9w.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5snvwy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0oa2lk3.d(20): Error: no property `digits` for type `long`\n/tmp/tmpc0oa2lk3.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc0oa2lk3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool flag = true;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c.toString.toInt % 2 == 0)\n                {\n          \
    \          flag = false;\n                    break;\n                }\n    \
    \        }\n            if(flag)\n            {\n                result[count]\
    \ = i;\n                count++;\n            }\n        }\n    }\n    return\
    \ result[0..count].sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfi3txjn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5snvwy9w.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5snvwy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0oa2lk3.d(20): Error: no property `digits` for type `long`\n/tmp/tmpc0oa2lk3.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc0oa2lk3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto res = [];\n    foreach(i; x)\n    {\n        auto is_even = false;\n\
    \        auto temp = i;\n        while(temp > 0)\n        {\n            if((temp\
    \ % 10) % 2 == 0)\n            {\n                is_even = true;\n          \
    \      break;\n            }\n            temp /= 10;\n        }\n        if(!is_even)\n\
    \            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdezb760n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int j = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0)\n        {\n            if (num % 2 == 0)\n\
    \            {\n                flag = false;\n                break;\n      \
    \      }\n            num /= 10;\n        }\n        if (flag)\n        {\n  \
    \          res[j] = x[i];\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamicfbmk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(long j; i.toString)\n        {\n         \
    \   if(j % 2 == 0)\n            {\n                isUnique = false;\n       \
    \         break;\n            }\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4o8bi4lo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6ceybth.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428475]\n??:? void tmpe6ceybth.__unittest_L37_C1() [0x427f8e]\n??:?
    void tmpe6ceybth.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430811]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bd11]\n??:? runModuleUnitTests [0x42cc7d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884b]\n??:? _d_run_main [0x4287b6]\n??:? main [0x428207]\n??:?
    __libc_start_main [0x1437b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_wrwc5l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n        {\n      \
    \      result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrt0aevd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvywjz5k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5snvwy9w.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5snvwy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprauvvpe6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpusjj6ia9.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmpusjj6ia9.d(22):
    Error: cannot append type `long` to type `void[]`\n/tmp/tmpusjj6ia9.d(25): Error:
    no property `sort` for type `void[]`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpusjj6ia9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ even = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                even = true;\n                break;\n       \
    \     }\n            i /= 10;\n        }\n        if(!even)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx62z3m9l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98diofch.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0oa2lk3.d(20): Error: no property `digits` for type `long`\n/tmp/tmpc0oa2lk3.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc0oa2lk3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3vc8shz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i.toString.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            foreach(char j; i.toString)\n            {\n               \
    \ if(j.toString.toLong % 2 == 0)\n                {\n                    break;\n\
    \                }\n                else\n                {\n                \
    \    result ~= i;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6c07ogcy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i.digits.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(long j; i.digits)\n\
    \            {\n                if(j % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpror2somi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgfvegsw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a.to!int.isOdd))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbibyvwxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto res = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp033u7f4a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool isEven = false;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c.to!int % 2 == 0)\n                {\n                  \
    \  isEven = true;\n                    break;\n                }\n           \
    \ }\n            if(!isEven)\n            {\n                result[count] = i;\n\
    \                count++;\n            }\n        }\n    }\n    return result[0..count].sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpka1ineph.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1snh0eem.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(char c; to!string(i))\n        {\n       \
    \     if(c.isDigit && c.isEven)\n            {\n                isUnique = false;\n\
    \                break;\n            }\n        }\n        if(isUnique)\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxa8tm3y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i.toString.length.even)\n\
    \            continue;\n        else\n            res ~= i;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56tfqsud.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7iog0qg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n            y[j] = x[i];\n\
    \            j++;\n        }\n    }\n    long[] z = new long[j];\n    for (int\
    \ i = 0; i < j; i++)\n    {\n        z[i] = y[i];\n    }\n    return z;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk275ucxy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp869shxr6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x1 = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb\
    \ = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n \
    \   int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int\
    \ ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg\
    \ = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n\
    \    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int\
    \ ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt\
    \ = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n   \nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf6hyglfs.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6hyglfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString)\n            {\n                if(c.toString.toLong\
    \ % 2 == 0)\n                {\n                    break;\n                }\n\
    \                else\n                {\n                    result[count] =\
    \ i;\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpletffq5_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, z;\n    int[] a = new int[x.length];\n\
    \    int[] b = new int[x.length];\n    int[] c = new int[x.length];\n    int[]\
    \ d = new int[x.length];\n    int[] e = new int[x.length];\n    int[] f = new\
    \ int[x.length];\n    int[] g = new int[x.length];\n    int[] h = new int[x.length];\n\
    \    int[] y = new int[x.length];\n    int[] zz = new int[x.length];\n    int[]\
    \ zzz = new int[x.length];\n    int[] zzzz = new int[x.length];\n    int[] zzzzz\
    \ = new int[x.length];\n    int[] zzzzzz = new int[x.length];\n    int[] zzzzzzz\
    \ = new int[x.length];\n    int[] zzzzzzzz = new int[x.length];\n    int[] zzzzzzzzz\
    \ = new int[x.length];\n    int[] zzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzz\
    \ = new int[x.length];\n    int[] zzzzzzzzzzzz = new int[x.length];\n    int[]\
    \ zzzzzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzzzzz = new int[x.length];\n\
    \    int[] zzzzzzzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzzzzzzz =\
    \ new int[x.length];\n    int[] zzzzzzzzzzzzzzzzz = new int[x.length];\n    int[]\
    \ zzzzzzzzzzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzzzzzzzzzz = new\
    \ int[x.length];\n    int[] zzzzzzzzzzzzzzzzzzzz = new int[x.length];\n    int[]\
    \ zzzzzzzzzzzzz\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5zlf1s_r.d(47): Error: semicolon expected, not \''unittest\''\n/tmp/tmp5zlf1s_r.d(47):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp5zlf1s_r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0oa2lk3.d(20): Error: no property `digits` for type `long`\n/tmp/tmpc0oa2lk3.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc0oa2lk3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                is_unique = false;\n                break;\n      \
    \      }\n            i /= 10;\n        }\n        if(is_unique)\n           \
    \ res ~= i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljtrruhj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ even = false;\n        while(i > 0)\n        {\n            if((i % 10) % 2\
    \ == 0)\n            {\n                even = true;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(!even)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dtlv4kg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp869shxr6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i,j,k;\n    long[] res;\n    int[] temp;\n    int count = 0;\n    int\
    \ flag = 0;\n    int len = x.length;\n    for(i=0;i<len;i++)\n    {\n        temp\
    \ = toString(x[i]).toArray();\n        for(j=0;j<temp.length;j++)\n        {\n\
    \            if(temp[j]%2 == 0)\n            {\n                flag = 1;\n  \
    \              break;\n            }\n        }\n        if(flag == 0)\n     \
    \   {\n            count++;\n        }\n        flag = 0;\n    }\n    res = new\
    \ long[count];\n    k = 0;\n    for(i=0;i<len;i++)\n    {\n        temp = toString(x[i]).toArray();\n\
    \        for(j=0;j<temp.length;j++)\n        {\n            if(temp[j]%2 == 0)\n\
    \            {\n                flag = 1;\n                break;\n          \
    \  }\n        }\n        if(flag == 0)\n        {\n            res[k] = x[i];\n\
    \            k++;\n        }\n        flag = 0;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui6btve1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_wrwc5l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(char c; to!string(i))\n        {\n       \
    \     if(c.isDigit && c.isEven)\n            {\n                isUnique = false;\n\
    \                break;\n            }\n        }\n        if(isUnique)\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxa8tm3y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long n; x)\n    {\n        if(n.to!string.count(\"\
    2\") == 0 && n.to!string.count(\"4\") == 0 && n.to!string.count(\"6\") == 0 &&\
    \ n.to!string.count(\"8\") == 0)\n        {\n            result ~= n;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ndndqfg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString)\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbprx2cov.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(num; x)\n    {\n        bool isUnique = true;\n\
    \        while(num > 0)\n        {\n            if(num % 2 == 0)\n           \
    \ {\n                isUnique = false;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(isUnique)\n            result ~=\
    \ num;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8znadqdm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.even)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8a4wxeq0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp869shxr6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mipd196.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long n; x)\n    {\n        if(!hasEvenDigit(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq4luc59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c5wea0e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98diofch.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n            i /= 10;\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu704acki.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6beiyce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] res = new long[x.length];\n    int count = 0;\n    for\
    \ (i = 0; i < x.length; i++)\n    {\n        int flag = 0;\n        long num =\
    \ x[i];\n        while (num > 0)\n        {\n            if (num % 2 == 0)\n \
    \           {\n                flag = 1;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if (flag == 0)\n        {\n  \
    \          res[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ res1 = new long[count];\n    for (i = 0; i < count; i++)\n    {\n        res1[i]\
    \ = res[i];\n    }\n    sort(res1);\n    return res1;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck44sqdr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ flag = true;\n        foreach(char c; to!string(i))\n        {\n           \
    \ if(c == '0' || c == '2' || c == '4' || c == '6' || c == '8')\n            {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag)\n        {\n            result ~= i;\n        }\n    }\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eo8nlhb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        bool is_unique = true;\n        foreach(char c; to!string(i))\n\
    \        {\n            if(c.isDigit && c.to!int % 2 == 0)\n            {\n  \
    \              is_unique = false;\n                break;\n            }\n   \
    \     }\n        if(is_unique)\n        {\n            result[count] = i;\n  \
    \          count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprow5jdxw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3jhmbjjk.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmp3jhmbjjk.__unittest_L27_C1() [0x427f52]\n??:?
    void tmp3jhmbjjk.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43067d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bc75]\n??:? runModuleUnitTests [0x42cbe1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x5dfc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(char c; to!string(i))\n        {\n       \
    \     if(c % 2 == 0)\n            {\n                isUnique = false;\n     \
    \           break;\n            }\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpreyv75x7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.to!string.canFind(\"\
    2\") || num.to!string.canFind(\"4\") || num.to!string.canFind(\"6\") || num.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hkebw4s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_wrwc5l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n       \
    \ {\n            y ~= i;\n        }\n    }\n    return y;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yqqz1k2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98diofch.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7tt2e1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3jhmbjjk.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmp3jhmbjjk.__unittest_L27_C1() [0x427f52]\n??:?
    void tmp3jhmbjjk.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43067d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bc75]\n??:? runModuleUnitTests [0x42cbe1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x5dfc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5967imck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxvri9ur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = new long[];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkvbc6gl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rlhjftf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ finalResult = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n\
    \        finalResult[i] = result[i];\n    }\n    return finalResult;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhctxon7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7tt2e1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7tt2e1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        auto isUnique = true;\n\
    \        foreach(j; i.to!string)\n        {\n            if(j.to!int % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n        }\n        if(isUnique)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vd00dbs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit)\n                {\n           \
    \         if(c.to!int % 2 == 0)\n                    {\n                     \
    \   is_unique = false;\n                        break;\n                    }\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00hmkpml.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits;\n    int[] temp;\n    int count = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x1 = 0;\n    int y = 0;\n    int z =\
    \ 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n   \
    \ int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i1 =\
    \ 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n   \
    \ int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 =\
    \ 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n   \
    \ int w1 = 0;\n    int x2 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a2 =\
    \ 0;\n    int b2 = 0;\n    int c2 = 0;\n    int d2 = 0;\n    int e2 = 0;\n   \
    \ int f2 = 0;\n    int g2 = 0;\n    int h2 = 0;\n    int i2 = 0;\n    int j2 =\
    \ 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n   \
    \ int o2 = 0;\n    int p2 = 0;\n\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxt063gp6.d(82): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxt063gp6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, y, z;\n    long[] a;\n  \
    \  a = new long[x.length];\n    for (i = 0; i < x.length; i++)\n    {\n      \
    \  if (x[i] == 0)\n        {\n            a[i] = 0;\n        }\n        else\n\
    \        {\n            j = 0;\n            k = 0;\n            l = 0;\n     \
    \       m = 0;\n            n = 0;\n            o = 0;\n            p = 0;\n \
    \           q = 0;\n            r = 0;\n            s = 0;\n            t = 0;\n\
    \            u = 0;\n            v = 0;\n            w = 0;\n            y = 0;\n\
    \            z = 0;\n            while (x[i] > 0)\n            {\n           \
    \     if (x[i] % 10 == 0)\n                {\n                    j = 1;\n   \
    \             }\n                if (x[i] % 10 == 1)\n                {\n    \
    \                k = 1;\n                }\n                if (x[i] % 10 == 2)\n\
    \                {\n                    l = 1;\n                }\n          \
    \      if (x[i] % 10 == 3)\n                {\n                    m = 1;\n  \
    \              }\n                if (x[i] % 10 == 4)\n                {\n   \
    \                 n = 1;\n                }\n                if (x[i] % 10 ==\
    \ 5)\n                {\n                    o = 1;\n                }\n     \
    \           if (x[i] % 10 == 6)\n                {\n                    p = 1;\n\
    \                }\n                if (x[i] % 10 == 7)\n                {\n \
    \                   q = 1;\n                }\n                if (x[i] % 10 ==\
    \ 8)\n                {\n                    r = 1;\n                }\n     \
    \           if (x[i] % 10 == 9)\n                {\n                    s = 1;\n\
    \                }\n                x[i] = x[i] / 10;\n            }\n       \
    \     if (j == 0 && k == 0 && l == 0 && m == 0 && n == 0 && o == 0 &&\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpddbjilwl.d(89): Error: expression expected, not \''unittest\''\n/tmp/tmpddbjilwl.d(90):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpddbjilwl.d(98): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpddbjilwl.d(98):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddbjilwl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool even = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   even = true;\n                    break;\n               \
    \ }\n            }\n            if(!even)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal_nc14w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7tt2e1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char j; i.toString())\n\
    \            {\n                if(j.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bfmhhl7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    result\
    \ = result[0..count];\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsgow9w7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        bool isUnique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                isUnique = false;\n                break;\n       \
    \     }\n            i /= 10;\n        }\n        if(isUnique)\n            res\
    \ ~= i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8k3ozr0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            x.remove(i);\n        }\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuxunf5i0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 &&\n           i.to!string.count!(\"4\") == 0 &&\n           i.to!string.count!(\"\
    6\") == 0 &&\n           i.to!string.count!(\"8\") == 0)\n        {\n        \
    \    result ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupb6x4ej.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792839
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxvri9ur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mipd196.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6beiyce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792838
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6ceybth.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428475]\n??:? void tmpe6ceybth.__unittest_L37_C1() [0x427f8e]\n??:?
    void tmpe6ceybth.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430811]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bd11]\n??:? runModuleUnitTests [0x42cc7d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884b]\n??:? _d_run_main [0x4287b6]\n??:? main [0x428207]\n??:?
    __libc_start_main [0x1437b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
