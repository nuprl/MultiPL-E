language: d
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpurofksj_.d(20): Error: no property `to` for type `long`\n/tmp/tmpurofksj_.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpurofksj_.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpurofksj_.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurofksj_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3jhmbjjk.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmp3jhmbjjk.__unittest_L27_C1() [0x427f52]\n??:?
    void tmp3jhmbjjk.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43067d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bc75]\n??:? runModuleUnitTests [0x42cbe1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x5dfc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5snvwy9w.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5snvwy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evens = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long\
    \ num; x)\n    {\n        int[] digits = [];\n        while(num > 0)\n       \
    \ {\n            digits ~= num % 10;\n            num /= 10;\n        }\n    \
    \    bool hasEven = false;\n        foreach(int digit; digits)\n        {\n  \
    \          if(evens.canFind(digit))\n            {\n                hasEven =\
    \ true;\n                break;\n            }\n        }\n        if(!hasEven)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6d12ltxf.d(30): Error: no property `canFind` for type `int[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d12ltxf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0oa2lk3.d(20): Error: no property `digits` for type `long`\n/tmp/tmpc0oa2lk3.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc0oa2lk3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzzv6j_jn.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzv6j_jn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits;\n    int[] temp;\n    int[] temp2;\n    int[] temp3;\n    int[] temp4;\n\
    \    int[] temp5;\n    int[] temp6;\n    int[] temp7;\n    int[] temp8;\n    int[]\
    \ temp9;\n    int[] temp10;\n    int[] temp11;\n    int[] temp12;\n    int[] temp13;\n\
    \    int[] temp14;\n    int[] temp15;\n    int[] temp16;\n    int[] temp17;\n\
    \    int[] temp18;\n    int[] temp19;\n    int[] temp20;\n    int[] temp21;\n\
    \    int[] temp22;\n    int[] temp23;\n    int[] temp24;\n    int[] temp25;\n\
    \    int[] temp26;\n    int[] temp27;\n    int[] temp28;\n    int[] temp29;\n\
    \    int[] temp30;\n    int[] temp31;\n    int[] temp32;\n    int[] temp33;\n\
    \    int[] temp34;\n    int[] temp35;\n    int[] temp36;\n    int[] temp37;\n\
    \    int[] temp38;\n    int[] temp39;\n    int[] temp40;\n    int[] temp41;\n\
    \    int[] temp42;\n    int[] temp43;\n    int[] temp44;\n    int[] temp45;\n\
    \    int[] temp46;\n    int[] temp47;\n    int[] temp48;\n    int[] temp49;\n\
    \    int[] temp50;\n    int[] temp51;\n    int[] temp52;\n    int[] temp53;\n\
    \    int[] temp54;\n    int[] temp55;\n    int[] temp56;\n    int[] temp57;\n\
    \    int[] temp58;\n    int[] temp59;\n    int[] temp60;\n    int[] temp61;\n\
    \    int[] temp62;\n    int[] temp63;\n    int[] temp64;\n    int[] temp65;\n\
    \    int[] temp66;\n    int[] temp67;\n   \nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6d8n4hw.d(88): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6d8n4hw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(e; x)\n    {\n        if(e.digits.all!(a => a % 2\
    \ != 0))\n        {\n            res ~= e;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx3nh0vst.d(20): Error: no property `digits` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3nh0vst.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] result = new long[x.length];\n    int count = 0;\n \
    \   for (i = 0; i < x.length; i++) {\n        bool flag = true;\n        long\
    \ temp = x[i];\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \      temp /= 10;\n        }\n        if (flag) {\n            result[count]\
    \ = x[i];\n            count++;\n        }\n    }\n    long[] final_result = new\
    \ long[count];\n    for (i = 0; i < count; i++) {\n        final_result[i] = result[i];\n\
    \    }\n    sort(final_result);\n    return final_result;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwy_kav7w.d(39): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwy_kav7w.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycohkwzp.d(20): Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20):
    Error: no property `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpycohkwzp.d(20): Error: no property `to` for type
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycohkwzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w8f2kar.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmp8w8f2kar.d(25):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8w8f2kar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a\
    \ % 2 == 0).length == 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpebxmgmdi.d(20): Error: no property `digits` for type `long`\n/tmp/tmpebxmgmdi.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpebxmgmdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6ceybth.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428475]\n??:? void tmpe6ceybth.__unittest_L37_C1() [0x427f8e]\n??:?
    void tmpe6ceybth.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430811]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bd11]\n??:? runModuleUnitTests [0x42cc7d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884b]\n??:? _d_run_main [0x4287b6]\n??:? main [0x428207]\n??:?
    __libc_start_main [0x1437b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpusjj6ia9.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmpusjj6ia9.d(22):
    Error: cannot append type `long` to type `void[]`\n/tmp/tmpusjj6ia9.d(25): Error:
    no property `sort` for type `void[]`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpusjj6ia9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqyc4yjs.d(20): Error: undefined identifier `hasEvenDigit`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqyc4yjs.d", "-I/tmp"]\n'''
  stdout: b''
