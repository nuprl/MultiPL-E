language: d
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7g5wn8k2.d(20): Error: no property `to` for type `long`

    /tmp/tmp7g5wn8k2.d(20): Error: no property `to` for type `long`

    /tmp/tmp7g5wn8k2.d(20): Error: no property `to` for type `long`

    /tmp/tmp7g5wn8k2.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7g5wn8k2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_q6k7ji_.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp_q6k7ji_.__unittest_L27_C1() [0x427f52]

    ??:? void tmp_q6k7ji_.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppduoq13.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppduoq13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evens = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long\
    \ num; x)\n    {\n        int[] digits = [];\n        while(num > 0)\n       \
    \ {\n            digits ~= num % 10;\n            num /= 10;\n        }\n    \
    \    bool hasEven = false;\n        foreach(int digit; digits)\n        {\n  \
    \          if(evens.canFind(digit))\n            {\n                hasEven =\
    \ true;\n                break;\n            }\n        }\n        if(!hasEven)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwm01aur6.d(30): Error: no property `canFind` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm01aur6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf28v3tyl.d(20): Error: no property `digits` for type `long`

    /tmp/tmpf28v3tyl.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf28v3tyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8vzgwya7.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vzgwya7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits;\n    int[] temp;\n    int[] temp2;\n    int[] temp3;\n    int[] temp4;\n\
    \    int[] temp5;\n    int[] temp6;\n    int[] temp7;\n    int[] temp8;\n    int[]\
    \ temp9;\n    int[] temp10;\n    int[] temp11;\n    int[] temp12;\n    int[] temp13;\n\
    \    int[] temp14;\n    int[] temp15;\n    int[] temp16;\n    int[] temp17;\n\
    \    int[] temp18;\n    int[] temp19;\n    int[] temp20;\n    int[] temp21;\n\
    \    int[] temp22;\n    int[] temp23;\n    int[] temp24;\n    int[] temp25;\n\
    \    int[] temp26;\n    int[] temp27;\n    int[] temp28;\n    int[] temp29;\n\
    \    int[] temp30;\n    int[] temp31;\n    int[] temp32;\n    int[] temp33;\n\
    \    int[] temp34;\n    int[] temp35;\n    int[] temp36;\n    int[] temp37;\n\
    \    int[] temp38;\n    int[] temp39;\n    int[] temp40;\n    int[] temp41;\n\
    \    int[] temp42;\n    int[] temp43;\n    int[] temp44;\n    int[] temp45;\n\
    \    int[] temp46;\n    int[] temp47;\n    int[] temp48;\n    int[] temp49;\n\
    \    int[] temp50;\n    int[] temp51;\n    int[] temp52;\n    int[] temp53;\n\
    \    int[] temp54;\n    int[] temp55;\n    int[] temp56;\n    int[] temp57;\n\
    \    int[] temp58;\n    int[] temp59;\n    int[] temp60;\n    int[] temp61;\n\
    \    int[] temp62;\n    int[] temp63;\n    int[] temp64;\n    int[] temp65;\n\
    \    int[] temp66;\n    int[] temp67;\n   \nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc49umggu.d(88): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc49umggu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(e; x)\n    {\n        if(e.digits.all!(a => a % 2\
    \ != 0))\n        {\n            res ~= e;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcngxf8nz.d(20): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcngxf8nz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] result = new long[x.length];\n    int count = 0;\n \
    \   for (i = 0; i < x.length; i++) {\n        bool flag = true;\n        long\
    \ temp = x[i];\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \      temp /= 10;\n        }\n        if (flag) {\n            result[count]\
    \ = x[i];\n            count++;\n        }\n    }\n    long[] final_result = new\
    \ long[count];\n    for (i = 0; i < count; i++) {\n        final_result[i] = result[i];\n\
    \    }\n    sort(final_result);\n    return final_result;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm23pcuij.d(39): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm23pcuij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a\
    \ % 2 == 0).length == 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3wq_6_o.d(20): Error: no property `digits` for type `long`

    /tmp/tmpc3wq_6_o.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3wq_6_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsigoahni.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmpsigoahni.__unittest_L37_C1() [0x427f8e]

    ??:? void tmpsigoahni.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0xrlizbh.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmp0xrlizbh.d(22): Error: cannot append type `long` to type `void[]`

    /tmp/tmp0xrlizbh.d(25): Error: no property `sort` for type `void[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xrlizbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_q6k7ji_.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp_q6k7ji_.__unittest_L27_C1() [0x427f52]

    ??:? void tmp_q6k7ji_.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsigoahni.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmpsigoahni.__unittest_L37_C1() [0x427f8e]

    ??:? void tmpsigoahni.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return sort(result);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc56o7_q6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpc56o7_q6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc56o7_q6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    for (int i = 0; i < x.length; i++)\n   \
    \ {\n        bool isUnique = true;\n        long num = x[i];\n        while (num\
    \ > 0)\n        {\n            if (num % 2 == 0)\n            {\n            \
    \    isUnique = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (isUnique)\n        {\n            result ~= x[i];\n\
    \        }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1moej5yi.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1moej5yi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppduoq13.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppduoq13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ num; x)\n    {\n        if(num.toString().length == 1)\n        {\n        \
    \    result[count] = num;\n            count++;\n        }\n        else\n   \
    \     {\n            bool isEven = false;\n            foreach(char c; num.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result[count] = num;\n                count++;\n            }\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnbd79d5v.d(21): Error: no property `toString` for type `long`

    /tmp/tmpnbd79d5v.d(29): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbd79d5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto evenDigits = [](long n) {\n        while (n > 0) {\n            if (n\
    \ % 2 == 0) {\n                return true;\n            }\n            n /= 10;\n\
    \        }\n        return false;\n    };\n    return x.filter!(a => !evenDigits(a)).sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9hr23axn.d(17): Error: found `n` when expecting `.` following long

    /tmp/tmp9hr23axn.d(17): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp9hr23axn.d(17): Error: found `{` when expecting `,`

    /tmp/tmp9hr23axn.d(18): Error: expression expected, not `while`

    /tmp/tmp9hr23axn.d(18): Error: found `{` when expecting `,`

    /tmp/tmp9hr23axn.d(19): Error: expression expected, not `if`

    /tmp/tmp9hr23axn.d(19): Error: found `{` when expecting `,`

    /tmp/tmp9hr23axn.d(20): Error: expression expected, not `return`

    /tmp/tmp9hr23axn.d(20): Error: found `true` when expecting `,`

    /tmp/tmp9hr23axn.d(20): Error: expression expected, not `;`

    /tmp/tmp9hr23axn.d(21): Error: found `}` when expecting `,`

    /tmp/tmp9hr23axn.d(22): Error: found `;` when expecting `,`

    /tmp/tmp9hr23axn.d(23): Error: expression expected, not `}`

    /tmp/tmp9hr23axn.d(24): Error: found `return` when expecting `,`

    /tmp/tmp9hr23axn.d(24): Error: found `;` when expecting `,`

    /tmp/tmp9hr23axn.d(25): Error: expression expected, not `}`

    /tmp/t'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n            i /= 10;\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr166rn65.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmpr166rn65.__unittest_L37_C1() [0x427f8e]

    ??:? void tmpr166rn65.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqw9oovvc.d(20): Error: no property `to` for type `long`

    /tmp/tmpqw9oovvc.d(20): Error: no property `to` for type `long`

    /tmp/tmpqw9oovvc.d(20): Error: no property `to` for type `long`

    /tmp/tmpqw9oovvc.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqw9oovvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z2zwfeh.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z2zwfeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    0\") == 0 && i.toString().count(\"2\") == 0 && i.toString().count(\"4\") == 0\
    \ && i.toString().count(\"6\") == 0 && i.toString().count(\"8\") == 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpku386y42.d(20): Error: no property `toString` for type `long`

    /tmp/tmpku386y42.d(20): Error: no property `toString` for type `long`

    /tmp/tmpku386y42.d(20): Error: no property `toString` for type `long`

    /tmp/tmpku386y42.d(20): Error: no property `toString` for type `long`

    /tmp/tmpku386y42.d(20): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpku386y42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            res ~= i;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqfpytck.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqfpytck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl6wesqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvojp16.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvojp16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ is_unique = true;\n        while(i > 0)\n        {\n            if(i % 2 ==\
    \ 0)\n            {\n                is_unique = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(is_unique)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3stmnhih.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3stmnhih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool even = false;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c.to!int % 2 == 0)\n                {\n                  \
    \  even = true;\n                    break;\n                }\n            }\n\
    \            if(!even)\n            {\n                result[count] = i;\n  \
    \              count++;\n            }\n        }\n    }\n    return result[0..count].sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzrriu76u.d(21): Error: no property `toString` for type `long`

    /tmp/tmpzrriu76u.d(29): Error: no property `toString` for type `long`

    /tmp/tmpzrriu76u.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzrriu76u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long i;\
    \ x)\n    {\n        if(i.toString.length == 1)\n        {\n            res[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool flag = true;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c == '0' || c == '2' || c == '4' || c == '6' || c == '8')\n\
    \                {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n            if(flag)\n            {\n     \
    \           res[count] = i;\n                count++;\n            }\n       \
    \ }\n    }\n    res = res[0..count];\n    sort(res);\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplos5ujwj.d(21): Error: no property `toString` for type `long`

    /tmp/tmplos5ujwj.d(29): Error: no property `toString` for type `long`

    /tmp/tmplos5ujwj.d(45): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplos5ujwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoj9rd7lt.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpoj9rd7lt.__unittest_L27_C1() [0x427f52]

    ??:? void tmpoj9rd7lt.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        string\
    \ s = to!string(i);\n        bool flag = true;\n        foreach(char c; s)\n \
    \       {\n            if(c == '0' || c == '2' || c == '4' || c == '6' || c ==\
    \ '8')\n            {\n                flag = false;\n                break;\n\
    \            }\n        }\n        if(flag)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoylbftvu.d(20): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoylbftvu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyshm6dhn.d(20): Error: no property `digits` for type `long`

    /tmp/tmpyshm6dhn.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyshm6dhn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool even = false;\n            foreach(char c; i.to!string)\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 even = true;\n                    break;\n                }\n\
    \            }\n            if(!even)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjr7n_ab.d(20): Error: no property `to` for type `long`

    /tmp/tmpxjr7n_ab.d(27): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjr7n_ab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x1, y, z;\n    long[] a;\n\
    \    a = new long[x.length];\n    for (i = 0; i < x.length; i++)\n    {\n    \
    \    if (x[i] < 10)\n        {\n            a[i] = x[i];\n        }\n        else\
    \ if (x[i] < 100)\n        {\n            if (x[i] % 2 == 0)\n            {\n\
    \                a[i] = 0;\n            }\n            else\n            {\n \
    \               a[i] = x[i];\n            }\n        }\n        else if (x[i]\
    \ < 1000)\n        {\n            if (x[i] % 2 == 0)\n            {\n        \
    \        a[i] = 0;\n            }\n            else\n            {\n         \
    \       a[i] = x[i];\n            }\n        }\n        else if (x[i] < 10000)\n\
    \        {\n            if (x[i] % 2 == 0)\n            {\n                a[i]\
    \ = 0;\n            }\n            else\n            {\n                a[i] =\
    \ x[i];\n            }\n        }\n        else if (x[i] < 100000)\n        {\n\
    \            if (x[i] % 2 == 0)\n            {\n                a[i] = 0;\n  \
    \          }\n            else\n            {\n                a[i] = x[i];\n\
    \            }\n        }\n        else if (x[i] < 1000000)\n        {\n     \
    \       if (x[i] % 2 == 0)\n            {\n                a[i] = 0;\n       \
    \     }\n            else\n            {\n                a[i] = x[i];\n     \
    \       }\n        }\n        else if (x[i] < 10000000)\n        {\n         \
    \   if (x[i] % 2 == 0)\n            {\n                a[i] = 0;\n           \
    \ }\n            else\n            {\n                a[i] = x[i];\n         \
    \   }\n        }\n        else if (x[\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb32p8ccm.d(93): Error: expression expected, not `unittest`

    /tmp/tmpb32p8ccm.d(94): Error: found `{` when expecting `,`

    /tmp/tmpb32p8ccm.d(95): Error: expression expected, not `alias`

    /tmp/tmpb32p8ccm.d(95): Error: found `candidate` when expecting `,`

    /tmp/tmpb32p8ccm.d(95): Error: expression expected, not `=`

    /tmp/tmpb32p8ccm.d(95): Error: found `unique_digits` when expecting `,`

    /tmp/tmpb32p8ccm.d(95): Error: expression expected, not `;`

    /tmp/tmpb32p8ccm.d(97): Error: found `assert` when expecting `,`

    /tmp/tmpb32p8ccm.d(97): Error: found `;` when expecting `,`

    /tmp/tmpb32p8ccm.d(98): Error: found `;` when expecting `,`

    /tmp/tmpb32p8ccm.d(99): Error: found `;` when expecting `,`

    /tmp/tmpb32p8ccm.d(100): Error: found `;` when expecting `,`

    /tmp/tmpb32p8ccm.d(101): Error: expression expected, not `}`

    /tmp/tmpb32p8ccm.d(102): Error: found `void` when expecting `,`

    /tmp/tmpb32p8ccm.d(102): Error: found `{` when expecting `,`

    /tmp/tmpb32p8ccm.d(102): Error: expression expected, not `}`

    /tmp/tmpb32p8ccm.d(1'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        bool\
    \ hasEven = false;\n        while(num > 0)\n        {\n            if((num % 10)\
    \ % 2 == 0)\n            {\n                hasEven = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if(!hasEven)\n    \
    \    {\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv1e5bhax.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42847d]

    ??:? void tmpv1e5bhax.__unittest_L37_C1() [0x427f96]

    ??:? void tmpv1e5bhax.__modtest() [0x4281fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43088d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430819]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd19]

    ??:? runModuleUnitTests [0x42cc85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmw89naq1.d(20): Error: no property `to` for type `long`

    /tmp/tmpmw89naq1.d(20): Error: no property `to` for type `long`

    /tmp/tmpmw89naq1.d(20): Error: no property `to` for type `long`

    /tmp/tmpmw89naq1.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmw89naq1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = [];\n    foreach(long i; x)\n    {\n        if(i.toString.length.even)\n\
    \            continue;\n        foreach(char c; i.toString)\n        {\n     \
    \       if(c.toString.length.even)\n                break;\n            res ~=\
    \ i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2imcfiqe.d(20): Error: no property `toString` for type `long`

    /tmp/tmp2imcfiqe.d(22): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2imcfiqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int len = x.length;\n    long[] res = new long[len];\n    int j = 0;\n   \
    \ for (int i = 0; i < len; i++) {\n        if (x[i] % 2 != 0) {\n            res[j]\
    \ = x[i];\n            j++;\n        }\n    }\n    res = res[0..j];\n    sort(res);\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmcwv8mo.d(17): Error: cannot implicitly convert expression `x.length`
    of type `ulong` to `int`

    /tmp/tmpkmcwv8mo.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmcwv8mo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                is_unique = false;\n                break;\n      \
    \      }\n            i /= 10;\n        }\n        if(is_unique)\n           \
    \ result ~= i;\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_fj2efz1.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_fj2efz1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isEven = false;\n        while(i > 0)\n        {\n            if((i % 10) %\
    \ 2 == 0)\n            {\n                isEven = true;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(!isEven)\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpusyudl9u.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42847d]

    ??:? void tmpusyudl9u.__unittest_L37_C1() [0x427f96]

    ??:? void tmpusyudl9u.__modtest() [0x4281fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43088d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430819]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd19]

    ??:? runModuleUnitTests [0x42cc85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.isOdd)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fbl12p7.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fbl12p7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jujem8i.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jujem8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtoyjsl5.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpwtoyjsl5.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtoyjsl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < x.length; i++)\n    {\n        if (x[i] < 10)\n        {\n            result[j]\
    \ = x[i];\n            j++;\n        }\n        else\n        {\n            int\
    \ count = 0;\n            long temp = x[i];\n            while (temp > 0)\n  \
    \          {\n                if (temp % 2 == 0)\n                {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n            if (count == 0)\n            {\n                result[j]\
    \ = x[i];\n                j++;\n            }\n        }\n    }\n    long[] finalResult\
    \ = new long[j];\n    for (int i = 0; i < j; i++)\n    {\n        finalResult[i]\
    \ = result[i];\n    }\n    sort(finalResult);\n    return finalResult;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2huz1o3y.d(50): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2huz1o3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        foreach(long j; i.toString().to!long)\n        {\n        \
    \    if(j % 2 == 0)\n            {\n                is_unique = false;\n     \
    \           break;\n            }\n        }\n        if(is_unique)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppxiokql5.d(21): Error: no property `toString` for type `long`

    /tmp/tmppxiokql5.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxiokql5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] res = new long[0];\n    for (i = 0; i < x.length; i++)\n\
    \    {\n        bool flag = true;\n        for (j = 0; j < x[i].stringof.length;\
    \ j++)\n        {\n            if (x[i].stringof[j] % 2 == 0)\n            {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if (flag)\n        {\n            res ~= x[i];\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbvvt0tll.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42849d]

    ??:? void tmpbvvt0tll.__unittest_L37_C1() [0x427fba]

    ??:? void tmpbvvt0tll.__modtest() [0x428220]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdd6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430921]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bdad]

    ??:? runModuleUnitTests [0x42cd19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428960]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z2zwfeh.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z2zwfeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x1 = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb\
    \ = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n \
    \   int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int\
    \ ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg\
    \ = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n\
    \    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int\
    \ ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt\
    \ = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n   \nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3v_8hg3y.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3v_8hg3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpin_4djoa.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpin_4djoa.__unittest_L27_C1() [0x427f52]

    ??:? void tmpin_4djoa.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z2zwfeh.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z2zwfeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                isEven = true;\n                break;\n     \
    \       }\n            i /= 10;\n        }\n        if(!isEven)\n        {\n \
    \           result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplky3vwn0.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmplky3vwn0.__unittest_L37_C1() [0x427f8e]

    ??:? void tmplky3vwn0.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884b]

    ??:? _d_run_main [0x4287b6]

    ??:? main [0x428207]

    ??:? __libc_start_main [0x4c86b554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i.toString.length ==\
    \ 1)\n        {\n            res ~= i;\n        }\n        else\n        {\n \
    \           bool isEven = false;\n            foreach(char c; i.toString)\n  \
    \          {\n                if(c.to!int % 2 == 0)\n                {\n     \
    \               isEven = true;\n                    break;\n                }\n\
    \            }\n            if(!isEven)\n            {\n                res ~=\
    \ i;\n            }\n        }\n    }\n    return res.sort;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9w4tp03.d(20): Error: no property `toString` for type `long`

    /tmp/tmpu9w4tp03.d(27): Error: no property `toString` for type `long`

    /tmp/tmpu9w4tp03.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu9w4tp03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= num;\n       \
    \ }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzld0qnd0.d(20): Error: no property `digits` for type `long`

    /tmp/tmpzld0qnd0.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzld0qnd0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i < 10)\n        {\n\
    \            res ~= i;\n        }\n        else\n        {\n            bool is_unique\
    \ = true;\n            while(i > 0)\n            {\n                if(i % 2 ==\
    \ 0)\n                {\n                    is_unique = false;\n            \
    \        break;\n                }\n                i /= 10;\n            }\n\
    \            if(is_unique)\n            {\n                res ~= i;\n       \
    \     }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd6cqulo8.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284a5]

    ??:? void tmpd6cqulo8.__unittest_L44_C1() [0x427fc2]

    ??:? void tmpd6cqulo8.__modtest() [0x428228]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bce5]

    ??:? runModuleUnitTests [0x42cc51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp35idojvr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp35idojvr.__unittest_L27_C1() [0x427f52]

    ??:? void tmp35idojvr.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppduoq13.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppduoq13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf28v3tyl.d(20): Error: no property `digits` for type `long`

    /tmp/tmpf28v3tyl.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf28v3tyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool flag = true;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c.toString.toInt % 2 == 0)\n                {\n          \
    \          flag = false;\n                    break;\n                }\n    \
    \        }\n            if(flag)\n            {\n                result[count]\
    \ = i;\n                count++;\n            }\n        }\n    }\n    return\
    \ result[0..count].sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpblla2i7m.d(21): Error: no property `toString` for type `long`

    /tmp/tmpblla2i7m.d(29): Error: no property `toString` for type `long`

    /tmp/tmpblla2i7m.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblla2i7m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppduoq13.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppduoq13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf28v3tyl.d(20): Error: no property `digits` for type `long`

    /tmp/tmpf28v3tyl.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf28v3tyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto res = [];\n    foreach(i; x)\n    {\n        auto is_even = false;\n\
    \        auto temp = i;\n        while(temp > 0)\n        {\n            if((temp\
    \ % 10) % 2 == 0)\n            {\n                is_even = true;\n          \
    \      break;\n            }\n            temp /= 10;\n        }\n        if(!is_even)\n\
    \            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmproilfgbi.d(32): Error: cannot append type `long` to type `void[]`

    /tmp/tmproilfgbi.d(34): Error: no property `sort` for type `void[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmproilfgbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int j = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0)\n        {\n            if (num % 2 == 0)\n\
    \            {\n                flag = false;\n                break;\n      \
    \      }\n            num /= 10;\n        }\n        if (flag)\n        {\n  \
    \          res[j] = x[i];\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf449jfax.d(17): Error: cannot implicitly convert expression `x.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf449jfax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(long j; i.toString)\n        {\n         \
    \   if(j % 2 == 0)\n            {\n                isUnique = false;\n       \
    \         break;\n            }\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3nu6dl65.d(21): Error: no property `toString` for type `long`

    /tmp/tmp3nu6dl65.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nu6dl65.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsigoahni.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmpsigoahni.__unittest_L37_C1() [0x427f8e]

    ??:? void tmpsigoahni.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5r5yrngr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmp5r5yrngr.__unittest_L27_C1() [0x427f5e]

    ??:? void tmp5r5yrngr.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n        {\n      \
    \      result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpstd6x76z.d(21): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstd6x76z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnhngjixs.d(25): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhngjixs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppduoq13.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppduoq13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaz1dy071.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpaz1dy071.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaz1dy071.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0xrlizbh.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmp0xrlizbh.d(22): Error: cannot append type `long` to type `void[]`

    /tmp/tmp0xrlizbh.d(25): Error: no property `sort` for type `void[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xrlizbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ even = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                even = true;\n                break;\n       \
    \     }\n            i /= 10;\n        }\n        if(!even)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppou8vmu0.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmppou8vmu0.__unittest_L37_C1() [0x427f8e]

    ??:? void tmppou8vmu0.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z2zwfeh.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z2zwfeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf28v3tyl.d(20): Error: no property `digits` for type `long`

    /tmp/tmpf28v3tyl.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf28v3tyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8xc9zea.d(20): Error: no property `to` for type `long`

    /tmp/tmpq8xc9zea.d(20): Error: no property `to` for type `long`

    /tmp/tmpq8xc9zea.d(20): Error: no property `to` for type `long`

    /tmp/tmpq8xc9zea.d(20): Error: no property `to` for type `long`

    /tmp/tmpq8xc9zea.d(26): Error: cannot append type `long` to type `void[]`

    /tmp/tmpq8xc9zea.d(29): Error: cannot implicitly convert expression `result` of
    type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8xc9zea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i.toString.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            foreach(char j; i.toString)\n            {\n               \
    \ if(j.toString.toLong % 2 == 0)\n                {\n                    break;\n\
    \                }\n                else\n                {\n                \
    \    result ~= i;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0slruzqf.d(20): Error: no property `toString` for type `long`

    /tmp/tmp0slruzqf.d(26): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0slruzqf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i.digits.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(long j; i.digits)\n\
    \            {\n                if(j % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc_5wspk7.d(20): Error: no property `digits` for type `long`

    /tmp/tmpc_5wspk7.d(27): Error: no property `digits` for type `long`

    /tmp/tmpc_5wspk7.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc_5wspk7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6gaxup_v.d(20): Error: no property `to` for type `long`

    /tmp/tmp6gaxup_v.d(20): Error: no property `to` for type `long`

    /tmp/tmp6gaxup_v.d(20): Error: no property `to` for type `long`

    /tmp/tmp6gaxup_v.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6gaxup_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a.to!int.isOdd))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyrnv0db.d(20): Error: no property `to` for type `long`

    /tmp/tmpdyrnv0db.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyrnv0db.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto res = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpesscc1pw.d(20): Error: no property `to` for type `long`

    /tmp/tmpesscc1pw.d(20): Error: no property `to` for type `long`

    /tmp/tmpesscc1pw.d(20): Error: no property `to` for type `long`

    /tmp/tmpesscc1pw.d(20): Error: no property `to` for type `long`

    /tmp/tmpesscc1pw.d(26): Error: cannot append type `long` to type `void[]`

    /tmp/tmpesscc1pw.d(29): Error: cannot implicitly convert expression `res` of type
    `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesscc1pw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ bool isEven = false;\n            foreach(char c; i.toString)\n            {\n\
    \                if(c.to!int % 2 == 0)\n                {\n                  \
    \  isEven = true;\n                    break;\n                }\n           \
    \ }\n            if(!isEven)\n            {\n                result[count] = i;\n\
    \                count++;\n            }\n        }\n    }\n    return result[0..count].sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpr428k_.d(21): Error: no property `toString` for type `long`

    /tmp/tmpnpr428k_.d(29): Error: no property `toString` for type `long`

    /tmp/tmpnpr428k_.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpr428k_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(20): Error: no property `to` for type `long`

    /tmp/tmppl6wesqs.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl6wesqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(char c; to!string(i))\n        {\n       \
    \     if(c.isDigit && c.isEven)\n            {\n                isUnique = false;\n\
    \                break;\n            }\n        }\n        if(isUnique)\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz6jctxj.d(21): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpoz6jctxj.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz6jctxj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long i; x)\n    {\n        if(i.toString.length.even)\n\
    \            continue;\n        else\n            res ~= i;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm85xrs01.d(20): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm85xrs01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jujem8i.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jujem8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n            y[j] = x[i];\n\
    \            j++;\n        }\n    }\n    long[] z = new long[j];\n    for (int\
    \ i = 0; i < j; i++)\n    {\n        z[i] = y[i];\n    }\n    return z;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa7fxywsw.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpa7fxywsw.__unittest_L34_C1() [0x428012]

    ??:? void tmpa7fxywsw.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b442]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430659]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]

    ??:? runModuleUnitTests [0x42c385]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf43x_v_m.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf43x_v_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x1 = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb\
    \ = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n \
    \   int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int\
    \ ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg\
    \ = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n\
    \    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int\
    \ ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt\
    \ = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n   \nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3v_8hg3y.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3v_8hg3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString)\n            {\n                if(c.toString.toLong\
    \ % 2 == 0)\n                {\n                    break;\n                }\n\
    \                else\n                {\n                    result[count] =\
    \ i;\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi1051c2y.d(21): Error: no property `toString` for type `long`

    /tmp/tmpi1051c2y.d(28): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1051c2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, z;\n    int[] a = new int[x.length];\n\
    \    int[] b = new int[x.length];\n    int[] c = new int[x.length];\n    int[]\
    \ d = new int[x.length];\n    int[] e = new int[x.length];\n    int[] f = new\
    \ int[x.length];\n    int[] g = new int[x.length];\n    int[] h = new int[x.length];\n\
    \    int[] y = new int[x.length];\n    int[] zz = new int[x.length];\n    int[]\
    \ zzz = new int[x.length];\n    int[] zzzz = new int[x.length];\n    int[] zzzzz\
    \ = new int[x.length];\n    int[] zzzzzz = new int[x.length];\n    int[] zzzzzzz\
    \ = new int[x.length];\n    int[] zzzzzzzz = new int[x.length];\n    int[] zzzzzzzzz\
    \ = new int[x.length];\n    int[] zzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzz\
    \ = new int[x.length];\n    int[] zzzzzzzzzzzz = new int[x.length];\n    int[]\
    \ zzzzzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzzzzz = new int[x.length];\n\
    \    int[] zzzzzzzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzzzzzzz =\
    \ new int[x.length];\n    int[] zzzzzzzzzzzzzzzzz = new int[x.length];\n    int[]\
    \ zzzzzzzzzzzzzzzzzz = new int[x.length];\n    int[] zzzzzzzzzzzzzzzzzzz = new\
    \ int[x.length];\n    int[] zzzzzzzzzzzzzzzzzzzz = new int[x.length];\n    int[]\
    \ zzzzzzzzzzzzz\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7avhpmm.d(47): Error: semicolon expected, not `unittest`

    /tmp/tmph7avhpmm.d(47): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7avhpmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.filter!(a\
    \ => a % 2 == 0).length == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf28v3tyl.d(20): Error: no property `digits` for type `long`

    /tmp/tmpf28v3tyl.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf28v3tyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                is_unique = false;\n                break;\n      \
    \      }\n            i /= 10;\n        }\n        if(is_unique)\n           \
    \ res ~= i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp543ccp9q.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmp543ccp9q.__unittest_L35_C1() [0x427f8e]

    ??:? void tmp543ccp9q.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ even = false;\n        while(i > 0)\n        {\n            if((i % 10) % 2\
    \ == 0)\n            {\n                even = true;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(!even)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa7kitazu.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42847d]

    ??:? void tmpa7kitazu.__unittest_L37_C1() [0x427f96]

    ??:? void tmpa7kitazu.__modtest() [0x4281fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43088d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430819]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd19]

    ??:? runModuleUnitTests [0x42cc85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf43x_v_m.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf43x_v_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i,j,k;\n    long[] res;\n    int[] temp;\n    int count = 0;\n    int\
    \ flag = 0;\n    int len = x.length;\n    for(i=0;i<len;i++)\n    {\n        temp\
    \ = toString(x[i]).toArray();\n        for(j=0;j<temp.length;j++)\n        {\n\
    \            if(temp[j]%2 == 0)\n            {\n                flag = 1;\n  \
    \              break;\n            }\n        }\n        if(flag == 0)\n     \
    \   {\n            count++;\n        }\n        flag = 0;\n    }\n    res = new\
    \ long[count];\n    k = 0;\n    for(i=0;i<len;i++)\n    {\n        temp = toString(x[i]).toArray();\n\
    \        for(j=0;j<temp.length;j++)\n        {\n            if(temp[j]%2 == 0)\n\
    \            {\n                flag = 1;\n                break;\n          \
    \  }\n        }\n        if(flag == 0)\n        {\n            res[k] = x[i];\n\
    \            k++;\n        }\n        flag = 0;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7r2lk1al.d(22): Error: cannot implicitly convert expression `x.length`
    of type `ulong` to `int`

    /tmp/tmp7r2lk1al.d(25): Error: undefined identifier `toString`

    /tmp/tmp7r2lk1al.d(44): Error: undefined identifier `toString`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7r2lk1al.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5r5yrngr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmp5r5yrngr.__unittest_L27_C1() [0x427f5e]

    ??:? void tmp5r5yrngr.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(char c; to!string(i))\n        {\n       \
    \     if(c.isDigit && c.isEven)\n            {\n                isUnique = false;\n\
    \                break;\n            }\n        }\n        if(isUnique)\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz6jctxj.d(21): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpoz6jctxj.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz6jctxj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long n; x)\n    {\n        if(n.to!string.count(\"\
    2\") == 0 && n.to!string.count(\"4\") == 0 && n.to!string.count(\"6\") == 0 &&\
    \ n.to!string.count(\"8\") == 0)\n        {\n            result ~= n;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwnmboeih.d(20): Error: no property `to` for type `long`

    /tmp/tmpwnmboeih.d(20): Error: no property `to` for type `long`

    /tmp/tmpwnmboeih.d(20): Error: no property `to` for type `long`

    /tmp/tmpwnmboeih.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnmboeih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString.length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString)\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzcyc037.d(20): Error: no property `toString` for type `long`

    /tmp/tmphzcyc037.d(27): Error: no property `toString` for type `long`

    /tmp/tmphzcyc037.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzcyc037.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(num; x)\n    {\n        bool isUnique = true;\n\
    \        while(num > 0)\n        {\n            if(num % 2 == 0)\n           \
    \ {\n                isUnique = false;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(isUnique)\n            result ~=\
    \ num;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6e7y_rnp.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmp6e7y_rnp.__unittest_L35_C1() [0x427f92]

    ??:? void tmp6e7y_rnp.__modtest() [0x4281f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcde]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430731]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430be0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcb5]

    ??:? runModuleUnitTests [0x42cc21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.even)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaw31n7kf.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaw31n7kf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf43x_v_m.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf43x_v_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    /tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    /tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    /tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnlzheis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long n; x)\n    {\n        if(!hasEvenDigit(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd7jxwew.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd7jxwew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2d_pj15.d(20): Error: no property `toString` for type `long`

    /tmp/tmp_2d_pj15.d(27): Error: no property `toString` for type `long`

    /tmp/tmp_2d_pj15.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2d_pj15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z2zwfeh.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z2zwfeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n            i /= 10;\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr166rn65.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmpr166rn65.__unittest_L37_C1() [0x427f8e]

    ??:? void tmpr166rn65.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtoyjsl5.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpwtoyjsl5.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtoyjsl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] res = new long[x.length];\n    int count = 0;\n    for\
    \ (i = 0; i < x.length; i++)\n    {\n        int flag = 0;\n        long num =\
    \ x[i];\n        while (num > 0)\n        {\n            if (num % 2 == 0)\n \
    \           {\n                flag = 1;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if (flag == 0)\n        {\n  \
    \          res[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ res1 = new long[count];\n    for (i = 0; i < count; i++)\n    {\n        res1[i]\
    \ = res[i];\n    }\n    sort(res1);\n    return res1;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvl7svyka.d(44): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl7svyka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ flag = true;\n        foreach(char c; to!string(i))\n        {\n           \
    \ if(c == '0' || c == '2' || c == '4' || c == '6' || c == '8')\n            {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag)\n        {\n            result ~= i;\n        }\n    }\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99uhwtes.d(21): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp99uhwtes.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99uhwtes.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        bool is_unique = true;\n        foreach(char c; to!string(i))\n\
    \        {\n            if(c.isDigit && c.to!int % 2 == 0)\n            {\n  \
    \              is_unique = false;\n                break;\n            }\n   \
    \     }\n        if(is_unique)\n        {\n            result[count] = i;\n  \
    \          count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7n9bykog.d(22): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7n9bykog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_q6k7ji_.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp_q6k7ji_.__unittest_L27_C1() [0x427f52]

    ??:? void tmp_q6k7ji_.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ isUnique = true;\n        foreach(char c; to!string(i))\n        {\n       \
    \     if(c % 2 == 0)\n            {\n                isUnique = false;\n     \
    \           break;\n            }\n        }\n        if(isUnique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaiaf9kbw.d(21): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiaf9kbw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.to!string.canFind(\"\
    2\") || num.to!string.canFind(\"4\") || num.to!string.canFind(\"6\") || num.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl8vchsg3.d(20): Error: no property `to` for type `long`

    /tmp/tmpl8vchsg3.d(20): Error: no property `to` for type `long`

    /tmp/tmpl8vchsg3.d(20): Error: no property `to` for type `long`

    /tmp/tmpl8vchsg3.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8vchsg3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5r5yrngr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmp5r5yrngr.__unittest_L27_C1() [0x427f5e]

    ??:? void tmp5r5yrngr.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n       \
    \ {\n            y ~= i;\n        }\n    }\n    return y;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph2dl3zhq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmph2dl3zhq.__unittest_L27_C1() [0x427f52]

    ??:? void tmph2dl3zhq.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z2zwfeh.d(20): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z2zwfeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp35idojvr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp35idojvr.__unittest_L27_C1() [0x427f52]

    ??:? void tmp35idojvr.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_q6k7ji_.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp_q6k7ji_.__unittest_L27_C1() [0x427f52]

    ??:? void tmp_q6k7ji_.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq4egooyi.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpq4egooyi.__unittest_L27_C1() [0x427f5e]

    ??:? void tmpq4egooyi.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyshm6dhn.d(20): Error: no property `digits` for type `long`

    /tmp/tmpyshm6dhn.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyshm6dhn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = new long[];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp82jqt64p.d(17): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp82jqt64p.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82jqt64p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusegz0ub.d(20): Error: undefined identifier `isEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusegz0ub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ finalResult = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n\
    \        finalResult[i] = result[i];\n    }\n    return finalResult;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpedlht8ru.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpedlht8ru.__unittest_L34_C1() [0x428012]

    ??:? void tmpedlht8ru.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b442]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430659]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]

    ??:? runModuleUnitTests [0x42c385]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp35idojvr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp35idojvr.__unittest_L27_C1() [0x427f52]

    ??:? void tmp35idojvr.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp35idojvr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp35idojvr.__unittest_L27_C1() [0x427f52]

    ??:? void tmp35idojvr.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        auto isUnique = true;\n\
    \        foreach(j; i.to!string)\n        {\n            if(j.to!int % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n        }\n        if(isUnique)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2u5o_7b.d(21): Error: no property `to` for type `long`

    /tmp/tmpl2u5o_7b.d(31): Error: cannot append type `long` to type `void[]`

    /tmp/tmpl2u5o_7b.d(34): Error: no property `sort` for type `void[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2u5o_7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit)\n                {\n           \
    \         if(c.to!int % 2 == 0)\n                    {\n                     \
    \   is_unique = false;\n                        break;\n                    }\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gol6jay.d(20): Error: no property `toString` for type `long`

    /tmp/tmp1gol6jay.d(27): Error: no property `toString` for type `long`

    /tmp/tmp1gol6jay.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gol6jay.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits;\n    int[] temp;\n    int count = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x1 = 0;\n    int y = 0;\n    int z =\
    \ 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n   \
    \ int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i1 =\
    \ 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n   \
    \ int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 =\
    \ 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n   \
    \ int w1 = 0;\n    int x2 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a2 =\
    \ 0;\n    int b2 = 0;\n    int c2 = 0;\n    int d2 = 0;\n    int e2 = 0;\n   \
    \ int f2 = 0;\n    int g2 = 0;\n    int h2 = 0;\n    int i2 = 0;\n    int j2 =\
    \ 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n   \
    \ int o2 = 0;\n    int p2 = 0;\n\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01zr_zhg.d(82): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01zr_zhg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, y, z;\n    long[] a;\n  \
    \  a = new long[x.length];\n    for (i = 0; i < x.length; i++)\n    {\n      \
    \  if (x[i] == 0)\n        {\n            a[i] = 0;\n        }\n        else\n\
    \        {\n            j = 0;\n            k = 0;\n            l = 0;\n     \
    \       m = 0;\n            n = 0;\n            o = 0;\n            p = 0;\n \
    \           q = 0;\n            r = 0;\n            s = 0;\n            t = 0;\n\
    \            u = 0;\n            v = 0;\n            w = 0;\n            y = 0;\n\
    \            z = 0;\n            while (x[i] > 0)\n            {\n           \
    \     if (x[i] % 10 == 0)\n                {\n                    j = 1;\n   \
    \             }\n                if (x[i] % 10 == 1)\n                {\n    \
    \                k = 1;\n                }\n                if (x[i] % 10 == 2)\n\
    \                {\n                    l = 1;\n                }\n          \
    \      if (x[i] % 10 == 3)\n                {\n                    m = 1;\n  \
    \              }\n                if (x[i] % 10 == 4)\n                {\n   \
    \                 n = 1;\n                }\n                if (x[i] % 10 ==\
    \ 5)\n                {\n                    o = 1;\n                }\n     \
    \           if (x[i] % 10 == 6)\n                {\n                    p = 1;\n\
    \                }\n                if (x[i] % 10 == 7)\n                {\n \
    \                   q = 1;\n                }\n                if (x[i] % 10 ==\
    \ 8)\n                {\n                    r = 1;\n                }\n     \
    \           if (x[i] % 10 == 9)\n                {\n                    s = 1;\n\
    \                }\n                x[i] = x[i] / 10;\n            }\n       \
    \     if (j == 0 && k == 0 && l == 0 && m == 0 && n == 0 && o == 0 &&\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhxr8yap.d(89): Error: expression expected, not `unittest`

    /tmp/tmpfhxr8yap.d(90): Error: found `{` when expecting `)`

    /tmp/tmpfhxr8yap.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfhxr8yap.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhxr8yap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool even = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   even = true;\n                    break;\n               \
    \ }\n            }\n            if(!even)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdas64561.d(20): Error: no property `toString` for type `long`

    /tmp/tmpdas64561.d(27): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdas64561.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp35idojvr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp35idojvr.__unittest_L27_C1() [0x427f52]

    ??:? void tmp35idojvr.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char j; i.toString())\n\
    \            {\n                if(j.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5iy4sh3.d(20): Error: no property `toString` for type `long`

    /tmp/tmpk5iy4sh3.d(27): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5iy4sh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    result\
    \ = result[0..count];\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7eaea4dd.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7eaea4dd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        bool isUnique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                isUnique = false;\n                break;\n       \
    \     }\n            i /= 10;\n        }\n        if(isUnique)\n            res\
    \ ~= i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppbht7r3h.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmppbht7r3h.__unittest_L35_C1() [0x427f8e]

    ??:? void tmppbht7r3h.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            x.remove(i);\n        }\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1drgxgh.d(20): Error: no property `to` for type `long`

    /tmp/tmpe1drgxgh.d(20): Error: no property `to` for type `long`

    /tmp/tmpe1drgxgh.d(20): Error: no property `to` for type `long`

    /tmp/tmpe1drgxgh.d(20): Error: no property `to` for type `long`

    /tmp/tmpe1drgxgh.d(22): Error: no property `remove` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1drgxgh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pky4v6.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpe4pky4v6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pky4v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 &&\n           i.to!string.count!(\"4\") == 0 &&\n           i.to!string.count!(\"\
    6\") == 0 &&\n           i.to!string.count!(\"8\") == 0)\n        {\n        \
    \    result ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d1j6uq3.d(20): Error: no property `to` for type `long`

    /tmp/tmp8d1j6uq3.d(21): Error: no property `to` for type `long`

    /tmp/tmp8d1j6uq3.d(22): Error: no property `to` for type `long`

    /tmp/tmp8d1j6uq3.d(23): Error: no property `to` for type `long`

    /tmp/tmp8d1j6uq3.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d1j6uq3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyshm6dhn.d(20): Error: no property `digits` for type `long`

    /tmp/tmpyshm6dhn.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyshm6dhn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    /tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    /tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    /tmp/tmpdnlzheis.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnlzheis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtoyjsl5.d(20): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpwtoyjsl5.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtoyjsl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsigoahni.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmpsigoahni.__unittest_L37_C1() [0x427f8e]

    ??:? void tmpsigoahni.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    /tmp/tmplfhqec0g.d(20): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhqec0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiai6xcrn.d(20): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiai6xcrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
