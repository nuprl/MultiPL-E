{
  "language": "d",
  "name": "HumanEval_5_intersperse",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv4aqj4o4.d(22): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4aqj4o4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmplnk6ptt4.intersperse(long[], long) [0x427e51]\n??:? void tmplnk6ptt4.__unittest_L26_C1() [0x427f9c]\n??:? void tmplnk6ptt4.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> isPrime(1L)\n    false\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n    false\n    >>> isPrime(35L)\n    false\n   \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpszkd7elr.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszkd7elr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers)\n    {\n        result ~= number;\n        if (number != numbers[$ - 1L])\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjc5q32g4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpjc5q32g4.__unittest_L24_C1() [0x4280f8]\n??:? void tmpjc5q32g4.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ceef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430859]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd59]\n??:? runModuleUnitTests [0x42ccc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp8h14ccuz.intersperse(long[], long) [0x427e4b]\n??:? void tmp8h14ccuz.__unittest_L22_C1() [0x427f3c]\n??:? void tmp8h14ccuz.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    foreach (idx, number; numbers)\n    {\n        result[idx * 2] = number;\n        if (idx < numbers.length - 1)\n            result[idx * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp8rhbuks1.intersperse(long[], long) [0x427e4b]\n??:? void tmp8rhbuks1.__unittest_L22_C1() [0x427f3c]\n??:? void tmp8rhbuks1.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    else\n        return [numbers[0]] ~ intersperse(numbers[1..$], delimeter);\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp98kxpaov.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp98kxpaov.__unittest_L18_C1() [0x428021]\n??:? void tmp98kxpaov.__modtest() [0x428168]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b442]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]\n??:? runModuleUnitTests [0x42c385]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, n; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = n;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2rs0lyix.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp2rs0lyix.__unittest_L27_C1() [0x428091]\n??:? void tmp2rs0lyix.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp75yiiqw6.intersperse(long[], long) [0x427e4b]\n??:? void tmp75yiiqw6.__unittest_L24_C1() [0x427f3c]\n??:? void tmp75yiiqw6.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv4kqmg6l.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4kqmg6l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (index, number; numbers) \n    {\n        result[2 * index] = number;\n        if (index < numbers.length - 1) \n        {\n            result[2 * index + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (index, number; numbers) \n    {\n        result[2 * index] = number;\n        if (index < numbers.length - 1) \n        {\n            result[2 * index + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (index, number; numbers) \n    {\n        result[2 * index] = number;\n        if (index < numbers.length - 1) \n        {\n            result[2 * index + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (index, number; numbers) \n    {\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0uii7541.d(74): Error: found `unittest` instead of statement\n/tmp/tmp0uii7541.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0uii7541.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpyf6xsdve.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428516]\n??:? long[] tmpyf6xsdve.intersperse(long[], long) [0x427f26]\n??:? void tmpyf6xsdve.__unittest_L23_C1() [0x42801e]\n??:? void tmpyf6xsdve.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmp9qktaf2p.intersperse(long[], long) [0x427e51]\n??:? void tmp9qktaf2p.__unittest_L26_C1() [0x427f9c]\n??:? void tmp9qktaf2p.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n    foreach(i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptg7r9u4c.d(68): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptg7r9u4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpk5kg71m3.intersperse(long[], long) [0x427e4b]\n??:? void tmpk5kg71m3.__unittest_L22_C1() [0x427f3c]\n??:? void tmpk5kg71m3.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (idx, number; numbers)\n    {\n        if (idx != 0)\n        {\n            result[idx * 2 - 1] = delimeter;\n        }\n        result[idx * 2] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpnkqohcmp.intersperse(long[], long) [0x427e4b]\n??:? void tmpnkqohcmp.__unittest_L24_C1() [0x427f40]\n??:? void tmpnkqohcmp.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu40uo46l.d(74): Error: found `unittest` instead of statement\n/tmp/tmpu40uo46l.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu40uo46l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        result ~= n;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_pandigital(123456789L)\n    true\n    >>> is_pandigital(123456788L)\n    false\n    >>> is_pandigital(1234567890L)\n    false\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return [];\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, n; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = n;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpirlr2g8t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428465]\n??:? void tmpirlr2g8t.__unittest_L29_C1() [0x42809d]\n??:? void tmpirlr2g8t.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428928]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpp5_o8qmm.intersperse(long[], long) [0x427e4b]\n??:? void tmpp5_o8qmm.__unittest_L24_C1() [0x427f44]\n??:? void tmpp5_o8qmm.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $]) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmp7_31tg0v.intersperse(long[], long) [0x427e51]\n??:? void tmp7_31tg0v.__unittest_L26_C1() [0x427fa0]\n??:? void tmp7_31tg0v.__modtest() [0x4281f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpym32uylf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpym32uylf.__unittest_L29_C1() [0x428091]\n??:? void tmpym32uylf.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i > 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n    \n*/\ndouble[] intersperse(double[] numbers, double delimeter) \n{\n    double[] result = new double[0L];\n    foreach (i, number; numbers) \n    {\n        if (i > 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptg7r9u4c.d(68): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptg7r9u4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpohckb9dx.intersperse(long[], long) [0x427e4b]\n??:? void tmpohckb9dx.__unittest_L22_C1() [0x427f3c]\n??:? void tmpohckb9dx.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8f2b8t33.d(68): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8f2b8t33.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers) \n    {\n        result[2 * i] = e;\n        if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmppdl6lele.intersperse(long[], long) [0x427e4b]\n??:? void tmppdl6lele.__unittest_L24_C1() [0x427f3c]\n??:? void tmppdl6lele.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, n; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = n;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpytx06m02.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpytx06m02.__unittest_L29_C1() [0x428091]\n??:? void tmpytx06m02.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n    false\n    >>> isPrime(35L)\n    false\n    >>> isPrime(36L)\n    false\n   \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzpvghvip.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpvghvip.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers, double delimeter) \n{\n    double[] result = new double[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4.0f)\n    []\n    >>> intersperse([1.0f, 2.0f, 3.0f], 4.0f)\n    [1.0f, 4.0f, 2.0f, 4.0f, 3.0f]\n*/\nfloat[] intersperse(float[] numbers, float delimeter) \n{\n    float[] result = new float[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42ee53]\n??:? _d_newarrayT [0x42a628]\n??:? long[] tmpypbmy8vt.intersperse(long[], long) [0x428abb]\n??:? void tmpypbmy8vt.__unittest_L62_C1() [0x428db4]\n??:? void tmpypbmy8vt.__modtest() [0x429004]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d913]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c7a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431a31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431ee0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4319bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c77d]\n??:? runModuleUnitTests [0x42d6e9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxn_yje2z.d(75): Error: no identifier for declarator `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn_yje2z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, n; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = n;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2rs0lyix.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp2rs0lyix.__unittest_L27_C1() [0x428091]\n??:? void tmp2rs0lyix.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpn64pwh_5.intersperse(long[], long) [0x427e4b]\n??:? void tmpn64pwh_5.__unittest_L22_C1() [0x427f3c]\n??:? void tmpn64pwh_5.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n    false\n    >>> isPrime(35L)\n    false\n    >>> isPrime(36L)\n    false\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbyc_5rtf.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyc_5rtf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers) \n    {\n        result ~= number;\n        if (number != numbers[$ - 1L]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime(34L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj209if51.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj209if51.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp5fkw4qpd.intersperse(long[], long) [0x427e4b]\n??:? void tmp5fkw4qpd.__unittest_L22_C1() [0x427f3c]\n??:? void tmp5fkw4qpd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmpf8shc6x6.intersperse(long[], long) [0x427e51]\n??:? void tmpf8shc6x6.__unittest_L26_C1() [0x427f7c]\n??:? void tmpf8shc6x6.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpohckb9dx.intersperse(long[], long) [0x427e4b]\n??:? void tmpohckb9dx.__unittest_L22_C1() [0x427f3c]\n??:? void tmpohckb9dx.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i > 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmp9qktaf2p.intersperse(long[], long) [0x427e51]\n??:? void tmp9qktaf2p.__unittest_L26_C1() [0x427f9c]\n??:? void tmp9qktaf2p.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmpl1mydhjg.intersperse(long[], long) [0x427e51]\n??:? void tmpl1mydhjg.__unittest_L28_C1() [0x427fa0]\n??:? void tmpl1mydhjg.__modtest() [0x4281f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[];\n    foreach (i, number; numbers)\n    {\n        if (i > 0)\n            result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5pcwwtfd.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5pcwwtfd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n        i += 1;\n        if (i < result.length) {\n            result[i] = delimeter;\n            i += 1;\n        }\n    }\n    return result;\n}\n/*\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L], 3L)\n    [[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L], 3L)\n    [[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L], [10L, 11L, 12L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L], 4L)\n    [[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L], 5L)\n    [[1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L, 10L], [11L, 12L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L], 6L)\n    [[1L, 2L, 3L, 4L, 5L, 6L], [7L, 8L, 9L, 10L, 11L, 12L]]\n    >>> group([1L, 2L,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwesaap1g.d(25): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwesaap1g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpuvdmw9z_.intersperse(long[], long) [0x427e4b]\n??:? void tmpuvdmw9z_.__unittest_L24_C1() [0x427f3c]\n??:? void tmpuvdmw9z_.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, x; numbers)\n    {\n        result[2 * i] = x;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpkckempvr.intersperse(long[], long) [0x427e4b]\n??:? void tmpkckempvr.__unittest_L22_C1() [0x427f3c]\n??:? void tmpkckempvr.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    Returns a list of the first `n' elements of the input list `numbers'\n    >>> take([], 4L)\n    []\n    >>> take([1L, 2L, 3L], 2L)\n    [1L, 2L]\n    >>> take([1L, 2L, 3L], 4L)\n    [1L, 2L, 3L]\n*/\nlong[] take(long[] numbers, long n) \n{\n    if (numbers.length <= n)\n        return numbers;\n    else\n        return numbers[0 .. n];\n}\n/*\n    Returns a list of the last `n' elements of the input list `numbers'\n    >>> take([], 4L)\n    []\n    >>> take([1L, 2L, 3L], 2L)\n    [2L, 3L]\n    >>> take([1L, 2L, 3L], 4L)\n    [1L, 2L, 3L]\n*/\nlong[] takeRight(long[] numbers, long n) \n{\n    if (numbers.length <= n)\n        return numbers;\n    else\n        return numbers[numbers.length - n .. $];\n}\n/*\n    Returns a list of the elements of the input list `numbers' except the first `n' elements\n    >>> drop([], 4L)\n    []\n    >>> drop([1L, 2L, 3L], 2L)\n    [3L]\n    >>> drop([1L, 2L, 3L], 4L)\n    []\n*/\nlong[] drop(long[] numbers, long n) \n{\n    if (numbers.length <= n)\n        return [];\n    else\n        return numbers[n .. $];\n}\n/*\n    Returns a list of the elements of the input list `numbers' except the last `n' elements\n   \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_8j5hslh.d(70): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8j5hslh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i + 1 < numbers.length) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpqp4r4jnr.intersperse(long[], long) [0x427e4b]\n??:? void tmpqp4r4jnr.__unittest_L24_C1() [0x427f3c]\n??:? void tmpqp4r4jnr.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp_5ag_ic6.intersperse(long[], long) [0x427e4b]\n??:? void tmp_5ag_ic6.__unittest_L22_C1() [0x427f44]\n??:? void tmp_5ag_ic6.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    else\n        return [numbers[0]] ~ intersperse(numbers[1 .. $], delimeter);\n}\n/*\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpau45xib5.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpau45xib5.__unittest_L22_C1() [0x428021]\n??:? void tmpau45xib5.__modtest() [0x428168]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b442]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]\n??:? runModuleUnitTests [0x42c385]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpktlk09gd.intersperse(long[], long) [0x427e4b]\n??:? void tmpktlk09gd.__unittest_L22_C1() [0x427f3c]\n??:? void tmpktlk09gd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmp9qktaf2p.intersperse(long[], long) [0x427e51]\n??:? void tmp9qktaf2p.__unittest_L26_C1() [0x427f9c]\n??:? void tmp9qktaf2p.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmplnk6ptt4.intersperse(long[], long) [0x427e51]\n??:? void tmplnk6ptt4.__unittest_L26_C1() [0x427f9c]\n??:? void tmplnk6ptt4.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        for (size_t i = 0; i < numbers.length; i++)\n        {\n            result[2 * i] = numbers[i];\n            if (i < numbers.length - 1)\n            {\n                result[2 * i + 1] = delimeter;\n            }\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpym32uylf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpym32uylf.__unittest_L29_C1() [0x428091]\n??:? void tmpym32uylf.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmppgyc2mqz.intersperse(long[], long) [0x427e4b]\n??:? void tmppgyc2mqz.__unittest_L24_C1() [0x427f44]\n??:? void tmppgyc2mqz.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i - 1] = delimeter;\n            result[2 * i] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpvnkxbcaj.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42850e]\n??:? long[] tmpvnkxbcaj.intersperse(long[], long) [0x427f1b]\n??:? void tmpvnkxbcaj.__unittest_L27_C1() [0x428016]\n??:? void tmpvnkxbcaj.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $]) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> group([])\n    []\n    >>> group([1L, 2L, 3L])\n    [[1L, 2L, 3L]]\n    >>> group([1L, 2L, 2L, 4L, 4L, 4L, 3L])\n    [[1L], [2L, 2L], [4L, 4L, 4L], [3L]]\n*/\nlong[][] group(long[] numbers) \n{\n    long[][] result = new long[][];\n    long[] current = new long[];\n    foreach (n; numbers) {\n        if (current.length == 0 || current[$ - 1] == n) {\n            current ~= n;\n        } else {\n            result ~= current;\n            current = [n];\n        }\n    }\n    if (current.length != 0) {\n        result ~= current;\n    }\n    return result;\n}\n/*\n    >>> encode([])\n    []\n    >>> encode([1L, 1L, 1L, 2L, 3L, 3L])\n    [[3L, 1L], [1L, 2L], [2L, 3L]]\n*/\nlong[][] encode(long[] numbers) \n{\n    return group(numbers).map!(x => [x.length, x[0]]);\n}\n/*\n    >>> decode([])\n    []\n    >>> decode([[3L, 1L], [1L, 2L], [2L, 3L]])\n    [1L, 1L, 1L, 2L, 3L, 3L]\n*/\nlong[] decode(long[][] pairs) \n{\n    long[] result = new long[];\n    foreach (p; pairs) {\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp941ypg1b.d(71): Error: found `unittest` instead of statement\n/tmp/tmp941ypg1b.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp941ypg1b.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    if (numbers.length == 1)\n        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt_16uwsh.d(25): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_16uwsh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> isPrime(1L)\n    false\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq_cfhnyh.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_cfhnyh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[];\n    foreach (number; numbers) \n    {\n        result ~= number;\n        if (number != numbers[$ - 1]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpl6kj62r4.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6kj62r4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers) \n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n        i++;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers) \n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n        i++;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse4(long[] numbers, long delimeter) \n{\n    long[]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4lsl_sgk.d(75): Error: no identifier for declarator `long[]`\n/tmp/tmp4lsl_sgk.d(75): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lsl_sgk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp0fzb7m6g.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42850e]\n??:? long[] tmp0fzb7m6g.intersperse(long[], long) [0x427f1b]\n??:? void tmp0fzb7m6g.__unittest_L24_C1() [0x428016]\n??:? void tmp0fzb7m6g.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpki4oo78p.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpki4oo78p.__unittest_L26_C1() [0x428091]\n??:? void tmpki4oo78p.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 'a')\n    []\n    >>> intersperse(['a', 'b', 'c'], 'd')\n    ['a', 'd', 'b', 'd', 'c']\n*/\nchar[] intersperse(char[] numbers, char delimeter) \n{\n    char[] result = new char[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 1.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers, double delimeter) \n{\n    double[] result = new double[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 1.0f)\n    []\n    >>> intersperse([1.0f, 2.0f, 3.0f], 4.0f)\n    [1.0f, 4.0f, 2.0f,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpugsl1d8j.d(68): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugsl1d8j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result ~= number;\n        if (i != numbers.length - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Return the number of elements in the input list `numbers' that are equal to `number'\n    >>> count([], 1L)\n    0L\n    >>> count([1L, 2L, 3L], 1L)\n    1L\n    >>> count([1L, 2L, 3L], 2L)\n    1L\n    >>> count([1L, 2L, 3L], 3L)\n    1L\n    >>> count([1L, 2L, 3L], 4L)\n    0L\n    >>> count([1L, 2L, 3L, 1L, 2L, 3L], 1L)\n    2L\n    >>> count([1L, 2L, 3L, 1L, 2L, 3L], 2L)\n    2L\n    >>> count([1L, 2L, 3L, 1L, 2L, 3L], 3L)\n    2L\n    >>> count([1L, 2L, 3L, 1L, 2L, 3L], 4L)\n    0L\n*/\nlong count(long[] numbers, long number) \n{\n    long result = 0L;\n    foreach (i, n; numbers)\n    {\n        if (n == number)\n        {\n            result += 1L;\n        }\n    }\n    return result;\n}\n/*\n Return the number of elements in the input list `numbers' that are equal to `number'\n    >>> count([], 1L)\n    0L\n    >>> count([1L, 2L, 3L], 1L)\n    1L\n    >>> count([1L, 2L, 3L], 2L)\n    1L\n    >>> count([1L, 2L, 3L], 3L)\n    1L\n    >>> count([1L, 2L, 3L], 4L)\n    0L\n    >>> count([1L, 2L,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6xyscju.d(57): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6xyscju.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L)\n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L)\n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L)\n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L)\n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljdysc9q.d(81): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljdysc9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp5fkw4qpd.intersperse(long[], long) [0x427e4b]\n??:? void tmp5fkw4qpd.__unittest_L22_C1() [0x427f3c]\n??:? void tmp5fkw4qpd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers) \n    {\n        result ~= number;\n        if (number != numbers[$ - 1L]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0bq5pnsi.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmp0bq5pnsi.__unittest_L24_C1() [0x4280f8]\n??:? void tmp0bq5pnsi.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ceef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430859]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd59]\n??:? runModuleUnitTests [0x42ccc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp9bh51fl0.intersperse(long[], long) [0x427e4b]\n??:? void tmp9bh51fl0.__unittest_L24_C1() [0x427f3c]\n??:? void tmp9bh51fl0.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    for (size_t i = 1; i < numbers.length; i++)\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[(numbers.length - 1) * 2];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpatx5k0uh.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x4284ce]\n??:? long[] tmpatx5k0uh.intersperse(long[], long) [0x427ebe]\n??:? void tmpatx5k0uh.__unittest_L24_C1() [0x427fda]\n??:? void tmpatx5k0uh.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    for (long i = 0; i < numbers.length; i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp0foh6o0j.intersperse(long[], long) [0x427e4b]\n??:? void tmp0foh6o0j.__unittest_L24_C1() [0x427f44]\n??:? void tmp0foh6o0j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpohckb9dx.intersperse(long[], long) [0x427e4b]\n??:? void tmpohckb9dx.__unittest_L22_C1() [0x427f3c]\n??:? void tmpohckb9dx.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp5fkw4qpd.intersperse(long[], long) [0x427e4b]\n??:? void tmp5fkw4qpd.__unittest_L22_C1() [0x427f3c]\n??:? void tmp5fkw4qpd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        result ~= n;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        result ~= n;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        result ~= n;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptt_5e1k7.d(77): Error: expression expected, not `unittest`\n/tmp/tmptt_5e1k7.d(78): Error: found `{` when expecting `]`\n/tmp/tmptt_5e1k7.d(79): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptt_5e1k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i + 1 < numbers.length)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp7vhtxjpi.intersperse(long[], long) [0x427e4b]\n??:? void tmp7vhtxjpi.__unittest_L22_C1() [0x427f3c]\n??:? void tmp7vhtxjpi.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3)\n    [[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L], [10L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 4)\n    [[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 10)\n    [[1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 1)\n    [[1L], [2L], [3L], [4L], [5L], [6L], [7L], [8L], [9L], [10L]]\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 0)\n    []\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], -1)\n    []\n*/\nlong[][] group(long[] numbers, int size) \n{\n    if (size <= 0)\n        return new long[][] {};\n    long[][] result =\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9w2w1k4x.d(39): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp9w2w1k4x.d(41): Error: expression expected, not `unittest`\n/tmp/tmp9w2w1k4x.d(42): Error: semicolon expected, not `{`\n/tmp/tmp9w2w1k4x.d(42): Error: declaration expected, not `{`\n/tmp/tmp9w2w1k4x.d(45): Error: declaration expected, not `assert`\n/tmp/tmp9w2w1k4x.d(46): Error: declaration expected, not `assert`\n/tmp/tmp9w2w1k4x.d(47): Error: declaration expected, not `assert`\n/tmp/tmp9w2w1k4x.d(48): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9w2w1k4x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> isPrime(1L)\n    false\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpu6bsuyzi.intersperse(long[], long) [0x427e4b]\n??:? void tmpu6bsuyzi.__unittest_L66_C1() [0x427f3c]\n??:? void tmpu6bsuyzi.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i > 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return [];\n    }\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> splitBy(4L, [])\n    []\n    >>> splitBy(4L, [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L])\n    [[1L, 2L, 3L], [5L, 6L, 7L]]\n*/\nlong[][] splitBy(long delimeter, long[] numbers) \n{\n    long[][] result = [];\n    long[] current = [];\n    foreach (number; numbers)\n    {\n        if (number == delimeter)\n        {\n            result ~= current;\n            current = [];\n        }\n        else\n        {\n            current ~= number;\n        }\n    }\n    if (current.length != 0)\n    {\n        result ~= current;\n    }\n    return result;\n}\n/*\n    >>> splitBy(4L, [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], true)\n    [[1L, 2L, 3L], [5L, 6L, 7L, 8L]]\n*/\nlong[][] splitBy(long delimeter, long[] numbers, bool includeDelimeter) \n{\n    long[][] result = [];\n    long[] current = [];\n    foreach (number; numbers)\n    {\n        if (number == delimeter)\n        {\n            if (includeDelimeter)\n            {\n                current ~= number;\n            }\n            result ~= current;\n            current = [];\n        }\n        else\n        {\n            current ~= number;\n        }\n    }\n    if (current.length != 0)\n    {\n        result ~= current;\n    }\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsd2wu69k.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsd2wu69k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i - 1] = delimeter;\n            result[2 * i] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpvnkxbcaj.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42850e]\n??:? long[] tmpvnkxbcaj.intersperse(long[], long) [0x427f1b]\n??:? void tmpvnkxbcaj.__unittest_L27_C1() [0x428016]\n??:? void tmpvnkxbcaj.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9bal0wfc.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bal0wfc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpod6i8gr2.d(29): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpod6i8gr2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjbm8yhra.d(77): Error: expression expected, not `unittest`\n/tmp/tmpjbm8yhra.d(78): Error: found `{` when expecting `]`\n/tmp/tmpjbm8yhra.d(79): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbm8yhra.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpk5kg71m3.intersperse(long[], long) [0x427e4b]\n??:? void tmpk5kg71m3.__unittest_L22_C1() [0x427f3c]\n??:? void tmpk5kg71m3.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result ~= number;\n        if (i < numbers.length - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        if (i == 0L) \n        {\n            result ~= n;\n        }\n        else \n        {\n            result ~= delimeter;\n            result ~= n;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        if (i == 0L) \n        {\n            result ~= n;\n        }\n        else \n        {\n            result ~= delimeter;\n            result ~= n;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        if (i == 0L) \n        {\n            result ~= n;\n        }\n        else \n        {\n            result ~= delimeter;\n            result ~= n;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcd9ytk4f.d(78): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcd9ytk4f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, n; numbers)\n    {\n        result[i * 2] = n;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpuglp3600.intersperse(long[], long) [0x427e4b]\n??:? void tmpuglp3600.__unittest_L22_C1() [0x427f3c]\n??:? void tmpuglp3600.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int j = 0;\n    foreach (i, number; numbers) \n    {\n        result[j] = number;\n        j += 1;\n        if (i != numbers.length - 1) \n        {\n            result[j] = delimeter;\n            j += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpq69a54p8.intersperse(long[], long) [0x427e4b]\n??:? void tmpq69a54p8.__unittest_L27_C1() [0x427f44]\n??:? void tmpq69a54p8.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpqul26grm.intersperse(long[], long) [0x427e4b]\n??:? void tmpqul26grm.__unittest_L24_C1() [0x427f40]\n??:? void tmpqul26grm.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpk5kg71m3.intersperse(long[], long) [0x427e4b]\n??:? void tmpk5kg71m3.__unittest_L22_C1() [0x427f3c]\n??:? void tmpk5kg71m3.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, x; numbers) \n    {\n        result ~= x;\n        if (i != numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Return the sum of all elements of input list `numbers'\n    >>> sum([])\n    0L\n    >>> sum([1L, 2L, 3L])\n    6L\n*/\nlong sum(long[] numbers) \n{\n    long result = 0L;\n    foreach (x; numbers) \n    {\n        result += x;\n    }\n    return result;\n}\n/*\n Return the product of all elements of input list `numbers'\n    >>> product([])\n    1L\n    >>> product([1L, 2L, 3L])\n    6L\n*/\nlong product(long[] numbers) \n{\n    long result = 1L;\n    foreach (x; numbers) \n    {\n        result *= x;\n    }\n    return result;\n}\n/*\n Return the maximum element of input list `numbers'\n    >>> maximum([])\n    0L\n    >>> maximum([1L, 2L, 3L])\n    3L\n*/\nlong maximum(long[] numbers) \n{\n    long result = 0L;\n    foreach (x; numbers) \n    {\n        if (x > result) \n        {\n            result = x;\n        }\n    }\n    return result;\n}\n/*\n Return the minimum element of input list `numbers'\n    >>> minimum([])\n    0L\n    >>> minimum([1L, 2L, 3L])\n    1L\n*/\nlong minimum(long[] numbers) \n{\n    long result = 0L;\n    foreach (x; numbers) \n    {\n        if (x < result) \n        {\n            result = x;\n        }\n    }\n    return result;\n}\n/*\n Return the mean of all elements of input list `numbers'\n    >>> mean([])\n    0L\n    >>> mean([1L, 2\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfo70m8j5.d(94): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfo70m8j5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpporyxwjt.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpporyxwjt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[];\n    foreach (n; numbers) \n    {\n        result ~= n;\n        if (n != numbers[$ - 1]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> isPrime(1L)\n    false\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n    false\n    >>> isPrime(35L)\n    false\n    >>> isPrime(36L)\n    false\n    >>> isPrime(37L)\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuz78l_ro.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuz78l_ro.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmkksfgvy.d(69): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkksfgvy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        result ~= n;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmpf8shc6x6.intersperse(long[], long) [0x427e51]\n??:? void tmpf8shc6x6.__unittest_L26_C1() [0x427f7c]\n??:? void tmpf8shc6x6.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, n; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, e; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = e;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplt_o49mz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmplt_o49mz.__unittest_L29_C1() [0x428091]\n??:? void tmplt_o49mz.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmpylxraixd.intersperse(long[], long) [0x427e51]\n??:? void tmpylxraixd.__unittest_L26_C1() [0x427f9c]\n??:? void tmpylxraixd.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8mnhwroj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp8mnhwroj.__unittest_L29_C1() [0x428091]\n??:? void tmp8mnhwroj.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>>\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hepqq2n.d(29): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hepqq2n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers)\n    {\n        result ~= number;\n        if (number != numbers[$ - 1L])\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime(34L)\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoee5_5cw.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoee5_5cw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp3w_48h_h.intersperse(long[], long) [0x427e4b]\n??:? void tmp3w_48h_h.__unittest_L24_C1() [0x427f3c]\n??:? void tmp3w_48h_h.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp3w_48h_h.intersperse(long[], long) [0x427e4b]\n??:? void tmp3w_48h_h.__unittest_L24_C1() [0x427f3c]\n??:? void tmp3w_48h_h.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4hldj2j_.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428516]\n??:? long[] tmp4hldj2j_.intersperse(long[], long) [0x427f26]\n??:? void tmp4hldj2j_.__unittest_L24_C1() [0x42801e]\n??:? void tmp4hldj2j_.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpyf6xsdve.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428516]\n??:? long[] tmpyf6xsdve.intersperse(long[], long) [0x427f26]\n??:? void tmpyf6xsdve.__unittest_L23_C1() [0x42801e]\n??:? void tmpyf6xsdve.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmp_093xbzv.intersperse(long[], long) [0x427e51]\n??:? void tmp_093xbzv.__unittest_L28_C1() [0x427f9c]\n??:? void tmp_093xbzv.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8mnhwroj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp8mnhwroj.__unittest_L29_C1() [0x428091]\n??:? void tmp8mnhwroj.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp0fzb7m6g.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42850e]\n??:? long[] tmp0fzb7m6g.intersperse(long[], long) [0x427f1b]\n??:? void tmp0fzb7m6g.__unittest_L24_C1() [0x428016]\n??:? void tmp0fzb7m6g.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8mnhwroj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp8mnhwroj.__unittest_L29_C1() [0x428091]\n??:? void tmp8mnhwroj.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result ~= number;\n        if (i < numbers.length - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp75yiiqw6.intersperse(long[], long) [0x427e4b]\n??:? void tmp75yiiqw6.__unittest_L24_C1() [0x427f3c]\n??:? void tmp75yiiqw6.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpk5kg71m3.intersperse(long[], long) [0x427e4b]\n??:? void tmpk5kg71m3.__unittest_L22_C1() [0x427f3c]\n??:? void tmpk5kg71m3.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number;\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6e9jzbiv.d(78): Error: expression expected, not `unittest`\n/tmp/tmp6e9jzbiv.d(79): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e9jzbiv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result ~= number;\n        if (i < numbers.length - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result ~= number;\n        if (i < numbers.length - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result ~= number;\n        if (i < numbers.length - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    fore\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13g53suw.d(78): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp13g53suw.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13g53suw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4hldj2j_.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428516]\n??:? long[] tmp4hldj2j_.intersperse(long[], long) [0x427f26]\n??:? void tmp4hldj2j_.__unittest_L24_C1() [0x42801e]\n??:? void tmp4hldj2j_.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmpf8shc6x6.intersperse(long[], long) [0x427e51]\n??:? void tmpf8shc6x6.__unittest_L26_C1() [0x427f7c]\n??:? void tmpf8shc6x6.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp0fzb7m6g.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42850e]\n??:? long[] tmp0fzb7m6g.intersperse(long[], long) [0x427f1b]\n??:? void tmp0fzb7m6g.__unittest_L24_C1() [0x428016]\n??:? void tmp0fzb7m6g.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, e; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpm99w6324.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428516]\n??:? long[] tmpm99w6324.intersperse(long[], long) [0x427f26]\n??:? void tmpm99w6324.__unittest_L24_C1() [0x42801e]\n??:? void tmpm99w6324.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, n; numbers)\n    {\n        result[i * 2] = n;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpsb3zd1pg.intersperse(long[], long) [0x427e4b]\n??:? void tmpsb3zd1pg.__unittest_L22_C1() [0x427f3c]\n??:? void tmpsb3zd1pg.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp0fzb7m6g.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42850e]\n??:? long[] tmp0fzb7m6g.intersperse(long[], long) [0x427f1b]\n??:? void tmp0fzb7m6g.__unittest_L24_C1() [0x428016]\n??:? void tmp0fzb7m6g.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[];\n    foreach (n; numbers) \n    {\n        result ~= n;\n        if (n != numbers[$ - 1]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmwbd4mwy.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmwbd4mwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    for (long i = 0; i < numbers.length; i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    long i = 0;\n    foreach (n; numbers) \n    {\n        result[i] = n;\n        i += 1;\n        if (i < result.length) \n        {\n            result[i] = delimeter;\n            i += 1;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    long i = 0;\n    foreach (n; numbers) \n    {\n        result[i] = n;\n        i += 1;\n        if (i < result.length) \n        {\n            result[i] = delimeter;\n            i += 1;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse4(long[] numbers, long delimeter) \n{\n    long[]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqcprua6d.d(77): Error: no identifier for declarator `long[]`\n/tmp/tmpqcprua6d.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcprua6d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv2g5661n.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2g5661n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp9bh51fl0.intersperse(long[], long) [0x427e4b]\n??:? void tmp9bh51fl0.__unittest_L24_C1() [0x427f3c]\n??:? void tmp9bh51fl0.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n            result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmpf8shc6x6.intersperse(long[], long) [0x427e51]\n??:? void tmpf8shc6x6.__unittest_L26_C1() [0x427f7c]\n??:? void tmpf8shc6x6.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph3k6j5qd.d(66): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3k6j5qd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpurdsiiae.intersperse(long[], long) [0x427e4b]\n??:? void tmpurdsiiae.__unittest_L24_C1() [0x427f44]\n??:? void tmpurdsiiae.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers)\n    {\n        result[i * 2] = e;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpzyko4x21.intersperse(long[], long) [0x427e4b]\n??:? void tmpzyko4x21.__unittest_L22_C1() [0x427f3c]\n??:? void tmpzyko4x21.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp70cmrjca.intersperse(long[], long) [0x427e4b]\n??:? void tmp70cmrjca.__unittest_L24_C1() [0x427f40]\n??:? void tmp70cmrjca.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjbm8yhra.d(77): Error: expression expected, not `unittest`\n/tmp/tmpjbm8yhra.d(78): Error: found `{` when expecting `]`\n/tmp/tmpjbm8yhra.d(79): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbm8yhra.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    for (long i = 0; i < numbers.length; i++)\n    {\n        result[2 * i] = numbers[i];\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpmbss84qh.intersperse(long[], long) [0x427e4b]\n??:? void tmpmbss84qh.__unittest_L22_C1() [0x427f44]\n??:? void tmpmbss84qh.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpktlk09gd.intersperse(long[], long) [0x427e4b]\n??:? void tmpktlk09gd.__unittest_L22_C1() [0x427f3c]\n??:? void tmpktlk09gd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp5fkw4qpd.intersperse(long[], long) [0x427e4b]\n??:? void tmp5fkw4qpd.__unittest_L22_C1() [0x427f3c]\n??:? void tmp5fkw4qpd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n   \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi4k4suaj.d(74): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4k4suaj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpohckb9dx.intersperse(long[], long) [0x427e4b]\n??:? void tmpohckb9dx.__unittest_L22_C1() [0x427f3c]\n??:? void tmpohckb9dx.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp5fkw4qpd.intersperse(long[], long) [0x427e4b]\n??:? void tmp5fkw4qpd.__unittest_L22_C1() [0x427f3c]\n??:? void tmp5fkw4qpd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, ref n; numbers) \n    {\n        result[i * 2] = n;\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, n; numbers) \n    {\n        result[i * 2] = n;\n        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse4(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplvlxkmhd.d(71): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvlxkmhd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmx612jvo.d(74): Error: found `unittest` instead of statement\n/tmp/tmpmx612jvo.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmx612jvo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n            result\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcsv9unga.d(70): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpcsv9unga.d(78): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcsv9unga.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsv9unga.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, x; numbers) \n    {\n        result[2 * i] = x;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpyof_emx7.intersperse(long[], long) [0x427e4b]\n??:? void tmpyof_emx7.__unittest_L24_C1() [0x427f3c]\n??:? void tmpyof_emx7.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpohckb9dx.intersperse(long[], long) [0x427e4b]\n??:? void tmpohckb9dx.__unittest_L22_C1() [0x427f3c]\n??:? void tmpohckb9dx.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers)\n    {\n        result ~= number;\n        if (number != numbers[$ - 1L])\n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjc5q32g4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpjc5q32g4.__unittest_L24_C1() [0x4280f8]\n??:? void tmpjc5q32g4.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ceef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430859]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd59]\n??:? runModuleUnitTests [0x42ccc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> range(0L, 0L)\n    []\n    >>> range(0L, 1L)\n    [0L]\n    >>> range(0L, 2L)\n    [0L, 1L]\n    >>> range(0L, 3L)\n    [0L, 1L, 2L]\n    >>> range(0L, 4L)\n    [0L, 1L, 2L, 3L]\n    >>> range(0L, 5L)\n    [0L, 1L, 2L, 3L, 4L]\n    >>> range(0L, 6L)\n    [0L, 1L, 2L, 3L, 4L, 5L]\n    >>> range(0L, 7L)\n    [0L, 1L, 2L, 3L, 4L, 5L, 6L]\n    >>> range(0L, 8L)\n    [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]\n    >>> range(0L, 9L)\n    [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]\n    >>> range(0L, 10L)\n    [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]\n    >>> range(0L, 11L)\n    [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]\n    >>> range(0L, 12L)\n    [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]\n    >>> range(0\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_e6510ye.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_e6510ye.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        if (i > 0L)\n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpohckb9dx.intersperse(long[], long) [0x427e4b]\n??:? void tmpohckb9dx.__unittest_L22_C1() [0x427f3c]\n??:? void tmpohckb9dx.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return [];\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmj5k7dg5.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428465]\n??:? void tmpmj5k7dg5.__unittest_L29_C1() [0x42809d]\n??:? void tmpmj5k7dg5.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428928]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmp5fkw4qpd.intersperse(long[], long) [0x427e4b]\n??:? void tmp5fkw4qpd.__unittest_L22_C1() [0x427f3c]\n??:? void tmp5fkw4qpd.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[];\n    foreach (i, n; numbers) \n    {\n        if (i != 0) \n        {\n            result ~= delimeter;\n        }\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgmi1y2p7.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmi1y2p7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i != numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> isPrime(2L)\n    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n    >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n    >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n    >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n    false\n    >>> isPrime(35L)\n    false\n    >>> isPrime(36L)\n    false\n    >>> isPrime(37L)\n    true\n    >>> is\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_ad5or0g.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ad5or0g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result = new long[];\n    foreach (i, n; numbers)\n    {\n        result ~= n;\n        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwg5t9ife.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwg5t9ife.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers[1 .. $]) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:? long[] tmpxfbo402c.intersperse(long[], long) [0x427e51]\n??:? void tmpxfbo402c.__unittest_L26_C1() [0x427fa0]\n??:? void tmpxfbo402c.__modtest() [0x4281f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmpks0j6id6.intersperse(long[], long) [0x427e51]\n??:? void tmpks0j6id6.__unittest_L28_C1() [0x427f7c]\n??:? void tmpks0j6id6.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i > 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers) \n    {\n        result ~= number;\n        if (number != numbers[$ - 1L]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0bq5pnsi.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmp0bq5pnsi.__unittest_L24_C1() [0x4280f8]\n??:? void tmp0bq5pnsi.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ceef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430859]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd59]\n??:? runModuleUnitTests [0x42ccc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L], 4L)\n    [[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L], [17L, 18L, 19L, 20L]]\n*/\nlong[][] group(long[] numbers, long groupSize) \n{\n    long[][] result = new long[][];\n    long[] currentGroup = new long[];\n    foreach (number; numbers) \n    {\n        currentGroup ~= number;\n        if (currentGroup.length == groupSize) \n        {\n            result ~= currentGroup;\n            currentGroup = new long[];\n        }\n    }\n    if (currentGroup.length > 0) \n    {\n        result ~= currentGroup;\n    }\n    return result;\n}\n/*\n    >>> group([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L], 4L, true)\n    [[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L], [17L, 18L, 19L, 20L], []]\n*/\nlong[][] group(long[] numbers, long groupSize, bool includeEmpty) \n{\n    long[][]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxmcycvl3.d(54): Error: no identifier for declarator `long[][]`\n/tmp/tmpxmcycvl3.d(54): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmcycvl3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmpks0j6id6.intersperse(long[], long) [0x427e51]\n??:? void tmpks0j6id6.__unittest_L28_C1() [0x427f7c]\n??:? void tmpks0j6id6.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length - 1];\n        int i = 0;\n        foreach (number; numbers)\n        {\n            result[i] = number;\n            i += 1;\n            if (i < result.length)\n            {\n                result[i] = delimeter;\n                i += 1;\n            }\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpds2swtg1.d(75): Error: semicolon expected, not `unittest`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpds2swtg1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i > 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, e; numbers[1 .. $]) \n    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkb1jcwbm.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpkb1jcwbm.__unittest_L26_C1() [0x428091]\n??:? void tmpkb1jcwbm.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpk5kg71m3.intersperse(long[], long) [0x427e4b]\n??:? void tmpk5kg71m3.__unittest_L22_C1() [0x427f3c]\n??:? void tmpk5kg71m3.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1hs0zt6z.d(66): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmp1hs0zt6z.d(74): Error: found `void` when expecting `)`\n/tmp/tmp1hs0zt6z.d(74): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hs0zt6z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (number; numbers) \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da6b]\n??:? _d_newarrayT [0x4297f0]\n??:? long[] tmprfv9wh7d.intersperse(long[], long) [0x427e51]\n??:? void tmprfv9wh7d.__unittest_L28_C1() [0x427f7c]\n??:? void tmprfv9wh7d.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpds2swtg1.d(75): Error: semicolon expected, not `unittest`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpds2swtg1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmprbrz_45f.intersperse(long[], long) [0x427e4b]\n??:? void tmprbrz_45f.__unittest_L24_C1() [0x427f3c]\n??:? void tmprbrz_45f.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiqdtutpv.d(69): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqdtutpv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n        result ~= number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, number;\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6e9jzbiv.d(78): Error: expression expected, not `unittest`\n/tmp/tmp6e9jzbiv.d(79): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e9jzbiv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> splitAt(0, [1L, 2L, 3L])\n    ([], [1L, 2L, 3L])\n    >>> splitAt(1, [1L, 2L, 3L])\n    ([1L], [2L, 3L])\n    >>> splitAt(2, [1L, 2L, 3L])\n    ([1L, 2L], [3L])\n    >>> splitAt(3, [1L, 2L, 3L])\n    ([1L, 2L, 3L], [])\n*/\nTuple!(long[], long[]) splitAt(long index, long[] numbers) \n{\n    long[] first = numbers[0 .. index];\n    long[] second = numbers[index .. $];\n    return tuple(first, second);\n}\n/*\n    >>> take(0, [1L, 2L, 3L])\n    []\n    >>> take(1, [1L, 2L, 3L])\n    [1L]\n    >>> take(2, [1L, 2L, 3L])\n    [1L, 2L]\n    >>> take(3, [1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> take(4, [1L, 2L, 3L])\n    [1L, 2L, 3L]\n*/\nlong[] take(long count, long[] numbers) \n{\n    return numbers[0 .. min(count, numbers.length)];\n}\n/*\n    >>> drop(0, [1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> drop(1, [1L, 2L, 3L])\n    [2L, 3L]\n    >>> drop(2, [1L, 2L, 3L])\n    [3L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptzf9fj8h.d(54): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzf9fj8h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i + 1 < numbers.length)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpceu3e8o8.intersperse(long[], long) [0x427e4b]\n??:? void tmpceu3e8o8.__unittest_L22_C1() [0x427f3c]\n??:? void tmpceu3e8o8.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (number; numbers) \n    {\n        result ~= number;\n        if (number != numbers[$ - 1L]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime(34L)\n    false\n    >>> is_prime(35L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydexlgha.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydexlgha.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163031
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[0L];\n    foreach (i, e; numbers) \n    {\n        result ~= e;\n        if (i < numbers.length - 1L) \n        {\n            result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163031
    }
  ]
}