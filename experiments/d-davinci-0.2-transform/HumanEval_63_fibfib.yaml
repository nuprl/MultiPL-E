name: HumanEval_63_fibfib
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence is\
  \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
  \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
  \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
  \ the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n    0L\n\
  \    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong fibfib(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) ==\
  \ 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n   \
  \ assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
  \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
completions: ["{\n    long[] fibfibs = new long[n+1];\n    fibfibs[0] = 0;\n    fibfibs[1]\
    \ = 0;\n    fibfibs[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n      \
    \  fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n    }\n    return\
    \ fibfibs[n];\n}", "{\n    if (n < 3)\n        return n - 1;\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}", "{\n    if (n < 3)\n        return\
    \ n - 1;\n    else\n    {\n        long a = 0, b = 1, c = 1;\n        for (long\
    \ i = 3; i <= n; i++)\n        {\n            long d = a + b + c;\n          \
    \  a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n\
    \    }\n}", "{\n    if (n < 3) \n        return n - 1;\n    long a = 0, b = 0,\
    \ c = 1;\n    foreach (i; 2 .. n) \n    {\n        long d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}", "{\n   \
    \ if (n < 3)\n        return n - 1;\n    else\n    {\n        long a = 0, b =\
    \ 1, c = 1;\n        foreach (i; 2 .. n)\n        {\n            long d = a +\
    \ b + c;\n            a = b;\n            b = c;\n            c = d;\n       \
    \ }\n        return c;\n    }\n}", "{\n    if (n == 0) \n    {\n        return\
    \ 0;\n    }\n    if (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2)\
    \ \n    {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n}", "{\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n        return 1;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n    while\
    \ (n > 2)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        n--;\n    }\n    return d;\n}", "{\n    if (n < 3) \n  \
    \      return n - 1;\n    long a = 0, b = 0, c = 1;\n    foreach (i; 2 .. n) \n\
    \    {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}", "{\n    if (n == 0)\n        return 0;\n   \
    \ if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "{\n    if (n < 2) \n        return\
    \ 0;\n    if (n == 2) \n        return 1;\n    long a = 0, b = 0, c = 1;\n   \
    \ foreach (i; 2 .. n) \n    {\n        long d = a + b + c;\n        a = b;\n \
    \       b = c;\n        c = d;\n    }\n    return c;\n}", "{\n    if (n < 0)\n\
    \        return 0;\n    if (n < 2)\n        return 0;\n    if (n == 2)\n     \
    \   return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "{\n \
    \   if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if\
    \ (n == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n        long a\
    \ = 0;\n        long b = 1;\n        long c = 1;\n        long d = 0;\n      \
    \  while (n > 3)\n        {\n            d = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = d;\n            n--;\n        }\n       \
    \ return d;\n    }\n}", "{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n\
    \        return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}", "{\n\
    \    if (n < 3) \n        return n - 1;\n    else \n    {\n        long a = 0,\
    \ b = 1, c = 1;\n        for (long i = 3; i <= n; i++) \n        {\n         \
    \   long d = a + b + c;\n            a = b;\n            b = c;\n            c\
    \ = d;\n        }\n        return c;\n    }\n}", "{\n    if (n < 3)\n        return\
    \ n - 1;\n    long a = 0, b = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n    \
    \    long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n   \
    \ }\n    return c;\n}", "{\n    if (n == 0L)\n        return 0L;\n    if (n ==\
    \ 1L)\n        return 0L;\n    if (n == 2L)\n        return 1L;\n    return fibfib(n\
    \ - 1L) + fibfib(n - 2L) + fibfib(n - 3L);\n}", "{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 1;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = 0;\n    for (long i = 3; i <= n; i++)\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}", "{\n    if (n < 2) return 0;\n    if (n == 2) return\
    \ 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n   \
    \ while (n > 2) {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        n--;\n    }\n    return d;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
