name: HumanEval_34_unique
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
  \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
  \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n"
tests: "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L,\
  \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
completions: ["{\n    long[] ret = new long[l.length];\n    long[] ret_uniq = new\
    \ long[l.length];\n    long[] ret_uniq_sorted = new long[l.length];\n    long[]\
    \ ret_uniq_sorted_unique = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique = new\
    \ long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted = new\
    \ long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\
    \ = new long[l.length];\n    long[] ret_uniq_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_",
  "{\n    long[] res = new long[];\n    foreach(long i; l)\n    {\n        if(i in\
    \ res)\n            continue;\n        res ~= i;\n    }\n    return res;\n}",
  "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n\
    \            continue;\n        ret ~= e;\n    }\n    ret.sort;\n    return ret;\n\
    }", "{\n    long[] ret = new long[];\n    foreach(long i; l)\n    {\n        if(ret.length\
    \ == 0)\n        {\n            ret ~= i;\n        }\n        else\n        {\n\
    \            if(ret[$-1] != i)\n            {\n                ret ~= i;\n   \
    \         }\n        }\n    }\n    return ret;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret\
    \ = new long[];\n    foreach(long i; l)\n    {\n        if(ret.length == 0)\n\
    \        {\n            ret ~= i;\n        }\n        else\n        {\n      \
    \      if(ret[$-1] != i)\n            {\n                ret ~= i;\n         \
    \   }\n        }\n    }\n    return ret;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret\
    \ = new long[];\n    foreach(long i; l)\n    {\n        if(ret.length == 0)\n\
    \        {\n            ret ~= i;\n        }\n        else\n        {\n      \
    \      if(ret[$-1] != i)\n            {\n                ret ~= i;\n         \
    \   }\n        }\n    }\n    return ret;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{", "{\n    long[]\
    \ result = new long[];\n    foreach(e; l) \n    {\n        if(!e in result) \n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(!elem(result,\
    \ e))\n        {\n            result ~= e;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l) \n    {\n        if(!e\
    \ in result) \n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort();\n}", "{\n    long[] result = new long[];\n    foreach(long i;\
    \ l)\n    {\n        if(result.length == 0 || result[$-1] != i)\n            result\
    \ ~= i;\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in result)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n    long[] ret =\
    \ new long[];\n    foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n \
    \           ret ~= lval;\n    }\n    ret.sort;\n    return ret;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l,\
    \ alias less) \n{\n    long[] ret = new long[];\n    foreach(lval; l)\n    {\n\
    \        if(!ret.canFind(lval))\n            ret ~= lval;\n    }\n    ret.sort(less);\n\
    \    return ret;\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, alias less, alias equal) \n{\n    long[] ret = new long[];\n\
    \    foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n            ret\
    \ ~= lval;\n    }\n    ret.sort(less, equal);\n    return ret;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l,\
    \ alias less, alias equal, alias hash) \n{\n    long[] ret = new long[];\n   \
    \ foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n            ret ~=\
    \ lval;\n    }\n    ret.sort(less, equal, hash);\n    return ret;\n}\n/*\n", "{\n\
    \    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[]\
    \ tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n\
    \    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n \
    \   long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n \
    \   long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n \
    \   long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n \
    \   long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n \
    \   long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n \
    \   long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n \
    \   long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n \
    \   long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n \
    \   long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n \
    \   long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n \
    \   long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n \
    \   long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n \
    \   long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n \
    \   long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n \
    \   long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n\
    \            continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[l.length];\n    size_t i = 0;\n    foreach(long\
    \ x; l)\n    {\n        if(i == 0 || x != result[i-1])\n        {\n          \
    \  result[i] = x;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e\
    \ !in result)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort;\n}", "{\n    long[] r;\n    long[] u;\n    long[] s;\n    long[]\
    \ t;\n    long[] v;\n    long[] w;\n    long[] x;\n    long[] y;\n    long[] z;\n\
    \    long[] aa;\n    long[] ab;\n    long[] ac;\n    long[] ad;\n    long[] ae;\n\
    \    long[] af;\n    long[] ag;\n    long[] ah;\n    long[] ai;\n    long[] aj;\n\
    \    long[] ak;\n    long[] al;\n    long[] am;\n    long[] an;\n    long[] ao;\n\
    \    long[] ap;\n    long[] aq;\n    long[] ar;\n    long[] as;\n    long[] at;\n\
    \    long[] au;\n    long[] av;\n    long[] aw;\n    long[] ax;\n    long[] ay;\n\
    \    long[] az;\n    long[] ba;\n    long[] bb;\n    long[] bc;\n    long[] bd;\n\
    \    long[] be;\n    long[] bf;\n    long[] bg;\n    long[] bh;\n    long[] bi;\n\
    \    long[] bj;\n    long[] bk;\n    long[] bl;\n    long[] bm;\n    long[] bn;\n\
    \    long[] bo;\n    long[] bp;\n    long[] bq;\n    long[] br;\n    long[] bs;\n\
    \    long[] bt;\n    long[] bu;\n    long[] bv;\n    long[] bw;\n    long[] bx;\n\
    \    long[] by;\n    long[] bz;\n    long[] ca;\n    long[] cb;\n    long[] cc;\n\
    \    long[] cd;\n    long[] ce;\n    long[] cf;\n    long[] cg;\n    long[] ch;\n\
    \    long[] ci;\n    long[] cj;\n    long[] ck;\n    long[] cl;\n    long[] cm;\n\
    \    long[] cn;\n    long[] co;\n    long[] cp;\n    long[] cq;\n    long[] cr;\n\
    \    long[] cs;", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n\
    \    int count = 1;\n    for (int i = 1; i < l.length; i++)\n    {\n        if\
    \ (l[i] != l[i-1])\n        {\n            ret[count] = l[i];\n            count++;\n\
    \        }\n    }\n    return ret[0..count];\n}", "{\n    long[] res = new long[0];\n\
    \    foreach(e; l)\n    {\n        if(!e in res)\n            res ~= e;\n    }\n\
    \    return res.sort;\n}", "{\n    long[] ret = new long[];\n    foreach(e; l)\n\
    \    {\n        if(e in ret)\n            continue;\n        ret ~= e;\n    }\n\
    \    return ret;\n}", "{\n    long[] result;\n    foreach(e; l)\n    {\n     \
    \   if(!e in result)\n            result ~= e;\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] result = new\
    \ long[];\n    foreach(e; l)\n    {\n        if(e in result)\n            continue;\n\
    \        result ~= e;\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n           \
    \ continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n    long[]\
    \ ret;\n    long[] tmp;\n    long[] tmp2;\n    ret = [];\n    tmp = [];\n    tmp2\
    \ = [];\n    foreach(long i; l)\n    {\n        if(!(i in tmp))\n        {\n \
    \           tmp ~= i;\n        }\n    }\n    foreach(long i; tmp)\n    {\n   \
    \     tmp2 ~= i;\n    }\n    tmp2.sort();\n    foreach(long i; tmp2)\n    {\n\
    \        ret ~= i;\n    }\n    return ret;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret;\n\
    \    long[] tmp;\n    long[] tmp2;\n    ret = [];\n    tmp = [];\n    tmp2 = [];\n\
    \    foreach(long i; l)\n    {\n        if(!(i in tmp))\n        {\n         \
    \   tmp ~= i;\n        }\n    }\n    foreach(long i; tmp)\n    {\n        tmp2\
    \ ~= i;\n    }\n    tmp2.sort();\n    foreach(long i; tmp2)\n    {\n        ret\
    \ ~= i;\n    }\n    return ret;\n}\n/*\nReturn sorted unique elements in a list\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret;\n    long[]\
    \ tmp;\n    long[] tmp2;\n    ret = [];\n    tmp = [];\n    tmp2 = [];\n    foreach(long\
    \ i; l)\n    {\n        if(!(i in tmp))\n        {\n            tmp ~= i;\n  \
    \      }\n    }\n    foreach(long", "{\n    long[] ret;\n    foreach(e; l)\n \
    \   {\n        if(e !in ret)\n            ret ~= e;\n    }\n    return ret;\n}",
  "{\n    long[] ret = new long[];\n    foreach(long x; l)\n    {\n        if(ret.length\
    \ == 0 || ret[$-1] != x)\n            ret ~= x;\n    }\n    return ret;\n}", "{\n\
    \    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e !in result)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort;\n\
    }", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(!e\
    \ in ret)\n            ret ~= e;\n    }\n    ret.sort;\n    return ret;\n}", "{\n\
    \    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[]\
    \ tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n\
    \    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n \
    \   long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n \
    \   long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n \
    \   long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n \
    \   long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n \
    \   long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n \
    \   long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n \
    \   long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n \
    \   long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n \
    \   long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n \
    \   long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n \
    \   long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n \
    \   long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n \
    \   long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n \
    \   long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n \
    \   long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n\
    \            continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n\
    \    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[]\
    \ tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n\
    \    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n \
    \   long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n \
    \   long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n \
    \   long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n \
    \   long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n \
    \   long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n \
    \   long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n \
    \   long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n \
    \   long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n \
    \   long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n \
    \   long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n \
    \   long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n \
    \   long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n \
    \   long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n \
    \   long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n \
    \   long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] ret = new long[];\n    foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n\
    \            ret ~= lval;\n    }\n    return ret;\n}", "{\n    long[] res = new\
    \ long[l.length];\n    int i = 0;\n    foreach(long e; l)\n    {\n        if (e\
    \ in res)\n            continue;\n        res[i++] = e;\n    }\n    return res[0..i];\n\
    }", "{\n    long[] r;\n    foreach(e; l)\n    {\n        if(e in r)\n        \
    \    continue;\n        r ~= e;\n    }\n    return r;\n}", "{\n    long[] ret\
    \ = new long[0];\n    foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n\
    \        {\n            ret ~= lval;\n        }\n    }\n    return ret.sort();\n\
    }", "{\n    long[] result = [];\n    foreach(l_i; l) \n    {\n        if(!result.canFind(l_i))\
    \ \n        {\n            result ~= l_i;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] result = new long[];\n    foreach(long i; l)\n    {\n     \
    \   if(!result.canFind(i))\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(!result.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort();\n}", "{\n    long[] ret = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(!e in ret)\n            ret ~= e;\n    }\n    ret.sort;\n\
    \    return ret;\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[]\
    \ result = new long[];\n    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n         \
    \   continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(e; l)\n    {\n        if(!e in result)\n \
    \       {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }\n/*\nReturn sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] ret = new\
    \ long[l.length];\n    long[] tmp = new long[l.length];\n    long[] tmp2 = new\
    \ long[l.length];\n    long[] tmp3 = new long[l.length];\n    long[] tmp4 = new\
    \ long[l.length];\n    long[] tmp5 = new long[l.length];\n    long[] tmp6 = new\
    \ long[l.length];\n    long[] tmp7 = new long[l.length];\n    long[] tmp8 = new\
    \ long[l.length];\n    long[] tmp9 = new long[l.length];\n    long[] tmp10 = new\
    \ long[l.length];\n    long[] tmp11 = new long[l.length];\n    long[] tmp12 =\
    \ new long[l.length];\n    long[] tmp13 = new long[l.length];\n    long[] tmp14\
    \ = new long[l.length];\n    long[] tmp15 = new long[l.length];\n    long[] tmp16\
    \ = new long[l.length];\n    long[] tmp17 = new long[l.length];\n    long[] tmp18\
    \ = new long[l.length];\n    long[] tmp19 = new long[l.length];\n    long[] tmp20\
    \ = new long[l.length];\n    long[] tmp21 = new long[l.length];\n    long[] tmp22\
    \ = new long[l.length];\n    long[] tmp23 = new long[l.length];\n    long[] tmp24\
    \ = new long[l.length];\n    long[] tmp25 = new long[l.length];\n    long[] tmp26\
    \ = new long[l.length];\n    long[] tmp27 = new long[l.length];\n    long[] tmp28\
    \ = new long[l.length];\n    long[] tmp29 = new long[l.length];\n    long[] tmp30\
    \ = new long[l.length];\n    long[] tmp31 = new long[l.length];\n    long[] tmp32\
    \ = new long[l.length];\n    long[] tmp33 = new long[l.length];\n    long[] tmp34\
    \ = new long[l.length];\n    long[] tmp35 = new long[l.length];\n    long[] tmp36\
    \ = new", "{\n    long[] r;\n    long[] tmp;\n    int i;\n    int j;\n    int\
    \ k;\n    int n;\n    int m;\n    int p;\n    int q;\n    int s;\n    int t;\n\
    \    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int\
    \ aa;\n    int ab;\n    int ac;\n    int ad;\n    int ae;\n    int af;\n    int\
    \ ag;\n    int ah;\n    int ai;\n    int aj;\n    int ak;\n    int al;\n    int\
    \ am;\n    int an;\n    int ao;\n    int ap;\n    int aq;\n    int ar;\n    int\
    \ as;\n    int at;\n    int au;\n    int av;\n    int aw;\n    int ax;\n    int\
    \ ay;\n    int az;\n    int ba;\n    int bb;\n    int bc;\n    int bd;\n    int\
    \ be;\n    int bf;\n    int bg;\n    int bh;\n    int bi;\n    int bj;\n    int\
    \ bk;\n    int bl;\n    int bm;\n    int bn;\n    int bo;\n    int bp;\n    int\
    \ bq;\n    int br;\n    int bs;\n    int bt;\n    int bu;\n    int bv;\n    int\
    \ bw;\n    int bx;\n    int by;\n    int bz;\n    int ca;\n    int cb;\n    int\
    \ cc;\n    int cd;\n    int ce;\n    int cf;\n    int cg;\n    int ch;\n    int\
    \ ci;\n    int cj;\n    int ck;\n    int cl;\n    int cm;\n    int cn;\n    int\
    \ co;\n    int cp;\n    int cq;\n    int cr;\n    int cs;\n    int ct;\n    int\
    \ cu;\n    int cv;\n    int cw;\n    int cx;\n    int cy;\n    int cz;", "{\n\
    \    long[] r;\n    long[] s;\n    long[] t;\n    long[] u;\n    long[] v;\n \
    \   long[] w;\n    long[] x;\n    long[] y;\n    long[] z;\n    long[] aa;\n \
    \   long[] bb;\n    long[] cc;\n    long[] dd;\n    long[] ee;\n    long[] ff;\n\
    \    long[] gg;\n    long[] hh;\n    long[] ii;\n    long[] jj;\n    long[] kk;\n\
    \    long[] ll;\n    long[] mm;\n    long[] nn;\n    long[] oo;\n    long[] pp;\n\
    \    long[] qq;\n    long[] rr;\n    long[] ss;\n    long[] tt;\n    long[] uu;\n\
    \    long[] vv;\n    long[] ww;\n    long[] xx;\n    long[] yy;\n    long[] zz;\n\
    \    long[] aaa;\n    long[] bbb;\n    long[] ccc;\n    long[] ddd;\n    long[]\
    \ eee;\n    long[] fff;\n    long[] ggg;\n    long[] hhh;\n    long[] iii;\n \
    \   long[] jjj;\n    long[] kkk;\n    long[] lll;\n    long[] mmm;\n    long[]\
    \ nnn;\n    long[] ooo;\n    long[] ppp;\n    long[] qqq;\n    long[] rrr;\n \
    \   long[] sss;\n    long[] ttt;\n    long[] uuu;\n    long[] vvv;\n    long[]\
    \ www;\n    long[] xxx;\n    long[] yyy;\n    long[] zzz;\n    long[] aaaa;\n\
    \    long[] bbbb;\n    long[] cccc;\n    long[] dddd;\n    long[] eeee;\n    long[]\
    \ ffff;\n    long[] gggg;\n    long[] hhhh;\n    long[] iiii;\n    long[] jjjj;\n\
    \    long[] kkkk;\n    long[] llll;\n    long[] mmmm;\n    long[] n", "{\n   \
    \ long[] result = new long[];\n    foreach(l_; l)\n    {\n        if(!result.canFind(l_))\n\
    \        {\n            result ~= l_;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] res = new long[l.length];\n    int j = 0;\n    foreach(i; l)\n  \
    \  {\n        if(!res.canFind(i))\n        {\n            res[j] = i;\n      \
    \      j++;\n        }\n    }\n    return res[0..j];\n}", "{\n    long[] res =\
    \ new long[];\n    foreach(e; l)\n    {\n        if(!e in res)\n            res\
    \ ~= e;\n    }\n    return res.sort;\n}", "{\n    long[] res = new long[];\n \
    \   foreach(e; l)\n    {\n        if(e in res)\n            continue;\n      \
    \  res ~= e;\n    }\n    return res;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n        {\n  \
    \          result ~= i;\n        }\n    }\n    return result.sort();\n}\n/*\n\
    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] res = new long[0];\n\
    \    foreach(e; l)\n    {\n        if(e in res)\n            continue;\n     \
    \   res ~= e;\n    }\n    return res;\n}", "{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(e; l)\n    {\n        if(i == 0 || e != res[i-1])\n\
    \        {\n            res[i] = e;\n            i++;\n        }\n    }\n    return\
    \ res[0..i];\n}", "{\n    return sort(uniq(l));\n}", "{\n    long[] ret;\n   \
    \ long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[]\
    \ tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n\
    \    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n\
    \    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n\
    \    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n\
    \    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n\
    \    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n\
    \    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n\
    \    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n\
    \    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n\
    \    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n\
    \    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n\
    \    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n\
    \    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n\
    \    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n\
    \    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n\
    \    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n\
    \    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n", "{\n    long[] ret;\n\
    \    foreach(e; l)\n    {\n        if(e in ret)\n            continue;\n     \
    \   ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[0];\n\
    \    foreach(x; l)\n    {\n        if(!(x in ret))\n        {\n            ret\
    \ ~= x;\n        }\n    }\n    return ret;\n}", "{\n    long[] result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in result)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n    long[] r = new\
    \ long[];\n    foreach(e; l)\n    {\n        if(!e in r)\n            r ~= e;\n\
    \    }\n    return r;\n}", "{\n    long[] ret = new long[l.length];\n    ret[0]\
    \ = l[0];\n    int count = 1;\n    foreach(i; 1..l.length)\n    {\n        if(l[i]\
    \ != l[i-1])\n        {\n            ret[count] = l[i];\n            count++;\n\
    \        }\n    }\n    return ret[0..count];\n}", "{\n    long[] result = new\
    \ long[];\n    foreach(i; l)\n    {\n        if(!result.canFind(i))\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result.sort();\n}", "{\n\
    \    long[] res = new long[];\n    foreach(e; l)\n    {\n        if(!e in res)\n\
    \            res ~= e;\n    }\n    return res;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] res\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(!e in res)\n           \
    \ res ~= e;\n    }\n    return res;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L,\
    \ 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] res = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in res)\n            res ~= e;\n    }\n\
    \    return res;\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    long[] res = new long[];\n    foreach(e; l)\n\
    \    {\n        if(!e in res)\n            res ~= e;\n    }\n    return res;\n\
    }\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l) \n{\n   ", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n \
    \       if(!e in ret)\n            ret ~= e;\n    }\n    return ret;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(result.length\
    \ == 0)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            if(result[$-1] != i)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(e; l)\n    {\n        if(!e in ret)\n       \
    \     ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in ret)\n            ret ~= e;\n    }\n\
    \    ret.sort;\n    return ret;\n}", "{\n    long[] result = new long[];\n   \
    \ foreach(e; l)\n    {\n        if(e in result)\n            continue;\n     \
    \   result ~= e;\n    }\n    return result;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e !in ret)\n            ret ~= e;\n    }\n\
    \    ret.sort;\n    return ret;\n}", "{\n    long[] ret;\n    foreach(e; l)\n\
    \    {\n        if(e in ret)\n            continue;\n        ret ~= e;\n    }\n\
    \    return ret;\n}", "{\n    long[] ret = new long[l.length];\n    long[] tmp\
    \ = new long[l.length];\n    long[] tmp2 = new long[l.length];\n    long[] tmp3\
    \ = new long[l.length];\n    long[] tmp4 = new long[l.length];\n    long[] tmp5\
    \ = new long[l.length];\n    long[] tmp6 = new long[l.length];\n    long[] tmp7\
    \ = new long[l.length];\n    long[] tmp8 = new long[l.length];\n    long[] tmp9\
    \ = new long[l.length];\n    long[] tmp10 = new long[l.length];\n    long[] tmp11\
    \ = new long[l.length];\n    long[] tmp12 = new long[l.length];\n    long[] tmp13\
    \ = new long[l.length];\n    long[] tmp14 = new long[l.length];\n    long[] tmp15\
    \ = new long[l.length];\n    long[] tmp16 = new long[l.length];\n    long[] tmp17\
    \ = new long[l.length];\n    long[] tmp18 = new long[l.length];\n    long[] tmp19\
    \ = new long[l.length];\n    long[] tmp20 = new long[l.length];\n    long[] tmp21\
    \ = new long[l.length];\n    long[] tmp22 = new long[l.length];\n    long[] tmp23\
    \ = new long[l.length];\n    long[] tmp24 = new long[l.length];\n    long[] tmp25\
    \ = new long[l.length];\n    long[] tmp26 = new long[l.length];\n    long[] tmp27\
    \ = new long[l.length];\n    long[] tmp28 = new long[l.length];\n    long[] tmp29\
    \ = new long[l.length];\n    long[] tmp30 = new long[l.length];\n    long[] tmp31\
    \ = new long[l.length];\n    long[] tmp32 = new long[l.length];\n    long[] tmp33\
    \ = new long[l.length];\n    long[] tmp34 = new long[l.length];\n    long[] tmp35\
    \ = new long[l.length];\n    long[] tmp36 = new", "{\n    long[] res = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in res)\n            res ~= e;\n    }\n\
    \    return res.sort();\n}", "{\n    long[] ret = new long[l.length];\n    ret\
    \ = l.dup;\n    ret.sort;\n    ret = ret.uniq;\n    return ret;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(e; l)\n    {\n        if (e !in result)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result;\n}",
  "{\n    long[] res = new long[];\n    foreach(e; l)\n    {\n        if(!e in res)\n\
    \            res ~= e;\n    }\n    return res;\n}", "{\n    long[] ret;\n    long[]\
    \ tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[] tmp5;\n\
    \    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n    long[]\
    \ tmp10;\n    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n    long[]\
    \ tmp14;\n    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n    long[]\
    \ tmp18;\n    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n    long[]\
    \ tmp22;\n    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n    long[]\
    \ tmp26;\n    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n    long[]\
    \ tmp30;\n    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n    long[]\
    \ tmp34;\n    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n    long[]\
    \ tmp38;\n    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n    long[]\
    \ tmp42;\n    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n    long[]\
    \ tmp46;\n    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n    long[]\
    \ tmp50;\n    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n    long[]\
    \ tmp54;\n    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n    long[]\
    \ tmp58;\n    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n    long[]\
    \ tmp62;\n    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n    long[]\
    \ tmp66;\n    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n    long[]\
    \ tmp70;\n    long[] tmp71;\n    long[] tmp72;\n", "{\n    long[] ret = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e in ret)\n            continue;\n     \
    \   ret ~= e;\n    }\n    ret.sort;\n    return ret;\n}", "{\n    long[] ret =\
    \ new long[l.length];\n    long[] tmp = new long[l.length];\n    long[] tmp2 =\
    \ new long[l.length];\n    long[] tmp3 = new long[l.length];\n    long[] tmp4\
    \ = new long[l.length];\n    long[] tmp5 = new long[l.length];\n    long[] tmp6\
    \ = new long[l.length];\n    long[] tmp7 = new long[l.length];\n    long[] tmp8\
    \ = new long[l.length];\n    long[] tmp9 = new long[l.length];\n    long[] tmp10\
    \ = new long[l.length];\n    long[] tmp11 = new long[l.length];\n    long[] tmp12\
    \ = new long[l.length];\n    long[] tmp13 = new long[l.length];\n    long[] tmp14\
    \ = new long[l.length];\n    long[] tmp15 = new long[l.length];\n    long[] tmp16\
    \ = new long[l.length];\n    long[] tmp17 = new long[l.length];\n    long[] tmp18\
    \ = new long[l.length];\n    long[] tmp19 = new long[l.length];\n    long[] tmp20\
    \ = new long[l.length];\n    long[] tmp21 = new long[l.length];\n    long[] tmp22\
    \ = new long[l.length];\n    long[] tmp23 = new long[l.length];\n    long[] tmp24\
    \ = new long[l.length];\n    long[] tmp25 = new long[l.length];\n    long[] tmp26\
    \ = new long[l.length];\n    long[] tmp27 = new long[l.length];\n    long[] tmp28\
    \ = new long[l.length];\n    long[] tmp29 = new long[l.length];\n    long[] tmp30\
    \ = new long[l.length];\n    long[] tmp31 = new long[l.length];\n    long[] tmp32\
    \ = new long[l.length];\n    long[] tmp33 = new long[l.length];\n    long[] tmp34\
    \ = new long[l.length];\n    long[] tmp35 = new long[l.length];\n    long[] tmp36\
    \ = new", "{\n    long[] r = new long[];\n    foreach(i; l)\n    {\n        if(!r.canFind(i))\n\
    \            r ~= i;\n    }\n    return r;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(result.length == 0)\n        {\n  \
    \          result ~= i;\n        }\n        else\n        {\n            if(result[$-1]\
    \ != i)\n            {\n                result ~= i;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] ret = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(e in ret)\n            continue;\n        ret ~= e;\n\
    \    }\n    ret.sort;\n    return ret;\n}", "{\n    long[] ret;\n    foreach(e;\
    \ l)\n    {\n        if(!e in ret)\n            ret ~= e;\n    }\n    return ret;\n\
    }", "{\n    long[] ret = new long[];\n    foreach(e; l) \n    {\n        if(!e\
    \ in ret) \n        {\n            ret ~= e;\n        }\n    }\n    return ret;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(e; l)\n    {\n        if(!elem(result,\
    \ e))\n        {\n            result ~= e;\n        }\n    }\n    return sort(result);\n\
    }", "{\n    return std.algorithm.sort(std.algorithm.uniq(l));\n}\n/*\nReturn sorted\
    \ unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    return\
    \ std.algorithm.sort(std.algorithm.uniq(l));\n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    return std.algorithm.sort(std.algorithm.uniq(l));\n\
    }\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l) \n{\n    return std.algorithm.sort(std.algorithm.uniq(l));\n}\n/*\nReturn\
    \ sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l)\
    \ \n{\n    return std.algorithm.sort(std.algorithm.uniq(l));\n}\n/*\nReturn sorted\
    \ unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    return\
    \ std.", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n\
    \        if(!result.canFind(i))\n        {\n            result ~= i;\n       \
    \ }\n    }\n    return result.sort();\n}\n/*\nReturn sorted unique elements in\
    \ a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\
    \    \n*/", "{\n    long[] ret;\n    foreach(e; l)\n    {\n        if(!e in ret)\n\
    \            ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(l_i; l)\n    {\n        if(!ret.canFind(l_i))\n            ret ~=\
    \ l_i;\n    }\n    return ret;\n}", "{\n    long[] result = new long[];\n    foreach(long\
    \ i; l)\n    {\n        if(result.length == 0 || result[$-1] != i)\n         \
    \   result ~= i;\n    }\n    return result;\n}", "{\n    auto result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in result)\n            result ~= e;\n\
    \    }\n    return result;\n}", "{\n    long[] ret = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(e !in ret)\n            ret ~= e;\n    }\n    return ret;\n\
    }", "{\n    long[] ret = [];\n    foreach(e; l)\n    {\n        if(e in ret)\n\
    \            continue;\n        ret ~= e;\n    }\n    return ret;\n}", "{\n  \
    \  long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n\
    \            continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n\
    \    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n\
    \            continue;\n        ret ~= e;\n    }\n    return ret;\n}", "{\n  \
    \  long[] ret;\n    long[] tmp;\n    foreach(e; l)\n    {\n        if(!e in ret)\n\
    \        {\n            ret ~= e;\n        }\n    }\n    return ret;\n}", "{\n\
    \    long[] r = new long[l.length];\n    int i = 0;\n    foreach(long e; l)\n\
    \    {\n        if(i == 0 || e != r[i-1])\n        {\n            r[i] = e;\n\
    \            i++;\n        }\n    }\n    return r[0..i];\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(e !in result)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort;\n}", "{\n\
    \    long[] ret = new long[0];\n    foreach(long x; l)\n    {\n        if(x in\
    \ ret)\n            continue;\n        ret ~= x;\n    }\n    return ret;\n}",
  "{\n    long[] ret = new long[];\n    foreach(long x; l)\n    {\n        if(x in\
    \ ret) continue;\n        ret ~= x;\n    }\n    return ret;\n}", "{\n    long[]\
    \ r;\n    foreach(e; l)\n    {\n        if(!e in r)\n            r ~= e;\n   \
    \ }\n    return r;\n}", "{\n    long[] res = new long[l.length];\n    int j =\
    \ 0;\n    foreach(long i; l) {\n        if(j == 0 || res[j-1] != i) {\n      \
    \      res[j] = i;\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e in\
    \ ret)\n            continue;\n        ret ~= e;\n    }\n    ret.sort;\n    return\
    \ ret;\n}", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n     \
    \   if(!e in ret)\n            ret ~= e;\n    }\n    return ret;\n}", "{\n   \
    \ long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n\
    \            continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n\
    \    long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n\
    \    long[] tmp2 = new long[l.length];\n    long[] tmp3 = new long[l.length];\n\
    \    long[] tmp4 = new long[l.length];\n    long[] tmp5 = new long[l.length];\n\
    \    long[] tmp6 = new long[l.length];\n    long[] tmp7 = new long[l.length];\n\
    \    long[] tmp8 = new long[l.length];\n    long[] tmp9 = new long[l.length];\n\
    \    long[] tmp10 = new long[l.length];\n    long[] tmp11 = new long[l.length];\n\
    \    long[] tmp12 = new long[l.length];\n    long[] tmp13 = new long[l.length];\n\
    \    long[] tmp14 = new long[l.length];\n    long[] tmp15 = new long[l.length];\n\
    \    long[] tmp16 = new long[l.length];\n    long[] tmp17 = new long[l.length];\n\
    \    long[] tmp18 = new long[l.length];\n    long[] tmp19 = new long[l.length];\n\
    \    long[] tmp20 = new long[l.length];\n    long[] tmp21 = new long[l.length];\n\
    \    long[] tmp22 = new long[l.length];\n    long[] tmp23 = new long[l.length];\n\
    \    long[] tmp24 = new long[l.length];\n    long[] tmp25 = new long[l.length];\n\
    \    long[] tmp26 = new long[l.length];\n    long[] tmp27 = new long[l.length];\n\
    \    long[] tmp28 = new long[l.length];\n    long[] tmp29 = new long[l.length];\n\
    \    long[] tmp30 = new long[l.length];\n    long[] tmp31 = new long[l.length];\n\
    \    long[] tmp32 = new long[l.length];\n    long[] tmp33 = new long[l.length];\n\
    \    long[] tmp34 = new long[l.length];\n    long[] tmp35 = new long[l.length];\n\
    \    long[] tmp36 = new", "{\n    long[] ret = new long[];\n    foreach(e; l)\n\
    \    {\n        if(e !in ret)\n            ret ~= e;\n    }\n    return ret;\n\
    }", "{\n    long[] r = new long[];\n    foreach(e; l)\n    {\n        if(e in\
    \ r)\n            continue;\n        r ~= e;\n    }\n    return r;\n}", "{\n \
    \   long[] result = new long[0];\n    foreach(x; l) \n    {\n        if (x in\
    \ result) \n        {\n            continue;\n        }\n        result ~= x;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[];\n    foreach(l;\
    \ l)\n    {\n        if(!result.contains(l))\n        {\n            result ~=\
    \ l;\n        }\n    }\n    return result;\n}", "{\n    long[] res = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e in res)\n            continue;\n     \
    \   res ~= e;\n    }\n    res.sort;\n    return res;\n}", "{\n    long[] res =\
    \ new long[l.length];\n    int i = 0;\n    foreach(e; l)\n    {\n        if(i\
    \ == 0 || e != res[i-1])\n        {\n            res[i] = e;\n            i++;\n\
    \        }\n    }\n    return res[0..i];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    long[] tmp = new long[l.length];\n    long[] tmp2 = new long[l.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l2 = 0;\n    int l3 =\
    \ 0;\n    int l4 = 0;\n    int l5 = 0;\n    int l6 = 0;\n    int l7 = 0;\n   \
    \ int l8 = 0;\n    int l9 = 0;\n    int l10 = 0;\n    int l11 = 0;\n    int l12\
    \ = 0;\n    int l13 = 0;\n    int l14 = 0;\n    int l15 = 0;\n    int l16 = 0;\n\
    \    int l17 = 0;\n    int l18 = 0;\n    int l19 = 0;\n    int l20 = 0;\n    int\
    \ l21 = 0;\n    int l22 = 0;\n    int l23 = 0;\n    int l24 = 0;\n    int l25\
    \ = 0;\n    int l26 = 0;\n    int l27 = 0;\n    int l28 = 0;\n    int l29 = 0;\n\
    \    int l30 = 0;\n    int l31 = 0;\n    int l32 = 0;\n    int l33 = 0;\n    int\
    \ l34 = 0;\n    int l35 = 0;\n    int l36 = 0;\n    int l37 = 0;\n    int l38\
    \ = 0;\n    int l39 = 0;\n    int l40 = 0;\n    int l41 = 0;\n    int l42 = 0;\n\
    \    int l43 = 0;\n    int l44 = 0;\n    int l45 = 0;\n    int l46 = 0;\n    int\
    \ l47 = 0;\n    int l48 = 0;\n    int l49 = 0;\n    int l50 = 0;\n    int l51\
    \ = 0;\n    int l52 = 0;\n    int l53 = 0;\n    int l54 = 0;\n    int l55 = 0;\n\
    \    int l56 = 0;\n    int l57 = 0;\n", "{\n    long[] result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in result)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n    long[] result\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(!e\
    \ in ret)\n            ret ~= e;\n    }\n    return ret;\n}", "{\n    auto s =\
    \ set!long();\n    foreach(e; l)\n        s.insert(e);\n    return s.array();\n\
    }", "{\n    long[] ret = new long[0];\n    foreach(e; l)\n    {\n        if(e\
    \ !in ret)\n            ret ~= e;\n    }\n    ret.sort;\n    return ret;\n}",
  "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e !in ret)\n\
    \            ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] r = new long[l.length];\n\
    \    int n = 0;\n    foreach(i; l)\n    {\n        if(n == 0 || r[n-1] != i)\n\
    \        {\n            r[n] = i;\n            n++;\n        }\n    }\n    return\
    \ r[0..n];\n}", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[]\
    \ tmp3;\n    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n\
    \    long[] tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n  \
    \  long[] tmp12;\n    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n  \
    \  long[] tmp16;\n    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n  \
    \  long[] tmp20;\n    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n  \
    \  long[] tmp24;\n    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n  \
    \  long[] tmp28;\n    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n  \
    \  long[] tmp32;\n    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n  \
    \  long[] tmp36;\n    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n  \
    \  long[] tmp40;\n    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n  \
    \  long[] tmp44;\n    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n  \
    \  long[] tmp48;\n    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n  \
    \  long[] tmp52;\n    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n  \
    \  long[] tmp56;\n    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n  \
    \  long[] tmp60;\n    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n  \
    \  long[] tmp64;\n    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n  \
    \  long[] tmp68;\n    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n  \
    \  long[] tmp72;\n", "{\n    long[] result = new long[];\n    foreach(e; l)\n\
    \    {\n        if(e in result)\n            continue;\n        result ~= e;\n\
    \    }\n    return result;\n}", "{\n    return sort(uniq(l));\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n        \
    \    continue;\n        ret ~= e;\n    }\n    return ret;\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(long i; l)\n    {\n        if(ret.length == 0\
    \ || ret[$-1] != i)\n            ret ~= i;\n    }\n    return ret;\n}", "{\n \
    \   long[] ret;\n    ret.length = l.length;\n    size_t i = 0;\n    foreach(e;\
    \ l)\n    {\n        if(!ret.contains(e))\n        {\n            ret[i] = e;\n\
    \            i++;\n        }\n    }\n    ret.length = i;\n    return ret;\n}",
  "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[]\
    \ tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n\
    \    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n \
    \   long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n \
    \   long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n \
    \   long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n \
    \   long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n \
    \   long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n \
    \   long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n \
    \   long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n \
    \   long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n \
    \   long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n \
    \   long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n \
    \   long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n \
    \   long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n \
    \   long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n \
    \   long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n \
    \   long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] ret = new long[];\n    foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n\
    \            ret ~= lval;\n    }\n    return ret;\n}", "{\n    long[] ret = new\
    \ long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n        if(!ret.canFind(x))\n\
    \        {\n            ret[i] = x;\n            i++;\n        }\n    }\n    return\
    \ ret[0..i];\n}", "{\n    long[] ret = new long[0];\n    foreach(e; l) {\n   \
    \     if(e !in ret) {\n            ret ~= e;\n        }\n    }\n    ret.sort;\n\
    \    return ret;\n}", "{\n    long[] ret = new long[0];\n    foreach(e; l)\n \
    \   {\n        if(e in ret)\n            continue;\n        ret ~= e;\n    }\n\
    \    ret.sort;\n    return ret;\n}", "{\n    long[] result = new long[0];\n  \
    \  foreach(long i; l)\n    {\n        if(!result.canFind(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result.sort();\n}", "{\n \
    \   long[] result = new long[];\n    foreach(long x; l)\n    {\n        if(result.length\
    \ == 0 || x != result[$-1])\n            result ~= x;\n    }\n    return result;\n\
    }", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(!e\
    \ in ret)\n            ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret\
    \ = new long[0];\n    foreach(i; l)\n    {\n        if(!ret.canFind(i))\n    \
    \        ret ~= i;\n    }\n    return ret;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n        {\n  \
    \          result ~= i;\n        }\n    }\n    return result.sort();\n}", "{\n\
    \    long[] res = new long[];\n    foreach(e; l)\n    {\n        if(e in res)\n\
    \            continue;\n        res ~= e;\n    }\n    return res;\n}", "{\n  \
    \  long[] r = [];\n    foreach(e; l) \n    {\n        if(!e in r) \n        {\n\
    \            r ~= e;\n        }\n    }\n    return r;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(!e in result)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n\
    \    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(!e in ret)\n\
    \            ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(l_; l)\n    {\n        if(!ret.canFind(l_))\n            ret ~= l_;\n\
    \    }\n    ret.sort;\n    return ret;\n}", "{\n    long[] ret;\n    long[] tmp;\n\
    \    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[] tmp5;\n    long[]\
    \ tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n    long[] tmp10;\n\
    \    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n    long[] tmp14;\n\
    \    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n    long[] tmp18;\n\
    \    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n    long[] tmp22;\n\
    \    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n    long[] tmp26;\n\
    \    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n    long[] tmp30;\n\
    \    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n    long[] tmp34;\n\
    \    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n    long[] tmp38;\n\
    \    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n    long[] tmp42;\n\
    \    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n    long[] tmp46;\n\
    \    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n    long[] tmp50;\n\
    \    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n    long[] tmp54;\n\
    \    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n    long[] tmp58;\n\
    \    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n    long[] tmp62;\n\
    \    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n    long[] tmp66;\n\
    \    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n    long[] tmp70;\n\
    \    long[] tmp71;\n    long[] tmp72;\n", "{\n    auto s = set!(long)();\n   \
    \ foreach(e; l)\n    {\n        s.insert(e);\n    }\n    return s.array;\n}",
  "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n\
    \            continue;\n        ret ~= e;\n    }\n    return ret;\n}", "{\n  \
    \  long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e !in ret)\n\
    \            ret ~= e;\n    }\n    return ret.sort();\n}", "{\n    return unique(l,\
    \ (a, b) => a < b);\n}", "{\n    long[] ret = new long[];\n    foreach(e; l)\n\
    \    {\n        if(!e in ret)\n            ret ~= e;\n    }\n    return ret;\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n\
    \            continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n\
    \    long[] ret;\n    ret.length = l.length;\n    int i = 0;\n    foreach(e; l)\n\
    \    {\n        if(!e in ret)\n        {\n            ret[i] = e;\n          \
    \  i++;\n        }\n    }\n    ret.length = i;\n    return ret;\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n        \
    \    continue;\n        ret ~= e;\n    }\n    ret.sort;\n    return ret;\n}",
  "{\n    long[] res = new long[l.length];\n    int count = 0;\n    foreach(e; l)\n\
    \    {\n        if(!e in res)\n        {\n            res[count] = e;\n      \
    \      count++;\n        }\n    }\n    return res[0..count];\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(x; l)\n    {\n        if(x in result)\n  \
    \          continue;\n        result ~= x;\n    }\n    return result;\n}", "{\n\
    \    long[] r = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n\
    \    {\n        if(i == 0 || x != r[i-1])\n        {\n            r[i] = x;\n\
    \            i++;\n        }\n    }\n    return r[0..i];\n}", "{\n    long[] r;\n\
    \    foreach(e; l)\n    {\n        if(e in r)\n            continue;\n       \
    \ r ~= e;\n    }\n    return r;\n}", "{\n    long[] res = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(e in res)\n            continue;\n        res ~= e;\n\
    \    }\n    return res;\n}", "{\n    long[] ret = new long[l.length];\n    long[]\
    \ tmp = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (i == 0)\n        {\n            ret[j] = l[i];\n  \
    \          j++;\n        }\n        else\n        {\n            if (l[i] != l[i-1])\n\
    \            {\n                ret[j] = l[i];\n                j++;\n       \
    \     }\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[] result =\
    \ new long[];\n    foreach(long i; l)\n    {\n        if(result.length == 0 ||\
    \ result[$-1] != i)\n            result ~= i;\n    }\n    return result;\n}",
  "{\n    long[] ret = new long[];\n    foreach(long i; l)\n    {\n        if(ret.length\
    \ == 0 || ret[$-1] != i)\n            ret ~= i;\n    }\n    return ret;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(result.length\
    \ == 0)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            if(!result.canFind(i))\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(e; l)\n    {\n        if(!e in result)\n \
    \       {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e\
    \ !in result)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort;\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[]\
    \ result = new long[];\n    foreach(lval; l)\n    {\n        if(!result.canFind(lval))\n\
    \        {\n            result ~= lval;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(!e\
    \ in ret)\n            ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret\
    \ = new long[];\n    foreach(l_; l)\n    {\n        if(!ret.canFind(l_))\n   \
    \         ret ~= l_;\n    }\n    return ret;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach(e; l) \n    {\n        if(!e in result) \n        {\n \
    \           result ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n\
    \    long[] ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n\
    \            continue;\n        ret ~= e;\n    }\n    return ret;\n}", "{\n  \
    \  long[] result = new long[];\n    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] r = new\
    \ long[];\n    foreach(e; l)\n    {\n        if(e in r)\n            continue;\n\
    \        r ~= e;\n    }\n    return r;\n}", "{\n    long[] res;\n    foreach(e;\
    \ l)\n    {\n        if(e in res)\n            continue;\n        res ~= e;\n\
    \    }\n    return res;\n}", "{\n    long[] ret = new long[0];\n    foreach(e;\
    \ l)\n    {\n        if(!e in ret)\n            ret ~= e;\n    }\n    return ret.sort();\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e !in\
    \ result)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] r = new long[];\n    foreach(e; l)\n    {\n        if(!e in\
    \ r)\n            r ~= e;\n    }\n    return r;\n}", "{\n    long[] ret = new\
    \ long[l.length];\n    int n = 0;\n    foreach(e; l)\n    {\n        if(e in ret[0..n])\n\
    \            continue;\n        ret[n++] = e;\n    }\n    return ret[0..n];\n}",
  "{\n    auto s = set!(long)();\n    foreach(e; l)\n        s.insert(e);\n    return\
    \ s.array;\n}", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n\
    \    int ret_len = 1;\n    for (int i = 1; i < l.length; i++) \n    {\n      \
    \  if (l[i] != l[i-1]) \n        {\n            ret[ret_len] = l[i];\n       \
    \     ret_len++;\n        }\n    }\n    return ret[0..ret_len];\n}\n/*\nReturn\
    \ sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] ret = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(e !in ret)\n            ret ~= e;\n    }\n    ret.sort;\n\
    \    return ret;\n}", "{\n    long[] result = new long[];\n    foreach(x; l)\n\
    \    {\n        if(!x in result)\n        {\n            result ~= x;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n  \
    \  foreach(e; l)\n    {\n        if(!elem(result, e))\n        {\n           \
    \ result ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n    {\n\
    \        if(count == 0 || ret[count-1] != i)\n        {\n            ret[count]\
    \ = i;\n            count++;\n        }\n    }\n    return ret[0..count];\n}",
  "{\n    long[] ret = new long[];\n    foreach(x; l)\n    {\n        if(x in ret)\n\
    \            continue;\n        ret ~= x;\n    }\n    ret.sort;\n    return ret;\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l) \n    {\n        if(!e\
    \ in result) \n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort();\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n\
    \    foreach(long x; l)\n    {\n        if(!ret.canFind(x))\n        {\n     \
    \       ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e\
    \ !in result)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort();\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    long[] result = new long[];\n    foreach(e; l)\n\
    \    {\n        if(e !in result)\n        {\n            result ~= e;\n      \
    \  }\n    }\n    return result.sort();\n}\n/*\nReturn sorted unique elements in\
    \ a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(e !in result)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort();\n}\n/*\n\
    Return sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l) \n{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e\
    \ !in result)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort();\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2", "{\n    long[] result = new\
    \ long[];\n    foreach(e; l)\n    {\n        if(e !in result)\n        {\n   \
    \         result ~= e;\n        }\n    }\n    return result.sort();\n}\n/*\nReturn\
    \ sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l)\
    \ \n{\n    long[] result = new long[];\n    foreach(e; l)\n    {\n        if(e\
    \ !in result)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort();\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    long[] result = new long[];\n    foreach(e; l)\n\
    \    {\n        if(e !in result)\n        {\n            result ~= e;\n      \
    \  }\n    }\n    return result.sort();\n}\n/*\nReturn sorted unique elements in\
    \ a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(e !in result)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort();\n}\n/*\n\
    Return sorted unique elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2", "{\n    long[] result = new long[];\n    foreach(i;\
    \ l)\n    {\n        if(i in result)\n            continue;\n        result ~=\
    \ i;\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n   \
    \ foreach(e; l)\n    {\n        if(!e in result)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort();\n}", "{\n    long[] ret =\
    \ new long[l.length];\n    long[] tmp = new long[l.length];\n    long[] tmp2 =\
    \ new long[l.length];\n    long[] tmp3 = new long[l.length];\n    long[] tmp4\
    \ = new long[l.length];\n    long[] tmp5 = new long[l.length];\n    long[] tmp6\
    \ = new long[l.length];\n    long[] tmp7 = new long[l.length];\n    long[] tmp8\
    \ = new long[l.length];\n    long[] tmp9 = new long[l.length];\n    long[] tmp10\
    \ = new long[l.length];\n    long[] tmp11 = new long[l.length];\n    long[] tmp12\
    \ = new long[l.length];\n    long[] tmp13 = new long[l.length];\n    long[] tmp14\
    \ = new long[l.length];\n    long[] tmp15 = new long[l.length];\n    long[] tmp16\
    \ = new long[l.length];\n    long[] tmp17 = new long[l.length];\n    long[] tmp18\
    \ = new long[l.length];\n    long[] tmp19 = new long[l.length];\n    long[] tmp20\
    \ = new long[l.length];\n    long[] tmp21 = new long[l.length];\n    long[] tmp22\
    \ = new long[l.length];\n    long[] tmp23 = new long[l.length];\n    long[] tmp24\
    \ = new long[l.length];\n    long[] tmp25 = new long[l.length];\n    long[] tmp26\
    \ = new long[l.length];\n    long[] tmp27 = new long[l.length];\n    long[] tmp28\
    \ = new long[l.length];\n    long[] tmp29 = new long[l.length];\n    long[] tmp30\
    \ = new long[l.length];\n    long[] tmp31 = new long[l.length];\n    long[] tmp32\
    \ = new long[l.length];\n    long[] tmp33 = new long[l.length];\n    long[] tmp34\
    \ = new long[l.length];\n    long[] tmp35 = new long[l.length];\n    long[] tmp36\
    \ = new", "{\n    auto s = set(l);\n    return s.array();\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(i; l)\n    {\n        if(!ret.canFind(i))\n \
    \           ret ~= i;\n    }\n    ret.sort;\n    return ret;\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(e; l)\n    {\n        if(!e in ret)\n       \
    \     ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e !in ret)\n            ret ~= e;\n    }\n\
    \    return ret;\n}", "{\n    long[] ret = new long[l.length];\n    long[] tmp\
    \ = new long[l.length];\n    long[] tmp2 = new long[l.length];\n    long[] tmp3\
    \ = new long[l.length];\n    long[] tmp4 = new long[l.length];\n    long[] tmp5\
    \ = new long[l.length];\n    long[] tmp6 = new long[l.length];\n    long[] tmp7\
    \ = new long[l.length];\n    long[] tmp8 = new long[l.length];\n    long[] tmp9\
    \ = new long[l.length];\n    long[] tmp10 = new long[l.length];\n    long[] tmp11\
    \ = new long[l.length];\n    long[] tmp12 = new long[l.length];\n    long[] tmp13\
    \ = new long[l.length];\n    long[] tmp14 = new long[l.length];\n    long[] tmp15\
    \ = new long[l.length];\n    long[] tmp16 = new long[l.length];\n    long[] tmp17\
    \ = new long[l.length];\n    long[] tmp18 = new long[l.length];\n    long[] tmp19\
    \ = new long[l.length];\n    long[] tmp20 = new long[l.length];\n    long[] tmp21\
    \ = new long[l.length];\n    long[] tmp22 = new long[l.length];\n    long[] tmp23\
    \ = new long[l.length];\n    long[] tmp24 = new long[l.length];\n    long[] tmp25\
    \ = new long[l.length];\n    long[] tmp26 = new long[l.length];\n    long[] tmp27\
    \ = new long[l.length];\n    long[] tmp28 = new long[l.length];\n    long[] tmp29\
    \ = new long[l.length];\n    long[] tmp30 = new long[l.length];\n    long[] tmp31\
    \ = new long[l.length];\n    long[] tmp32 = new long[l.length];\n    long[] tmp33\
    \ = new long[l.length];\n    long[] tmp34 = new long[l.length];\n    long[] tmp35\
    \ = new long[l.length];\n    long[] tmp36 = new", "{\n    long[] result = new\
    \ long[];\n    foreach(e; l)\n    {\n        if(e !in result)\n        {\n   \
    \         result ~= e;\n        }\n    }\n    return result.sort();\n}\n/*\nReturn\
    \ sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(!result.canFind(i))\n        {\n   \
    \         result ~= i;\n        }\n    }\n    return result.sort();\n}", "{\n\
    \    return std.algorithm.uniq(l);\n}", "{\n    long[] ret = new long[];\n   \
    \ foreach(e; l)\n    {\n        if(e in ret)\n            continue;\n        ret\
    \ ~= e;\n    }\n    ret.sort;\n    return ret;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(long x; l)\n    {\n        if(!ret.canFind(x))\n            ret ~=\
    \ x;\n    }\n    return ret;\n}", "{\n    long[] res = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(!e in res)\n            res ~= e;\n    }\n    sort(res);\n\
    \    return res;\n}", "{\n    return sort(uniq(l));\n}\n/*\nReturn sorted unique\
    \ elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    return\
    \ sort(uniq(l));\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    return sort(uniq(l));\n}\n/*\nReturn sorted unique\
    \ elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    return\
    \ sort(uniq(l));\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    return sort(uniq(l));\n}\n/*\nReturn sorted unique\
    \ elements in a list\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    return\
    \ sort(uniq(l));\n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n", "{\n    long[] r = new long[];\n    foreach(e;\
    \ l)\n    {\n        if(!e in r)\n            r ~= e;\n    }\n    return r;\n}",
  "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[]\
    \ tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n\
    \    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n \
    \   long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n \
    \   long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n \
    \   long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n \
    \   long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n \
    \   long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n \
    \   long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n \
    \   long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n \
    \   long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n \
    \   long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n \
    \   long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n \
    \   long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n \
    \   long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n \
    \   long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n \
    \   long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n \
    \   long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] res = new long[0];\n    foreach(e; l)\n    {\n        if(!elem(e,\
    \ res))\n            res ~= e;\n    }\n    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
