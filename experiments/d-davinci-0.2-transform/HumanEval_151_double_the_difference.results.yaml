language: d
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            result += x * x;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbg1xwqur.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbg1xwqur.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpbg1xwqur.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0.0f && f == cast(long)f)\n        {\n            result += cast(long)pow(f,\
    \ 2L);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf5c_y2x7.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428555]

    ??:? void tmpf5c_y2x7.__unittest_L31_C1() [0x427f69]

    ??:? void tmpf5c_y2x7.__modtest() [0x4282d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c50b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430531]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b375]

    ??:? runModuleUnitTests [0x42c2e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            sum += f*f;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplpzcd86m.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmplpzcd86m.__unittest_L31_C1() [0x427ec9]

    ??:? void tmplpzcd86m.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            sum += x*x;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxptljqg8.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpxptljqg8.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpxptljqg8.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && is(typeof(f) == long))\n        {\n            long l = cast(long)f;\n\
    \            if(l % 2L == 1L)\n            {\n                result += l * l;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbib14lxv.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbib14lxv.__unittest_L35_C1() [0x427ec9]

    ??:? void tmpbib14lxv.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isFinite(f))\n        {\n            sum += f * f;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cimeifm.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cimeifm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn1d9_c9w.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpn1d9_c9w.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpn1d9_c9w.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            sum += cast(long)i * cast(long)i;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7phsgsy1.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmp7phsgsy1.__unittest_L31_C1() [0x427f19]

    ??:? void tmp7phsgsy1.__modtest() [0x428164]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c39b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b22e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430870]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43034d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]

    ??:? runModuleUnitTests [0x42c171]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76xufr37.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76xufr37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4w3mz67y.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmp4w3mz67y.__unittest_L34_C1() [0x427fa5]

    ??:? void tmp4w3mz67y.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn1d9_c9w.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpn1d9_c9w.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpn1d9_c9w.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2r8xsdd1.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284fd]

    ??:? void tmp2r8xsdd1.__unittest_L34_C1() [0x427f1d]

    ??:? void tmp2r8xsdd1.__modtest() [0x42827c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]

    ??:? runModuleUnitTests [0x42c289]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            sum += x * x;\n       \
    \ }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3zkgqol.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmph3zkgqol.__unittest_L31_C1() [0x427ec9]

    ??:? void tmph3zkgqol.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x * x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmblgmr3o.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmblgmr3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += pow(f, 2);\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpklbmb6kc.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285a5]

    ??:? void tmpklbmb6kc.__unittest_L34_C1() [0x427fc5]

    ??:? void tmpklbmb6kc.__modtest() [0x428324]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c55b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430581]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a30]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43050d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c5]

    ??:? runModuleUnitTests [0x42c331]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && is(typeof(f) == long))\n        {\n            sum += f * f;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1gqrgsfk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp1gqrgsfk.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp1gqrgsfk.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjtixrodr.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjtixrodr.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjtixrodr.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwbsf5c4q.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpwbsf5c4q.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpwbsf5c4q.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuoaqg0yh.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmpuoaqg0yh.__unittest_L34_C1() [0x427fa5]

    ??:? void tmpuoaqg0yh.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if (x\
    \ > 0 && x == cast(long)x)\n        {\n            if (x % 2 == 1)\n         \
    \   {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprct213u1.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmprct213u1.__unittest_L34_C1() [0x427f6d]

    ??:? void tmprct213u1.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if (f\
    \ > 0 && f == cast(long)f)\n        {\n            sum += cast(long)pow(f, 2);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1tu96zwg.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428545]

    ??:? void tmp1tu96zwg.__unittest_L31_C1() [0x427f69]

    ??:? void tmp1tu96zwg.__modtest() [0x4282c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b38e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430521]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]

    ??:? runModuleUnitTests [0x42c2d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428994]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cx958na.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cx958na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && i > 0)\n        {\n            sum += i * i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptkc5bgll.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptkc5bgll.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum*2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu4mp6ng2.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpu4mp6ng2.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpu4mp6ng2.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i % 2 == 1)\n        {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4w3mz67y.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmp4w3mz67y.__unittest_L34_C1() [0x427fa5]

    ??:? void tmp4w3mz67y.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa2_on00q.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpa2_on00q.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpa2_on00q.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            sum += cast(long)f * cast(long)f;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9qz1joxp.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmp9qz1joxp.__unittest_L31_C1() [0x427f19]

    ??:? void tmp9qz1joxp.__modtest() [0x428164]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c39b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b22e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430870]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43034d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]

    ??:? runModuleUnitTests [0x42c171]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst) \n    {\n       \
    \ if(f > 0L && is(typeof(f) == int)) \n        {\n            result += f*f;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmfc2b6w9.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmfc2b6w9.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpmfc2b6w9.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn1d9_c9w.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpn1d9_c9w.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpn1d9_c9w.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if(x > 0L && is(typeof(x) == int)) \n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdfk52nve.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpdfk52nve.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpdfk52nve.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isInteger(f))\n        {\n            sum += f * f;\n        }\n    }\n \
    \   return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpysfw95o3.d(24): Error: undefined identifier `isOdd`

    /tmp/tmpysfw95o3.d(24): Error: undefined identifier `isInteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysfw95o3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuoaqg0yh.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmpuoaqg0yh.__unittest_L34_C1() [0x427fa5]

    ??:? void tmpuoaqg0yh.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && i == cast(long)i)\n        {\n            if (i % 2 == 1)\n         \
    \   {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmtup3lhu.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpmtup3lhu.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpmtup3lhu.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float item; lst)\n    {\n        if(item\
    \ > 0 && is(typeof(item) == int))\n        {\n            if(item % 2 == 1)\n\
    \            {\n                sum += item * item;\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbi6_qh6m.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbi6_qh6m.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpbi6_qh6m.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach (float x; lst)\n    {\n       \
    \ if (x > 0L && is(typeof(x) == long))\n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpadio0ryq.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpadio0ryq.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpadio0ryq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach (float i; lst) \n    {\n      \
    \  if (isOdd(i) && isFinite(i)) \n        {\n            result += i * i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_o4jxse.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_o4jxse.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            sum += i*i;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8fv_iccn.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp8fv_iccn.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp8fv_iccn.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += pow(x, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9mj9wogd.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284fd]

    ??:? void tmp9mj9wogd.__unittest_L34_C1() [0x427f1d]

    ??:? void tmp9mj9wogd.__modtest() [0x42827c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]

    ??:? runModuleUnitTests [0x42c289]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cx958na.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cx958na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(int)i)\n        {\n            if(i % 2 == 1)\n           \
    \ {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb6llqo1v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpb6llqo1v.__unittest_L34_C1() [0x427f69]

    ??:? void tmpb6llqo1v.__modtest() [0x4281b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp85fpoict.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85fpoict.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn1d9_c9w.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpn1d9_c9w.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpn1d9_c9w.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if (x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if (x % 2 == 1)\n     \
    \       {\n                sum += x * x;\n            }\n        }\n    }\n  \
    \  return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0dhqwjgi.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp0dhqwjgi.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp0dhqwjgi.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isFinite(f))\n        {\n            sum += f*f;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpolcg2l29.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpolcg2l29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(is(typeof(x)\
    \ == long) && x > 0) \n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvah8z7_p.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpvah8z7_p.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpvah8z7_p.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            sum += cast(long)i * cast(long)i;\n\
    \        }\n    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate =\
    \ double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx138jegf.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmpx138jegf.__unittest_L31_C1() [0x427f1d]

    ??:? void tmpx138jegf.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c39b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b22e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430870]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43034d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]

    ??:? runModuleUnitTests [0x42c171]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            sum += i*i;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8fv_iccn.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp8fv_iccn.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp8fv_iccn.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isInteger(x) && x > 0)\n        {\n            sum += x * x;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7k4bnpb.d(24): Error: undefined identifier `isOdd`

    /tmp/tmpn7k4bnpb.d(24): Error: undefined identifier `isInteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7k4bnpb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcaeei96h.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpcaeei96h.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpcaeei96h.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == long) && x > 0)\n        {\n            if(x % 2 == 1)\n            {\n \
    \               sum += x * x;\n            }\n        }\n    }\n    return sum\
    \ * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcu4pel9v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpcu4pel9v.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpcu4pel9v.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp9rlpbsg.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpp9rlpbsg.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpp9rlpbsg.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cx958na.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cx958na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if(x % 2 == 1) \n    \
    \        {\n                sum += x * x;\n            }\n        }\n    }\n \
    \   return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj93tblci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpj93tblci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpj93tblci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph80ec8oa.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmph80ec8oa.__unittest_L34_C1() [0x427ec9]

    ??:? void tmph80ec8oa.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp9rlpbsg.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpp9rlpbsg.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpp9rlpbsg.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4w3mz67y.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmp4w3mz67y.__unittest_L34_C1() [0x427fa5]

    ??:? void tmp4w3mz67y.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcaeei96h.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpcaeei96h.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpcaeei96h.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm71e3ze1.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm71e3ze1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76xufr37.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76xufr37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            sum += x*x;\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy6z0b4_5.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmpy6z0b4_5.__unittest_L31_C1() [0x427f2d]

    ??:? void tmpy6z0b4_5.__modtest() [0x428178]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43035d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]

    ??:? runModuleUnitTests [0x42c181]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            sum += i * i;\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe9jjx8_4.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpe9jjx8_4.__unittest_L31_C1() [0x427f31]

    ??:? void tmpe9jjx8_4.__modtest() [0x42817c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b246]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430888]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430365]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b21d]

    ??:? runModuleUnitTests [0x42c189]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42884c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if (x % 2 == 1) \n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo57l64pb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpo57l64pb.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpo57l64pb.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp9rlpbsg.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpp9rlpbsg.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpp9rlpbsg.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x*x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvodbm8az.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpvodbm8az.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpvodbm8az.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if(x > 0L && is(typeof(x) == int)) \n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdfk52nve.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpdfk52nve.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpdfk52nve.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (is(typeof(x)\
    \ == int) && x > 0) \n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2c79vsyc.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp2c79vsyc.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp2c79vsyc.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwbsf5c4q.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpwbsf5c4q.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpwbsf5c4q.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0.0f && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n   \
    \         {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgu2jmuay.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpgu2jmuay.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpgu2jmuay.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm71e3ze1.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm71e3ze1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && num == cast(long)num)\n        {\n            if(num % 2 == 1)\n    \
    \        {\n                sum += num * num;\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4avwzm85.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp4avwzm85.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp4avwzm85.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n\
    \ > 0 && is(typeof(n) == int))\n        {\n            if(n % 2 != 0)\n      \
    \      {\n                sum += n * n;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp98xulufi.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp98xulufi.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp98xulufi.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(is(typeof(x)\
    \ == int) && x > 0) \n        {\n            if(x % 2 == 1) \n            {\n\
    \                sum += x * x;\n            }\n        }\n    }\n    return sum\
    \ * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp30y4rd7i.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp30y4rd7i.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp30y4rd7i.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            long x2 = cast(long)x;\n\
    \            if (x2 % 2 == 1) \n            {\n                sum += x2 * x2;\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnn7c3web.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpnn7c3web.__unittest_L35_C1() [0x427ec9]

    ??:? void tmpnn7c3web.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76xufr37.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76xufr37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cx958na.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cx958na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp9rlpbsg.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpp9rlpbsg.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpp9rlpbsg.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if(x % 2 == 1) \n    \
    \        {\n                sum += x * x;\n            }\n        }\n    }\n \
    \   return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj93tblci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpj93tblci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpj93tblci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4w3mz67y.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmp4w3mz67y.__unittest_L34_C1() [0x427fa5]

    ??:? void tmp4w3mz67y.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cx958na.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cx958na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ 2 * sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu206ptbe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpu206ptbe.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpu206ptbe.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum\
    \ * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplipz09hg.d(24): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplipz09hg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76xufr37.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76xufr37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76xufr37.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76xufr37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x*x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpggi22n9k.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpggi22n9k.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpggi22n9k.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == long))\n        {\n            result += i * i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_qkb1d1y.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp_qkb1d1y.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp_qkb1d1y.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && is(typeof(i) == int)) \n        {\n            if(i % 2 == 1) \n    \
    \        {\n                sum += i * i;\n            }\n        }\n    }\n \
    \   return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptmmfka7v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmptmmfka7v.__unittest_L34_C1() [0x427ecd]

    ??:? void tmptmmfka7v.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if (is(typeof(x) == int) && x > 0) \n        {\n            result += x*x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpubwvbics.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpubwvbics.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpubwvbics.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == long) && x > 0L && x % 2L == 1L)\n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdz682m4p.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpdz682m4p.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpdz682m4p.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if (x % 2 == 1) \n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo57l64pb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpo57l64pb.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpo57l64pb.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph80ec8oa.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmph80ec8oa.__unittest_L34_C1() [0x427ec9]

    ??:? void tmph80ec8oa.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == long) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3zpvbqva.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp3zpvbqva.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp3zpvbqva.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4w3mz67y.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmp4w3mz67y.__unittest_L34_C1() [0x427fa5]

    ??:? void tmp4w3mz67y.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst) \n    {\n       \
    \ if(f > 0L && is(typeof(f) == int)) \n        {\n            result += f * f;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzb1ta_wc.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpzb1ta_wc.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpzb1ta_wc.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuoaqg0yh.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428585]

    ??:? void tmpuoaqg0yh.__unittest_L34_C1() [0x427fa5]

    ??:? void tmpuoaqg0yh.__modtest() [0x428304]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]

    ??:? runModuleUnitTests [0x42c311]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && i == cast(long)i)\n        {\n            sum += i * i;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3oxstr81.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmp3oxstr81.__unittest_L31_C1() [0x427f2d]

    ??:? void tmp3oxstr81.__modtest() [0x428178]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43035d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]

    ??:? runModuleUnitTests [0x42c181]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwbsf5c4q.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpwbsf5c4q.__unittest_L34_C1() [0x427f6d]

    ??:? void tmpwbsf5c4q.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2tdjtq3e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmp2tdjtq3e.__unittest_L34_C1() [0x427f19]

    ??:? void tmp2tdjtq3e.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ < 0)\n            continue;\n        if(x != cast(long)x)\n            continue;\n\
    \        if(x % 2 == 0)\n            continue;\n        sum += x * x;\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2r8xsdd1.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284fd]

    ??:? void tmp2r8xsdd1.__unittest_L34_C1() [0x427f1d]

    ??:? void tmp2r8xsdd1.__modtest() [0x42827c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]

    ??:? runModuleUnitTests [0x42c289]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn1d9_c9w.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpn1d9_c9w.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpn1d9_c9w.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cx958na.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cx958na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            result += i * i;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm6zrqvch.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmpm6zrqvch.__unittest_L31_C1() [0x427f2d]

    ??:? void tmpm6zrqvch.__modtest() [0x428178]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43035d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]

    ??:? runModuleUnitTests [0x42c181]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_nlxk0e.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp8_nlxk0e.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp8_nlxk0e.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x*x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)i * cast(long)i;\n            }\n     \
    \   }\n    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwsfibk_p.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428425]

    ??:? void tmpwsfibk_p.__unittest_L34_C1() [0x427f59]

    ??:? void tmpwsfibk_p.__modtest() [0x4281a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3db]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b26e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430401]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43038d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b245]

    ??:? runModuleUnitTests [0x42c1b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428874]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                result += i * i;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph80ec8oa.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmph80ec8oa.__unittest_L34_C1() [0x427ec9]

    ??:? void tmph80ec8oa.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(int)i)\n        {\n            if(i % 2 == 1)\n           \
    \ {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb6llqo1v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpb6llqo1v.__unittest_L34_C1() [0x427f69]

    ??:? void tmpb6llqo1v.__modtest() [0x4281b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdc5auci.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjdc5auci.__unittest_L34_C1() [0x427ecd]

    ??:? void tmpjdc5auci.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5x0x9hqe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp5x0x9hqe.__unittest_L34_C1() [0x427ecd]

    ??:? void tmp5x0x9hqe.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bxbn1c6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp6bxbn1c6.__unittest_L34_C1() [0x427f6d]

    ??:? void tmp6bxbn1c6.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            sum += num * num;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpszcne1f3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpszcne1f3.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpszcne1f3.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
