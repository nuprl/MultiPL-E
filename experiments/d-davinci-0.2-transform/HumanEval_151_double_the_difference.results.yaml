language: d
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            result += x * x;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppubjib2a.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmppubjib2a.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmppubjib2a.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x694ee554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0.0f && f == cast(long)f)\n        {\n            result += cast(long)pow(f,\
    \ 2L);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkp7xe_v5.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428555]\n??:? void tmpkp7xe_v5.__unittest_L31_C1() [0x427f69]\n??:?
    void tmpkp7xe_v5.__modtest() [0x4282d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c50b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430531]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b375]\n??:? runModuleUnitTests [0x42c2e1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42892b]\n??:? _d_run_main [0x428896]\n??:? main [0x4282eb]\n??:?
    __libc_start_main [0x335f4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            sum += f*f;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpp852_tey.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpp852_tey.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpp852_tey.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x4976b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            sum += x*x;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpoysozseb.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpoysozseb.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpoysozseb.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x70b98554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && is(typeof(f) == long))\n        {\n            long l = cast(long)f;\n\
    \            if(l % 2L == 1L)\n            {\n                result += l * l;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpal8y9lip.d(40): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpal8y9lip.__unittest_L35_C1() [0x427ec9]\n??:?
    void tmpal8y9lip.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x78416554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isFinite(f))\n        {\n            sum += f * f;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmiayjox8.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmiayjox8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmjnzikik.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpmjnzikik.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmpmjnzikik.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x42416554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            sum += cast(long)i * cast(long)i;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9331tbq9.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283e5]\n??:? void tmp9331tbq9.__unittest_L31_C1() [0x427f19]\n??:?
    void tmp9331tbq9.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430870]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43034d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4287bb]\n??:? _d_run_main [0x428726]\n??:? main [0x428177]\n??:?
    __libc_start_main [0xed33a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2utovah.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2utovah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjrgmuke5.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428585]\n??:? void tmpjrgmuke5.__unittest_L34_C1() [0x427fa5]\n??:?
    void tmpjrgmuke5.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42895b]\n??:? _d_run_main [0x4288c6]\n??:? main [0x428317]\n??:?
    __libc_start_main [0x4ee20554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmjnzikik.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpmjnzikik.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmpmjnzikik.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x42416554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8od94u5u.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284fd]\n??:? void tmp8od94u5u.__unittest_L34_C1() [0x427f1d]\n??:?
    void tmp8od94u5u.__modtest() [0x42827c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288d3]\n??:? _d_run_main [0x42883e]\n??:? main [0x42828f]\n??:?
    __libc_start_main [0x27733554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            sum += x * x;\n       \
    \ }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo_3avs3s.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpo_3avs3s.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpo_3avs3s.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x7f420554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x * x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj5lley5.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj5lley5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += pow(f, 2);\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxfe3czt3.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4285a5]\n??:? void tmpxfe3czt3.__unittest_L34_C1() [0x427fc5]\n??:?
    void tmpxfe3czt3.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430581]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a30]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43050d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3c5]\n??:? runModuleUnitTests [0x42c331]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289f4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42897b]\n??:? _d_run_main [0x4288e6]\n??:? main [0x428337]\n??:?
    __libc_start_main [0xab7ce554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && is(typeof(f) == long))\n        {\n            sum += f * f;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjxlzc3se.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpjxlzc3se.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpjxlzc3se.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x797a0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpyyy2clmd.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpyyy2clmd.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmpyyy2clmd.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0xdeb84554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_4_djg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kpxni4a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzhevm4u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if (x\
    \ > 0 && x == cast(long)x)\n        {\n            if (x % 2 == 1)\n         \
    \   {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ksvi6ze.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if (f\
    \ > 0 && f == cast(long)f)\n        {\n            sum += cast(long)pow(f, 2);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3opawl0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbeaf1n8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && i > 0)\n        {\n            sum += i * i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo__4ws3y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum*2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkx10br5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i % 2 == 1)\n        {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8r1h5h_r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjrgmuke5.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428585]\n??:? void tmpjrgmuke5.__unittest_L34_C1() [0x427fa5]\n??:?
    void tmpjrgmuke5.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42895b]\n??:? _d_run_main [0x4288c6]\n??:? main [0x428317]\n??:?
    __libc_start_main [0x4ee20554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvtyp08a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            sum += cast(long)f * cast(long)f;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsue_2kp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst) \n    {\n       \
    \ if(f > 0L && is(typeof(f) == int)) \n        {\n            result += f*f;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwhya949.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmjnzikik.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpmjnzikik.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmpmjnzikik.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x42416554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if(x > 0L && is(typeof(x) == int)) \n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6t3arjm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isInteger(f))\n        {\n            sum += f * f;\n        }\n    }\n \
    \   return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1srt2bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzhevm4u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && i == cast(long)i)\n        {\n            if (i % 2 == 1)\n         \
    \   {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0udicw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float item; lst)\n    {\n        if(item\
    \ > 0 && is(typeof(item) == int))\n        {\n            if(item % 2 == 1)\n\
    \            {\n                sum += item * item;\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xxs4vvp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach (float x; lst)\n    {\n       \
    \ if (x > 0L && is(typeof(x) == long))\n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ckw3d8r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach (float i; lst) \n    {\n      \
    \  if (isOdd(i) && isFinite(i)) \n        {\n            result += i * i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn6h9sqv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            sum += i*i;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3woni_r8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += pow(x, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4me428c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbeaf1n8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(int)i)\n        {\n            if(i % 2 == 1)\n           \
    \ {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukbkj5rf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_0udwqp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmjnzikik.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpmjnzikik.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmpmjnzikik.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x42416554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if (x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if (x % 2 == 1)\n     \
    \       {\n                sum += x * x;\n            }\n        }\n    }\n  \
    \  return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuaf5ug4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isFinite(f))\n        {\n            sum += f*f;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpexvkuz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(is(typeof(x)\
    \ == long) && x > 0) \n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pbr9inm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            sum += cast(long)i * cast(long)i;\n\
    \        }\n    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate =\
    \ double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84oonicb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_4_djg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            sum += i*i;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3woni_r8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isInteger(x) && x > 0)\n        {\n            sum += x * x;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnld0wr4b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlpdwm_6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == long) && x > 0)\n        {\n            if(x % 2 == 1)\n            {\n \
    \               sum += x * x;\n            }\n        }\n    }\n    return sum\
    \ * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnosg8bkr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmnvejkw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbeaf1n8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if(x % 2 == 1) \n    \
    \        {\n                sum += x * x;\n            }\n        }\n    }\n \
    \   return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s499_ii.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohx8tkik.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmnvejkw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjrgmuke5.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428585]\n??:? void tmpjrgmuke5.__unittest_L34_C1() [0x427fa5]\n??:?
    void tmpjrgmuke5.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42895b]\n??:? _d_run_main [0x4288c6]\n??:? main [0x428317]\n??:?
    __libc_start_main [0x4ee20554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlpdwm_6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwd5iea4r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_4_djg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2utovah.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2utovah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            sum += x*x;\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h6wrmwx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            sum += i * i;\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpan4gumc5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if (x % 2 == 1) \n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdd88y65f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmnvejkw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x*x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgsrn1bj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if(x > 0L && is(typeof(x) == int)) \n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6t3arjm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (is(typeof(x)\
    \ == int) && x > 0) \n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyp58nz9e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kpxni4a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0.0f && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n   \
    \         {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_n5ki9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwd5iea4r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && num == cast(long)num)\n        {\n            if(num % 2 == 1)\n    \
    \        {\n                sum += num * num;\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_4_2fr5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n\
    \ > 0 && is(typeof(n) == int))\n        {\n            if(n % 2 != 0)\n      \
    \      {\n                sum += n * n;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujk5fyoc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(is(typeof(x)\
    \ == int) && x > 0) \n        {\n            if(x % 2 == 1) \n            {\n\
    \                sum += x * x;\n            }\n        }\n    }\n    return sum\
    \ * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6v9q3k1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            long x2 = cast(long)x;\n\
    \            if (x2 % 2 == 1) \n            {\n                sum += x2 * x2;\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgmbd5pe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2utovah.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2utovah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbeaf1n8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmnvejkw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrrw3u7l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if(x % 2 == 1) \n    \
    \        {\n                sum += x * x;\n            }\n        }\n    }\n \
    \   return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s499_ii.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjrgmuke5.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428585]\n??:? void tmpjrgmuke5.__unittest_L34_C1() [0x427fa5]\n??:?
    void tmpjrgmuke5.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42895b]\n??:? _d_run_main [0x4288c6]\n??:? main [0x428317]\n??:?
    __libc_start_main [0x4ee20554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbeaf1n8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ 2 * sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gchjj2m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum\
    \ * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplav_30ps.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmplav_30ps.d(24): Error: found \'')\'' instead of statement\n/tmp/tmplav_30ps.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplav_30ps.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2utovah.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2utovah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i * i;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2utovah.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2utovah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x*x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ws4yp85.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == long))\n        {\n            result += i * i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3h3vftdg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && is(typeof(i) == int)) \n        {\n            if(i % 2 == 1) \n    \
    \        {\n                sum += i * i;\n            }\n        }\n    }\n \
    \   return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslzwmp0w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if (is(typeof(x) == int) && x > 0) \n        {\n            result += x*x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe5_ztdo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == long) && x > 0L && x % 2L == 1L)\n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoauno4cj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if (x\
    \ > 0 && is(typeof(x) == int)) \n        {\n            if (x % 2 == 1) \n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdd88y65f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohx8tkik.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == long) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yvodcj2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjrgmuke5.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428585]\n??:? void tmpjrgmuke5.__unittest_L34_C1() [0x427fa5]\n??:?
    void tmpjrgmuke5.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430561]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42895b]\n??:? _d_run_main [0x4288c6]\n??:? main [0x428317]\n??:?
    __libc_start_main [0x4ee20554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst) \n    {\n       \
    \ if(f > 0L && is(typeof(f) == int)) \n        {\n            result += f * f;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnc5czi14.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_4_djg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzhevm4u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && i == cast(long)i)\n        {\n            sum += i * i;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv99jd62.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kpxni4a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6jr18ai.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ < 0)\n            continue;\n        if(x != cast(long)x)\n            continue;\n\
    \        if(x % 2 == 0)\n            continue;\n        sum += x * x;\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppoao1sl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8od94u5u.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284fd]\n??:? void tmp8od94u5u.__unittest_L34_C1() [0x427f1d]\n??:?
    void tmp8od94u5u.__modtest() [0x42827c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288d3]\n??:? _d_run_main [0x42883e]\n??:? main [0x42828f]\n??:?
    __libc_start_main [0x27733554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmjnzikik.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpmjnzikik.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmpmjnzikik.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x42416554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            sum += x*x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbeaf1n8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            result += i * i;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsur9q4e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7fiy9dt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x*x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmps1dpr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)i * cast(long)i;\n            }\n     \
    \   }\n    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2az1pz3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                result += i * i;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjarc2_d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohx8tkik.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_4_djg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(int)i)\n        {\n            if(i % 2 == 1)\n           \
    \ {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukbkj5rf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4t0d83_f.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp4t0d83_f.__unittest_L34_C1() [0x427ecd]\n??:?
    void tmp4t0d83_f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x42812b]\n??:?
    __libc_start_main [0x88999554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihc4aec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbw5n3io.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpqbw5n3io.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpqbw5n3io.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x321a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L,\
    \ 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>>\
    \ double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input list is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            sum += num * num;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_l2pk0v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793000
