name: HumanEval_40_triples_sum_to_zero
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes\
  \ a list of integers as an input.\n    it returns True if there are three distinct\
  \ elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1L,\
  \ 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n\
  \    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L,\
  \ 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n\
  \    \n*/\nbool triples_sum_to_zero(long[] l) \n"
tests: "unittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L,\
  \ 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n\
  \    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L,\
  \ 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L,\
  \ 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L,\
  \ 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n\
  }\nvoid main(){}"
completions: ["{\n    if (l.length < 3)\n    {\n        return false;\n    }\n   \
    \ else\n    {\n        long[] l2 = l.dup;\n        l2.sort;\n        foreach (i;\
    \ 0 .. l2.length - 2)\n        {\n            long a = l2[i];\n            long\
    \ b = l2[i + 1];\n            long c = -(a + b);\n            if (l2.canFind(c))\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.sort();\n        long[] neg = sorted.filter!(x\
    \ => x < 0);\n        long[] pos = sorted.filter!(x => x > 0);\n        foreach\
    \ (i; 0 .. neg.length)\n        {\n            foreach (j; 0 .. pos.length)\n\
    \            {\n                if (neg[i] + pos[j] == 0)\n                  \
    \  return true;\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n\
    \        long[] sorted = l.dup.sort;\n        for (int i = 0; i < sorted.length\
    \ - 2; i++)\n        {\n            if (sorted[i] + sorted[i + 1] + sorted[i +\
    \ 2] == 0)\n            {\n                return true;\n            }\n     \
    \   }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n  \
    \      return false;\n    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        long[] negatives = sorted.filter!(x => x < 0)();\n        long[] positives\
    \ = sorted.filter!(x => x > 0)();\n        long[] zeros = sorted.filter!(x =>\
    \ x == 0)();\n        if (zeros.length >= 3)\n        {\n            return true;\n\
    \        }\n        else\n        {\n            foreach (long n; negatives)\n\
    \            {\n                foreach (long p; positives)\n                {\n\
    \                    if (n + p == 0)\n                    {\n                \
    \        return true;\n                    }\n                }\n            }\n\
    \            return false;\n        }\n    }\n}", "{\n    if (l.length < 3)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        foreach (i; 0 ..\
    \ l.length - 2)\n        {\n            foreach (j; i + 1 .. l.length - 1)\n \
    \           {\n                foreach (k; j + 1 .. l.length)\n              \
    \  {\n                    if (l[i] + l[j] + l[k] == 0)\n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        long[] neg = sorted.filter!(x => x < 0);\n        long[] pos = sorted.filter!(x\
    \ => x > 0);\n        if (neg.length < 2 || pos.length < 2)\n            return\
    \ false;\n        else\n        {\n            foreach (i; 0 .. neg.length - 2)\n\
    \            {\n                foreach (j; i + 1 .. neg.length - 1)\n       \
    \         {\n                    foreach (k; 0 .. pos.length - 1)\n          \
    \          {\n                        if (neg[i] + neg[j] + pos[k] == 0)\n   \
    \                         return true;\n                    }\n              \
    \  }\n            }\n            return false;\n        }\n    }\n}", "{\n   \
    \ if (l.length < 3)\n        return false;\n    else\n    {\n        sort(l);\n\
    \        foreach (i; 0 .. l.length - 2)\n        {\n            long a = l[i];\n\
    \            long j = i + 1;\n            long k = l.length - 1;\n           \
    \ while (j < k)\n            {\n                long b = l[j];\n             \
    \   long c = l[k];\n                if (a + b + c == 0)\n                    return\
    \ true;\n                else if (a + b + c < 0)\n                    j++;\n \
    \               else\n                    k--;\n            }\n        }\n   \
    \     return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return\
    \ false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1\
    \ .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n  \
    \          {\n                if (l[i] + l[j] + l[k] == 0)\n                 \
    \   return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = sort(l);\n        foreach (long i; 0 .. sorted.length - 2)\n      \
    \  {\n            long j = i + 1;\n            long k = sorted.length - 1;\n \
    \           while (j < k)\n            {\n                long sum = sorted[i]\
    \ + sorted[j] + sorted[k];\n                if (sum == 0)\n                  \
    \  return true;\n                else if (sum < 0)\n                    j++;\n\
    \                else\n                    k--;\n            }\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3) return false;\n   \
    \ auto s = sort(l);\n    foreach (i; 0 .. s.length - 2)\n    {\n        auto j\
    \ = i + 1;\n        auto k = s.length - 1;\n        while (j < k)\n        {\n\
    \            auto sum = s[i] + s[j] + s[k];\n            if (sum == 0) return\
    \ true;\n            if (sum < 0) j += 1;\n            else k -= 1;\n        }\n\
    \    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] sorted = l.sort();\n        for\
    \ (int i = 0; i < sorted.length - 2; i++)\n        {\n            long a = sorted[i];\n\
    \            long b = sorted[i + 1];\n            long c = sorted[i + 2];\n  \
    \          if (a + b + c == 0)\n            {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0) return true;\n  \
    \          }\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        foreach (i; 0 .. sorted.length - 2)\n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.canFind(c))\n                return true;\n    \
    \    }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n    \
    \    return false;\n    else\n    {\n        long[] sorted_l = sort(l);\n    \
    \    int i = 0;\n        int j = 1;\n        int k = sorted_l.length - 1;\n  \
    \      while (i < j && j < k)\n        {\n            long sum = sorted_l[i] +\
    \ sorted_l[j] + sorted_l[k];\n            if (sum == 0)\n                return\
    \ true;\n            else if (sum < 0)\n                j++;\n            else\n\
    \                k--;\n        }\n        return false;\n    }\n}", "{\n    long[]\
    \ sorted = l.dup.sort;\n    foreach(i; 0..sorted.length)\n    {\n        long\
    \ a = sorted[i];\n        long j = i + 1;\n        long k = sorted.length - 1;\n\
    \        while(j < k)\n        {\n            long b = sorted[j];\n          \
    \  long c = sorted[k];\n            if(a + b + c == 0)\n            {\n      \
    \          return true;\n            }\n            else if(a + b + c < 0)\n \
    \           {\n                j += 1;\n            }\n            else\n    \
    \        {\n                k -= 1;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n   \
    \ {\n        long[] l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length\
    \ - 2)\n        {\n            long j = i + 1;\n            long k = l2.length\
    \ - 1;\n            while (j < k)\n            {\n                if (l2[i] +\
    \ l2[j] + l2[k] == 0)\n                    return true;\n                else\
    \ if (l2[i] + l2[j] + l2[k] < 0)\n                    j += 1;\n              \
    \  else\n                    k -= 1;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n        for (int\
    \ i = 0; i < sorted.length - 2; i++)\n        {\n            if (sorted[i] + sorted[i\
    \ + 1] + sorted[i + 2] == 0)\n            {\n                return true;\n  \
    \          }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] l2\
    \ = l.dup;\n        l2.sort;\n        for (int i = 0; i < l2.length; i++)\n  \
    \      {\n            for (int j = i + 1; j < l2.length; j++)\n            {\n\
    \                for (int k = j + 1; k < l2.length; k++)\n                {\n\
    \                    if (l2[i] + l2[j] + l2[k] == 0)\n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] sorted\
    \ = l.sort();\n        foreach (long i; sorted)\n        {\n            long[]\
    \ temp = sorted.dup;\n            temp.remove(i);\n            if (two_sum_to_zero(temp,\
    \ -i))\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        foreach (i; 0 .. l.length)\n       \
    \ {\n            foreach (j; i + 1 .. l.length)\n            {\n             \
    \   foreach (k; j + 1 .. l.length)\n                {\n                    if\
    \ (l[i] + l[j] + l[k] == 0)\n                    {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
