name: HumanEval_40_triples_sum_to_zero
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes\
  \ a list of integers as an input.\n    it returns True if there are three distinct\
  \ elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1L,\
  \ 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n\
  \    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L,\
  \ 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n\
  \    \n*/\nbool triples_sum_to_zero(long[] l) \n"
tests: "unittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L,\
  \ 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n\
  \    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L,\
  \ 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L,\
  \ 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L,\
  \ 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n\
  }\nvoid main(){}"
completions: ["{\n    if (l.length < 3)\n    {\n        return false;\n    }\n   \
    \ else\n    {\n        long[] l2 = l.dup;\n        l2.sort;\n        foreach (i;\
    \ 0 .. l2.length - 2)\n        {\n            long a = l2[i];\n            long\
    \ b = l2[i + 1];\n            long c = -(a + b);\n            if (l2.canFind(c))\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.sort();\n        long[] neg = sorted.filter!(x\
    \ => x < 0);\n        long[] pos = sorted.filter!(x => x > 0);\n        foreach\
    \ (i; 0 .. neg.length)\n        {\n            foreach (j; 0 .. pos.length)\n\
    \            {\n                if (neg[i] + pos[j] == 0)\n                  \
    \  return true;\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n\
    \        long[] sorted = l.dup.sort;\n        for (int i = 0; i < sorted.length\
    \ - 2; i++)\n        {\n            if (sorted[i] + sorted[i + 1] + sorted[i +\
    \ 2] == 0)\n            {\n                return true;\n            }\n     \
    \   }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n  \
    \      return false;\n    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        long[] negatives = sorted.filter!(x => x < 0)();\n        long[] positives\
    \ = sorted.filter!(x => x > 0)();\n        long[] zeros = sorted.filter!(x =>\
    \ x == 0)();\n        if (zeros.length >= 3)\n        {\n            return true;\n\
    \        }\n        else\n        {\n            foreach (long n; negatives)\n\
    \            {\n                foreach (long p; positives)\n                {\n\
    \                    if (n + p == 0)\n                    {\n                \
    \        return true;\n                    }\n                }\n            }\n\
    \            return false;\n        }\n    }\n}", "{\n    if (l.length < 3)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        foreach (i; 0 ..\
    \ l.length - 2)\n        {\n            foreach (j; i + 1 .. l.length - 1)\n \
    \           {\n                foreach (k; j + 1 .. l.length)\n              \
    \  {\n                    if (l[i] + l[j] + l[k] == 0)\n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        long[] neg = sorted.filter!(x => x < 0);\n        long[] pos = sorted.filter!(x\
    \ => x > 0);\n        if (neg.length < 2 || pos.length < 2)\n            return\
    \ false;\n        else\n        {\n            foreach (i; 0 .. neg.length - 2)\n\
    \            {\n                foreach (j; i + 1 .. neg.length - 1)\n       \
    \         {\n                    foreach (k; 0 .. pos.length - 1)\n          \
    \          {\n                        if (neg[i] + neg[j] + pos[k] == 0)\n   \
    \                         return true;\n                    }\n              \
    \  }\n            }\n            return false;\n        }\n    }\n}", "{\n   \
    \ if (l.length < 3)\n        return false;\n    else\n    {\n        sort(l);\n\
    \        foreach (i; 0 .. l.length - 2)\n        {\n            long a = l[i];\n\
    \            long j = i + 1;\n            long k = l.length - 1;\n           \
    \ while (j < k)\n            {\n                long b = l[j];\n             \
    \   long c = l[k];\n                if (a + b + c == 0)\n                    return\
    \ true;\n                else if (a + b + c < 0)\n                    j++;\n \
    \               else\n                    k--;\n            }\n        }\n   \
    \     return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return\
    \ false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1\
    \ .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n  \
    \          {\n                if (l[i] + l[j] + l[k] == 0)\n                 \
    \   return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = sort(l);\n        foreach (long i; 0 .. sorted.length - 2)\n      \
    \  {\n            long j = i + 1;\n            long k = sorted.length - 1;\n \
    \           while (j < k)\n            {\n                long sum = sorted[i]\
    \ + sorted[j] + sorted[k];\n                if (sum == 0)\n                  \
    \  return true;\n                else if (sum < 0)\n                    j++;\n\
    \                else\n                    k--;\n            }\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3) return false;\n   \
    \ auto s = sort(l);\n    foreach (i; 0 .. s.length - 2)\n    {\n        auto j\
    \ = i + 1;\n        auto k = s.length - 1;\n        while (j < k)\n        {\n\
    \            auto sum = s[i] + s[j] + s[k];\n            if (sum == 0) return\
    \ true;\n            if (sum < 0) j += 1;\n            else k -= 1;\n        }\n\
    \    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] sorted = l.sort();\n        for\
    \ (int i = 0; i < sorted.length - 2; i++)\n        {\n            long a = sorted[i];\n\
    \            long b = sorted[i + 1];\n            long c = sorted[i + 2];\n  \
    \          if (a + b + c == 0)\n            {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0) return true;\n  \
    \          }\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        foreach (i; 0 .. sorted.length - 2)\n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.canFind(c))\n                return true;\n    \
    \    }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n    \
    \    return false;\n    else\n    {\n        long[] sorted_l = sort(l);\n    \
    \    int i = 0;\n        int j = 1;\n        int k = sorted_l.length - 1;\n  \
    \      while (i < j && j < k)\n        {\n            long sum = sorted_l[i] +\
    \ sorted_l[j] + sorted_l[k];\n            if (sum == 0)\n                return\
    \ true;\n            else if (sum < 0)\n                j++;\n            else\n\
    \                k--;\n        }\n        return false;\n    }\n}", "{\n    long[]\
    \ sorted = l.dup.sort;\n    foreach(i; 0..sorted.length)\n    {\n        long\
    \ a = sorted[i];\n        long j = i + 1;\n        long k = sorted.length - 1;\n\
    \        while(j < k)\n        {\n            long b = sorted[j];\n          \
    \  long c = sorted[k];\n            if(a + b + c == 0)\n            {\n      \
    \          return true;\n            }\n            else if(a + b + c < 0)\n \
    \           {\n                j += 1;\n            }\n            else\n    \
    \        {\n                k -= 1;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n   \
    \ {\n        long[] l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length\
    \ - 2)\n        {\n            long j = i + 1;\n            long k = l2.length\
    \ - 1;\n            while (j < k)\n            {\n                if (l2[i] +\
    \ l2[j] + l2[k] == 0)\n                    return true;\n                else\
    \ if (l2[i] + l2[j] + l2[k] < 0)\n                    j += 1;\n              \
    \  else\n                    k -= 1;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n        for (int\
    \ i = 0; i < sorted.length - 2; i++)\n        {\n            if (sorted[i] + sorted[i\
    \ + 1] + sorted[i + 2] == 0)\n            {\n                return true;\n  \
    \          }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] l2\
    \ = l.dup;\n        l2.sort;\n        for (int i = 0; i < l2.length; i++)\n  \
    \      {\n            for (int j = i + 1; j < l2.length; j++)\n            {\n\
    \                for (int k = j + 1; k < l2.length; k++)\n                {\n\
    \                    if (l2[i] + l2[j] + l2[k] == 0)\n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] sorted\
    \ = l.sort();\n        foreach (long i; sorted)\n        {\n            long[]\
    \ temp = sorted.dup;\n            temp.remove(i);\n            if (two_sum_to_zero(temp,\
    \ -i))\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        foreach (i; 0 .. l.length)\n       \
    \ {\n            foreach (j; i + 1 .. l.length)\n            {\n             \
    \   foreach (k; j + 1 .. l.length)\n                {\n                    if\
    \ (l[i] + l[j] + l[k] == 0)\n                    {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else \n    {\n        l = l.sort();\n        for (int i = 0; i < l.length\
    \ - 2; i++)\n        {\n            int j = i + 1;\n            int k = l.length\
    \ - 1;\n            while (j < k)\n            {\n                if (l[i] + l[j]\
    \ + l[k] == 0)\n                    return true;\n                else if (l[i]\
    \ + l[j] + l[k] < 0)\n                    j++;\n                else\n       \
    \             k--;\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n\
    \        long[] sorted = l.sort();\n        for (int i = 0; i < sorted.length\
    \ - 2; i++)\n        {\n            if (sorted[i] + sorted[i + 1] + sorted[i +\
    \ 2] == 0)\n            {\n                return true;\n            }\n     \
    \   }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n  \
    \      return false;\n    }\n    else\n    {\n        foreach (i; 0 .. l.length\
    \ - 2)\n        {\n            foreach (j; i + 1 .. l.length - 1)\n          \
    \  {\n                foreach (k; j + 1 .. l.length)\n                {\n    \
    \                if (l[i] + l[j] + l[k] == 0)\n                    {\n       \
    \                 return true;\n                    }\n                }\n   \
    \         }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted_l = l.sort();\n        long[] negative_l = sorted_l.filter!(x => x <\
    \ 0);\n        long[] positive_l = sorted_l.filter!(x => x > 0);\n        long[]\
    \ zero_l = sorted_l.filter!(x => x == 0);\n        if (zero_l.length >= 3) \n\
    \        {\n            return true;\n        }\n        else \n        {\n  \
    \          foreach (long x; negative_l) \n            {\n                foreach\
    \ (long y; positive_l) \n                {\n                    if (x + y == 0)\
    \ \n                    {\n                        return true;\n            \
    \        }\n                }\n            }\n            return false;\n    \
    \    }\n    }\n}\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        long[] sorted = l.dup.sort;\n        for (int\
    \ i = 0; i < sorted.length; i++) \n        {\n            long a = sorted[i];\n\
    \            int j = i + 1;\n            int k = sorted.length - 1;\n        \
    \    while (j < k) \n            {\n                long b = sorted[j];\n    \
    \            long c = sorted[k];\n                if (a + b + c == 0) \n     \
    \           {\n                    return true;\n                }\n         \
    \       else if (a + b + c < 0) \n                {\n                    j +=\
    \ 1;\n                }\n                else \n                {\n          \
    \          k -= 1;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        foreach (i; 0 .. l.length)\n        {\n     \
    \       foreach (j; i+1 .. l.length)\n            {\n                foreach (k;\
    \ j+1 .. l.length)\n                {\n                    if (l[i] + l[j] + l[k]\
    \ == 0)\n                    {\n                        return true;\n       \
    \             }\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n \
    \   else\n    {\n        foreach (i; 0 .. l.length - 2)\n        {\n         \
    \   foreach (j; i + 1 .. l.length - 1)\n            {\n                foreach\
    \ (k; j + 1 .. l.length)\n                {\n                    if (l[i] + l[j]\
    \ + l[k] == 0)\n                    {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n  \
    \  else\n    {\n        long[] sorted_l = l.sort();\n        for (int i = 0; i\
    \ < sorted_l.length - 2; i++)\n        {\n            for (int j = i + 1; j <\
    \ sorted_l.length - 1; j++)\n            {\n                for (int k = j + 1;\
    \ k < sorted_l.length; k++)\n                {\n                    if (sorted_l[i]\
    \ + sorted_l[j] + sorted_l[k] == 0)\n                        return true;\n  \
    \              }\n            }\n        }\n        return false;\n    }\n}",
  "{\n    // TODO: implement this function\n    return false;\n}", "{\n    long[]\
    \ sorted = l.dup.sort;\n    for (int i = 0; i < sorted.length - 2; i++)\n    {\n\
    \        long a = sorted[i];\n        long b = sorted[i + 1];\n        long c\
    \ = sorted[i + 2];\n        if (a + b + c == 0)\n        {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n\
    \        return false;\n    else\n    {\n        foreach (i; 0 .. l.length)\n\
    \        {\n            foreach (j; i+1 .. l.length)\n            {\n        \
    \        foreach (k; j+1 .. l.length)\n                {\n                   \
    \ if (l[i] + l[j] + l[k] == 0)\n                        return true;\n       \
    \         }\n            }\n        }\n        return false;\n    }\n}\n/*", "{\n\
    \    if (l.length < 3)\n        return false;\n    auto s = l.sort();\n    foreach\
    \ (i; 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto k = s.length\
    \ - 1;\n        while (j < k)\n        {\n            if (s[i] + s[j] + s[k] ==\
    \ 0)\n                return true;\n            else if (s[i] + s[j] + s[k] <\
    \ 0)\n                j++;\n            else\n                k--;\n        }\n\
    \    }\n    return false;\n}", "{\n    int n = l.length;\n    if (n < 3) \n  \
    \  {\n        return false;\n    }\n    else \n    {\n        long[] sorted_l\
    \ = sort(l);\n        for (int i = 0; i < n - 2; i++) \n        {\n          \
    \  if (sorted_l[i] + sorted_l[i + 1] + sorted_l[i + 2] == 0) \n            {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n \
    \   else\n    {\n        foreach (i; 0 .. l.length)\n        {\n            foreach\
    \ (j; i + 1 .. l.length)\n            {\n                foreach (k; j + 1 ..\
    \ l.length)\n                {\n                    if (l[i] + l[j] + l[k] ==\
    \ 0)\n                    {\n                        return true;\n          \
    \          }\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted_l = l.sort();\n        foreach (long\
    \ i; sorted_l) \n        {\n            long[] rest = sorted_l[1..$];\n      \
    \      if (two_sum_to_zero(rest, -i)) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n     \
    \   long[] l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length -\
    \ 2)\n        {\n            foreach (j; i + 1 .. l2.length - 1)\n           \
    \ {\n                long sum = l2[i] + l2[j];\n                long target =\
    \ -sum;\n                if (l2.binarySearch(target) != -1)\n                {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \        return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n       \
    \ return false;\n    }\n    else \n    {\n        long[] sorted = l.sort();\n\
    \        foreach (long i; sorted) \n        {\n            long j = i + 1;\n \
    \           long k = sorted.length - 1;\n            while (j < k) \n        \
    \    {\n                if (sorted[j] + sorted[k] + i == 0) \n               \
    \ {\n                    return true;\n                }\n                else\
    \ if (sorted[j] + sorted[k] + i < 0) \n                {\n                   \
    \ j++;\n                }\n                else \n                {\n        \
    \            k--;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    int n = l.length;\n    if (n < 3)\n        return\
    \ false;\n    else\n    {\n        sort(l);\n        for (int i = 0; i < n - 2;\
    \ i++)\n        {\n            int j = i + 1;\n            int k = n - 1;\n  \
    \          while (j < k)\n            {\n                if (l[i] + l[j] + l[k]\
    \ == 0)\n                    return true;\n                else if (l[i] + l[j]\
    \ + l[k] < 0)\n                    j++;\n                else\n              \
    \      k--;\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c))\n              \
    \  return true;\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted_l = sort(l);\n        foreach (long i; sorted_l) \n        {\n      \
    \      foreach (long j; sorted_l) \n            {\n                foreach (long\
    \ k; sorted_l) \n                {\n                    if (i != j && j != k &&\
    \ i != k) \n                    {\n                        if (i + j + k == 0)\
    \ \n                        {\n                            return true;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        return false;\n    }\n}", "{\n    if (l.length < 3) \n\
    \    {\n        return false;\n    }\n    else \n    {\n        long[] sorted_l\
    \ = l.sort();\n        foreach (long i; sorted_l) \n        {\n            long[]\
    \ rest = sorted_l[1..$];\n            if (two_sum_to_zero(rest, -i)) \n      \
    \      {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        long[] sorted = l.sort();\n        for (int\
    \ i = 0; i < sorted.length - 2; i++) \n        {\n            if (sorted[i] +\
    \ sorted[i + 1] + sorted[i + 2] == 0) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n     \
    \   long[] sorted = l.sort();\n        long[] neg = sorted.filter!(x => x < 0);\n\
    \        long[] pos = sorted.filter!(x => x > 0);\n        for (int i = 0; i <\
    \ neg.length; i++)\n        {\n            for (int j = 0; j < pos.length; j++)\n\
    \            {\n                if (neg[i] + pos[j] == 0)\n                {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \        return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted_l = l.sort();\n        foreach (long i;\
    \ sorted_l)\n        {\n            long[] rest = sorted_l[1..$];\n          \
    \  if (two_sum_to_zero(rest, -i))\n                return true;\n        }\n \
    \       return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return\
    \ false;\n    }\n    else \n    {\n        long[] sorted_l = l.sort();\n     \
    \   foreach (long i; sorted_l) \n        {\n            foreach (long j; sorted_l)\
    \ \n            {\n                foreach (long k; sorted_l) \n             \
    \   {\n                    if (i != j && j != k && i != k) \n                \
    \    {\n                        if (i + j + k == 0) \n                       \
    \ {\n                            return true;\n                        }\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long[] sorted = l.sort();\n        long[] negs\
    \ = sorted.filter!(x => x < 0);\n        long[] poss = sorted.filter!(x => x >\
    \ 0);\n        long[] zeros = sorted.filter!(x => x == 0);\n        if (zeros.length\
    \ >= 3)\n        {\n            return true;\n        }\n        else\n      \
    \  {\n            foreach (long neg; negs)\n            {\n                foreach\
    \ (long pos; poss)\n                {\n                    if (neg + pos == 0)\n\
    \                    {\n                        return true;\n               \
    \     }\n                }\n            }\n            return false;\n       \
    \ }\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n \
    \   {\n        long[] sorted = l.sort();\n        long[] negs = sorted.filter!(x\
    \ => x < 0);\n        long[] poss = sorted.filter!(x => x > 0);\n        long[]\
    \ zeros = sorted.filter!(x => x == 0);\n        if (zeros.length >= 3)\n     \
    \       return true;\n        else\n        {\n            foreach (long n; negs)\n\
    \            {\n                foreach (long p; poss)\n                {\n  \
    \                  if (negs.canFind(n + p))\n                        return true;\n\
    \                }\n            }\n            return false;\n        }\n    }\n\
    }", "{\n    bool result = false;\n    foreach(i; 0 .. l.length)\n    {\n     \
    \   foreach(j; i+1 .. l.length)\n        {\n            foreach(k; j+1 .. l.length)\n\
    \            {\n                if(l[i] + l[j] + l[k] == 0)\n                {\n\
    \                    result = true;\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        long[] sorted_l = sort(l);\n        foreach\
    \ (i; 0 .. sorted_l.length - 2)\n        {\n            long a = sorted_l[i];\n\
    \            long b = sorted_l[i + 1];\n            long c = -(a + b);\n     \
    \       if (binarySearch(sorted_l, i + 2, sorted_l.length, c))\n             \
    \   return true;\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    int n = l.length;\n    if (n < 3) return false;\n    int\
    \ i = 0;\n    int j = 1;\n    int k = 2;\n    while (i < n) {\n        while (j\
    \ < n) {\n            while (k < n) {\n                if (l[i] + l[j] + l[k]\
    \ == 0) return true;\n                k++;\n            }\n            j++;\n\
    \            k = j + 1;\n        }\n        i++;\n        j = i + 1;\n       \
    \ k = j + 1;\n    }\n    return false;\n}", "{\n    int n = l.length;\n    if\
    \ (n < 3)\n        return false;\n    else\n    {\n        sort(l);\n        for\
    \ (int i = 0; i < n; i++)\n        {\n            for (int j = i + 1; j < n; j++)\n\
    \            {\n                for (int k = j + 1; k < n; k++)\n            \
    \    {\n                    if (l[i] + l[j] + l[k] == 0)\n                   \
    \     return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] sorted = l.sort();\n        for (int i = 0; i < sorted.length;\
    \ i++)\n        {\n            for (int j = i + 1; j < sorted.length; j++)\n \
    \           {\n                for (int k = j + 1; k < sorted.length; k++)\n \
    \               {\n                    if (sorted[i] + sorted[j] + sorted[k] ==\
    \ 0)\n                        return true;\n                }\n            }\n\
    \        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n\
    \        return false;\n    foreach (i; 0 .. l.length)\n    {\n        foreach\
    \ (j; i + 1 .. l.length)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}\n/*",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = l.sort();\n        foreach (long i; 0..sorted.length-2)\
    \ \n        {\n            long j = i + 1;\n            long k = sorted.length\
    \ - 1;\n            while (j < k) \n            {\n                if (sorted[i]\
    \ + sorted[j] + sorted[k] == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (sorted[i] + sorted[j] + sorted[k]\
    \ < 0) \n                {\n                    j += 1;\n                }\n \
    \               else \n                {\n                    k -= 1;\n      \
    \          }\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    long[] sorted = sort(l);\n    foreach(i; 0..sorted.length-2)\n    {\n   \
    \     long a = sorted[i];\n        long j = i+1;\n        long k = sorted.length-1;\n\
    \        while(j < k)\n        {\n            long b = sorted[j];\n          \
    \  long c = sorted[k];\n            if(a + b + c == 0)\n            {\n      \
    \          return true;\n            }\n            else if(a + b + c < 0)\n \
    \           {\n                j++;\n            }\n            else\n       \
    \     {\n                k--;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else\
    \ \n    {\n        long[] l_sorted = l.sort();\n        foreach (long i; 0 ..\
    \ l_sorted.length) \n        {\n            long[] l_sorted_without_i = l_sorted[0\
    \ .. i] ~ l_sorted[i + 1 .. $];\n            if (two_sum_to_zero(l_sorted_without_i,\
    \ -l_sorted[i])) \n            {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    \
    \    return false;\n    else\n    {\n        long[] sorted_l = l.sort;\n     \
    \   foreach (i; 0 .. sorted_l.length - 2)\n        {\n            long a = sorted_l[i];\n\
    \            long b = sorted_l[i + 1];\n            long c = -(a + b);\n     \
    \       if (sorted_l.canFind(c))\n                return true;\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort!((a, b) => a < b);\n        foreach (i; 0 .. sorted.length -\
    \ 2) \n        {\n            long a = sorted[i];\n            long b = sorted[i\
    \ + 1];\n            long c = -(a + b);\n            if (sorted.binarySearch(c)\
    \ != -1) \n            {\n                return true;\n            }\n      \
    \  }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        long[] sorted_l = l.sort();\n        foreach\
    \ (i; 0 .. sorted_l.length - 2)\n        {\n            long a = sorted_l[i];\n\
    \            long b = sorted_l[i + 1];\n            long c = -(a + b);\n     \
    \       if (sorted_l.canFind(c))\n                return true;\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.sort();\n        for (int i = 0; i\
    \ < sorted.length - 2; i++)\n        {\n            long a = sorted[i];\n    \
    \        long b = sorted[i + 1];\n            long c = sorted[i + 2];\n      \
    \      if (a + b + c == 0)\n                return true;\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        long[] sorted = l.sort();\n        for (int\
    \ i = 0; i < sorted.length - 2; i++) \n        {\n            if (sorted[i] +\
    \ sorted[i + 1] + sorted[i + 2] == 0) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}", "{\n    //\
    \ YOUR CODE HERE\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n \
    \       return false;\n    }\n    else \n    {\n        long[] sorted = sort(l);\n\
    \        foreach (long i; sorted) \n        {\n            long[] sub = sorted[1\
    \ .. $];\n            if (two_sum_to_zero(sub, -i)) \n            {\n        \
    \        return true;\n            }\n        }\n        return false;\n    }\n\
    }\n/*", "{\n    // YOUR CODE HERE\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.dup.sort;\n        long[] negs = sorted.filter!(x => x < 0).dup;\n\
    \        long[] poss = sorted.filter!(x => x >= 0).dup;\n        long[] negs_reversed\
    \ = negs.dup.reverse;\n        long[] poss_reversed = poss.dup.reverse;\n    \
    \    long[] negs_reversed_with_zero = negs_reversed.dup.insert(0, 0);\n      \
    \  long[] poss_reversed_with_zero = poss_reversed.dup.insert(0, 0);\n        long[]\
    \ negs_reversed_with_zero_and_neg_inf = negs_reversed_with_zero.dup.insert(0,\
    \ -inf);\n        long[] poss_reversed_with_zero_and_pos_inf = poss_reversed_with_zero.dup.insert(0,\
    \ inf);\n        long[] negs_reversed_with_zero_and_neg_inf_and_pos_inf = negs_reversed_with_zero_and_neg_inf.dup.insert(0,\
    \ inf);\n        long[] poss_reversed_with_zero_and_pos_inf_and_neg_inf = poss_reversed_with_zero_and_pos_inf.dup.insert(0,\
    \ -inf);\n        long[] negs_reversed_with_zero_and_neg_inf_and_pos_inf_and_neg_inf\
    \ = negs_reversed_with_zero_and_neg_inf_and_pos_inf.dup.insert(0, -inf);\n   \
    \     long[] poss_reversed_with_zero_and_pos_inf_and_neg_inf_and_pos_inf = poss_reversed_with_zero_and_pos_inf_and_neg_inf.dup.insert(0,\
    \ inf);\n        long[] negs_reversed_with_zero_and", "{\n    if (l.length < 3)\n\
    \        return false;\n    else\n    {\n        long[] sorted = l.sort();\n \
    \       long[] negs = sorted.filter!(x => x < 0);\n        long[] poss = sorted.filter!(x\
    \ => x > 0);\n        foreach (p; poss)\n        {\n            foreach (n; negs)\n\
    \            {\n                if (sorted.canFind(p + n))\n                 \
    \   return true;\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted_l = l.sort();\n        for (int i = 0; i < sorted_l.length - 2; i++)\n\
    \        {\n            if (sorted_l[i] + sorted_l[i + 1] + sorted_l[i + 2] ==\
    \ 0)\n                return true;\n        }\n        return false;\n    }\n\
    }\n/*", "{\n    int n = l.length;\n    if (n < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        long[] l_sorted = l.sort();\n        for (int\
    \ i = 0; i < n - 2; i++) \n        {\n            for (int j = i + 1; j < n -\
    \ 1; j++) \n            {\n                for (int k = j + 1; k < n; k++) \n\
    \                {\n                    if (l_sorted[i] + l_sorted[j] + l_sorted[k]\
    \ == 0) \n                    {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] sorted = l.sort();\n        long[] negs = sorted.filter!(x\
    \ => x < 0);\n        long[] pos = sorted.filter!(x => x > 0);\n        foreach\
    \ (n; negs)\n        {\n            foreach (p; pos)\n            {\n        \
    \        if (negs.canFind(0 - n - p))\n                    return true;\n    \
    \        }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    l.sort();\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        int j = i + 1;\n        int k = l.length - 1;\n       \
    \ while (j < k)\n        {\n            if (l[i] + l[j] + l[k] == 0)\n       \
    \         return true;\n            else if (l[i] + l[j] + l[k] < 0)\n       \
    \         j++;\n            else\n                k--;\n        }\n    }\n   \
    \ return false;\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] sorted = l.sort();\n        long[] negs = sorted.filter!(x\
    \ => x < 0)();\n        long[] pos = sorted.filter!(x => x > 0)();\n        foreach\
    \ (i; 0 .. negs.length)\n        {\n            foreach (j; 0 .. pos.length)\n\
    \            {\n                if (negs[i] + pos[j] == 0)\n                 \
    \   return true;\n            }\n        }\n        return false;\n    }\n}\n\
    /*", "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n     \
    \   long[] sorted_l = l.sort();\n        foreach (i; 0 .. sorted_l.length - 2)\n\
    \        {\n            long a = sorted_l[i];\n            long b = sorted_l[i\
    \ + 1];\n            long c = -(a + b);\n            if (sorted_l.canFind(c))\n\
    \                return true;\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c))\n              \
    \  return true;\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.sort();\n\
    \        for (int i = 0; i < sorted.length - 2; i++)\n        {\n            if\
    \ (sorted[i] + sorted[i + 1] + sorted[i + 2] == 0)\n                return true;\n\
    \        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        foreach (i; 0 .. l.length)\n\
    \        {\n            foreach (j; i + 1 .. l.length)\n            {\n      \
    \          foreach (k; j + 1 .. l.length)\n                {\n               \
    \     if (l[i] + l[j] + l[k] == 0)\n                    {\n                  \
    \      return true;\n                    }\n                }\n            }\n\
    \        }\n        return false;\n    }\n}", "{\n    int n = l.length;\n    if\
    \ (n < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n    \
    \            if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n\
    \        foreach (i; 0 .. l.length)\n        {\n            foreach (j; i + 1\
    \ .. l.length)\n            {\n                foreach (k; j + 1 .. l.length)\n\
    \                {\n                    if (l[i] + l[j] + l[k] == 0)\n       \
    \             {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = l.sort();\n        for (int i = 0; i < sorted.length\
    \ - 2; i++) \n        {\n            for (int j = i + 1; j < sorted.length - 1;\
    \ j++) \n            {\n                for (int k = j + 1; k < sorted.length;\
    \ k++) \n                {\n                    if (sorted[i] + sorted[j] + sorted[k]\
    \ == 0) \n                    {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long[] l2 = l.dup;\n        l2.sort;\n      \
    \  for (int i = 0; i < l2.length; i++)\n        {\n            for (int j = i\
    \ + 1; j < l2.length; j++)\n            {\n                for (int k = j + 1;\
    \ k < l2.length; k++)\n                {\n                    if (l2[i] + l2[j]\
    \ + l2[k] == 0)\n                    {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n        foreach\
    \ (i; 0 .. sorted.length - 2)\n        {\n            long a = sorted[i];\n  \
    \          long b = sorted[i + 1];\n            long c = -(a + b);\n         \
    \   if (sorted.binarySearch(c) != -1)\n            {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] sorted\
    \ = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2)\n        {\n    \
    \        long a = sorted[i];\n            long b = sorted[i + 1];\n          \
    \  long c = -(a + b);\n            if (sorted.canFind(c))\n            {\n   \
    \             return true;\n            }\n        }\n        return false;\n\
    \    }\n}\n/*", "{\n    // YOUR CODE HERE\n    return false;\n}\n/*\n    triples_sum_to_zero_2\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length\
    \ - 2) \n        {\n            long a = l2[i];\n            long b = l2[i + 1];\n\
    \            long c = -(a + b);\n            if (l2.binarySearch(c) != -1) \n\
    \            {\n                return true;\n            }\n        }\n     \
    \   return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.dup.sort;\n        long[] neg = sorted.filter!(x => x < 0);\n   \
    \     long[] pos = sorted.filter!(x => x > 0);\n        long[] zeros = sorted.filter!(x\
    \ => x == 0);\n        if (zeros.length >= 3) \n        {\n            return\
    \ true;\n        }\n        else \n        {\n            foreach (i; 0 .. neg.length)\
    \ \n            {\n                foreach (j; 0 .. pos.length) \n           \
    \     {\n                    if (neg[i] + pos[j] == 0) \n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n            return false;\n        }\n    }\n}", "{\n    if\
    \ (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n   \
    \     long[] sorted = l.dup.sort;\n        long[] negatives = sorted.filter!(x\
    \ => x < 0);\n        long[] positives = sorted.filter!(x => x > 0);\n       \
    \ foreach (long n; negatives) \n        {\n            foreach (long p; positives)\
    \ \n            {\n                if (n + p == 0) \n                {\n     \
    \               return true;\n                }\n            }\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n      \
    \  long[] neg = sorted.filter!(x => x < 0);\n        long[] pos = sorted.filter!(x\
    \ => x > 0);\n        foreach (i; 0 .. neg.length)\n        {\n            foreach\
    \ (j; 0 .. pos.length)\n            {\n                if (neg[i] + pos[j] ==\
    \ 0)\n                {\n                    return true;\n                }\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    // TODO:\
    \ implement this function\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    else\n    {\n        long[] sorted = l.sort();\n \
    \       foreach (long i; sorted)\n        {\n            long[] sub = sorted[1..$];\n\
    \            if (two_sum_to_zero(sub, -i))\n                return true;\n   \
    \     }\n        return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n\
    \        return false;\n    }\n    else \n    {\n        long[] sorted = l.sort();\n\
    \        for (int i = 0; i < sorted.length - 2; i++) \n        {\n           \
    \ long a = sorted[i];\n            long b = sorted[i + 1];\n            long c\
    \ = sorted[i + 2];\n            if (a + b + c == 0) \n            {\n        \
    \        return true;\n            }\n        }\n        return false;\n    }\n\
    }\n/*", "{\n    bool result = false;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n          \
    \  for (int k = j + 1; k < l.length; k++)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n\
    \        long[] l2 = l.dup;\n        l2.sort;\n        for (int i = 0; i < l2.length\
    \ - 2; i++)\n        {\n            if (l2[i] + l2[i + 1] + l2[i + 2] == 0)\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] l2 = l.sort();\n        long[]\
    \ l3 = l2.dup;\n        long[] l4 = l3.dup;\n        long[] l5 = l4.dup;\n   \
    \     long[] l6 = l5.dup;\n        long[] l7 = l6.dup;\n        long[] l8 = l7.dup;\n\
    \        long[] l9 = l8.dup;\n        long[] l10 = l9.dup;\n        long[] l11\
    \ = l10.dup;\n        long[] l12 = l11.dup;\n        long[] l13 = l12.dup;\n \
    \       long[] l14 = l13.dup;\n        long[] l15 = l14.dup;\n        long[] l16\
    \ = l15.dup;\n        long[] l17 = l16.dup;\n        long[] l18 = l17.dup;\n \
    \       long[] l19 = l18.dup;\n        long[] l20 = l19.dup;\n        long[] l21\
    \ = l20.dup;\n        long[] l22 = l21.dup;\n        long[] l23 = l22.dup;\n \
    \       long[] l24 = l23.dup;\n        long[] l25 = l24.dup;\n        long[] l26\
    \ = l25.dup;\n        long[] l27 = l26.dup;\n        long[] l28 = l27.dup;\n \
    \       long[] l29 = l28.dup;\n        long[] l30 = l29.dup;\n        long[] l31\
    \ = l30.dup;\n        long[] l32 = l31.dup;\n        long[] l33 = l32.dup;\n \
    \       long[] l34 = l33.dup;\n        long[] l35 = l34.dup;\n        long[] l36\
    \ = l35.dup;\n        long[] l37 = l36.dup;\n        long[] l38 = l37.dup;\n \
    \       long[]", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] sorted = sort(l);\n        foreach (i; 0 .. sorted.length\
    \ - 2)\n        {\n            long a = sorted[i];\n            long b = sorted[i\
    \ + 1];\n            long c = -(a + b);\n            if (binarySearch(sorted,\
    \ c) != -1)\n                return true;\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n \
    \   else\n    {\n        long[] sorted = l.sort();\n        long[] negative =\
    \ sorted.filter!(x => x < 0);\n        long[] positive = sorted.filter!(x => x\
    \ > 0);\n        long[] zero = sorted.filter!(x => x == 0);\n        if (zero.length\
    \ >= 3)\n        {\n            return true;\n        }\n        else\n      \
    \  {\n            foreach (i; 0 .. negative.length)\n            {\n         \
    \       foreach (j; 0 .. positive.length)\n                {\n               \
    \     if (negative[i] + positive[j] == 0)\n                    {\n           \
    \             return true;\n                    }\n                }\n       \
    \     }\n            return false;\n        }\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = sort(l);\n        for (int i = 0; i < sorted.length - 2; i++) \n  \
    \      {\n            long a = sorted[i];\n            int j = i + 1;\n      \
    \      int k = sorted.length - 1;\n            while (j < k) \n            {\n\
    \                long b = sorted[j];\n                long c = sorted[k];\n  \
    \              if (a + b + c == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (a + b + c < 0) \n       \
    \         {\n                    j++;\n                }\n                else\
    \ \n                {\n                    k--;\n                }\n         \
    \   }\n        }\n        return false;\n    }\n}\n/*", "{\n    // YOUR CODE HERE\n\
    \    return false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        l = l.sort();\n        foreach (i; 0 .. l.length\
    \ - 2) \n        {\n            long a = l[i];\n            long j = i + 1;\n\
    \            long k = l.length - 1;\n            while (j < k) \n            {\n\
    \                long b = l[j];\n                long c = l[k];\n            \
    \    if (a + b + c == 0) \n                {\n                    return true;\n\
    \                }\n                else if (a + b + c > 0) \n               \
    \ {\n                    k--;\n                }\n                else \n    \
    \            {\n                    j++;\n                }\n            }\n \
    \       }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n     \
    \   return false;\n    else\n    {\n        long[] sorted = sort(l);\n       \
    \ long[] neg = filter!(a => a < 0)(sorted);\n        long[] pos = filter!(a =>\
    \ a > 0)(sorted);\n        long[] zero = filter!(a => a == 0)(sorted);\n     \
    \   if (zero.length >= 3)\n            return true;\n        else\n        {\n\
    \            foreach (i; 0 .. neg.length)\n            {\n                foreach\
    \ (j; 0 .. pos.length)\n                {\n                    if (neg[i] + pos[j]\
    \ == 0)\n                        return true;\n                }\n           \
    \ }\n            return false;\n        }\n    }\n}", "{\n    if (l.length < 3)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        long[] sorted_l\
    \ = l.dup.sort;\n        long[] negative_l = sorted_l.filter!(x => x < 0);\n \
    \       long[] positive_l = sorted_l.filter!(x => x > 0);\n        long[] zero_l\
    \ = sorted_l.filter!(x => x == 0);\n        if (zero_l.length >= 3)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            foreach\
    \ (long x; negative_l)\n            {\n                foreach (long y; positive_l)\n\
    \                {\n                    if (y > -x)\n                    {\n \
    \                       break;\n                    }\n                    else\
    \ if (negative_l.count!(z => z == -x - y) > 0)\n                    {\n      \
    \                  return true;\n                    }\n                }\n  \
    \          }\n            return false;\n        }\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted_l = l.dup.sort;\n        for (int i = 0; i < sorted_l.length - 2; i++)\
    \ \n        {\n            if (sorted_l[i] + sorted_l[i + 1] + sorted_l[i + 2]\
    \ == 0) \n            {\n                return true;\n            }\n       \
    \ }\n        return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n   \
    \     return false;\n    }\n    else \n    {\n        foreach (i; 0 .. l.length\
    \ - 2) \n        {\n            foreach (j; i + 1 .. l.length - 1) \n        \
    \    {\n                foreach (k; j + 1 .. l.length) \n                {\n \
    \                   if (l[i] + l[j] + l[k] == 0) \n                    {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        for (long i = 0; i < sorted.length - 2; i++) \n\
    \        {\n            long j = i + 1;\n            long k = sorted.length -\
    \ 1;\n            while (j < k) \n            {\n                long sum = sorted[i]\
    \ + sorted[j] + sorted[k];\n                if (sum == 0) \n                {\n\
    \                    return true;\n                }\n                else if\
    \ (sum < 0) \n                {\n                    j++;\n                }\n\
    \                else \n                {\n                    k--;\n        \
    \        }\n            }\n        }\n        return false;\n    }\n}", "{\n \
    \   if (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n\
    \        long[] sorted = l.sort();\n        long[] neg = sorted.filter!(x => x\
    \ < 0)();\n        long[] pos = sorted.filter!(x => x > 0)();\n        long[]\
    \ zeros = sorted.filter!(x => x == 0)();\n        if (zeros.length >= 3) \n  \
    \      {\n            return true;\n        }\n        else \n        {\n    \
    \        foreach (long i; neg) \n            {\n                foreach (long\
    \ j; pos) \n                {\n                    if (neg.canFind(i + j)) \n\
    \                    {\n                        return true;\n               \
    \     }\n                }\n            }\n            return false;\n       \
    \ }\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] l2 = l.dup;\n        l2.sort();\n        foreach (i; 0\
    \ .. l2.length - 2)\n        {\n            long a = l2[i];\n            long\
    \ b = l2[i + 1];\n            long c = -(a + b);\n            if (l2.canFind(c))\n\
    \                return true;\n        }\n        return false;\n    }\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = sort(l);\n        for (int i = 0; i < sorted.length - 2; i++)\n   \
    \     {\n            for (int j = i + 1; j < sorted.length - 1; j++)\n       \
    \     {\n                for (int k = j + 1; k < sorted.length; k++)\n       \
    \         {\n                    if (sorted[i] + sorted[j] + sorted[k] == 0)\n\
    \                        return true;\n                }\n            }\n    \
    \    }\n        return false;\n    }\n}", "{\n    // sort the list\n    sort(l);\n\
    \    // for each element in the list\n    foreach(long i; l)\n    {\n        //\
    \ set the left and right pointers\n        long left = 0;\n        long right\
    \ = l.length - 1;\n        // while the left pointer is less than the right pointer\n\
    \        while(left < right)\n        {\n            // if the sum of the three\
    \ elements is zero\n            if(l[left] + l[right] + i == 0)\n            {\n\
    \                // return true\n                return true;\n            }\n\
    \            // if the sum of the three elements is less than zero\n         \
    \   else if(l[left] + l[right] + i < 0)\n            {\n                // increment\
    \ the left pointer\n                left++;\n            }\n            // if\
    \ the sum of the three elements is greater than zero\n            else\n     \
    \       {\n                // decrement the right pointer\n                right--;\n\
    \            }\n        }\n    }\n    // return false\n    return false;\n}",
  "{\n    // YOUR CODE HERE\n    return false;\n}\n/*\n    triples_sum_to_zero_with_indices\
    \ takes a list of integers as an input.\n    it returns a tuple of three indices\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ null otherwise.", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] sorted = l.sort;\n        long[] neg = sorted.filter!(x\
    \ => x < 0);\n        long[] pos = sorted.filter!(x => x > 0);\n        foreach\
    \ (i; 0 .. neg.length)\n        {\n            foreach (j; 0 .. pos.length)\n\
    \            {\n                if (neg[i] + pos[j] == 0)\n                  \
    \  return true;\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n\
    \        long[] sorted = l.sort();\n        long[] neg = sorted.filter!(x => x\
    \ < 0)();\n        long[] pos = sorted.filter!(x => x > 0)();\n        long[]\
    \ zeros = sorted.filter!(x => x == 0)();\n        if (zeros.length >= 3) \n  \
    \      {\n            return true;\n        }\n        else \n        {\n    \
    \        foreach (i; 0 .. neg.length) \n            {\n                foreach\
    \ (j; 0 .. pos.length) \n                {\n                    if (neg[i] + pos[j]\
    \ == 0) \n                    {\n                        return true;\n      \
    \              }\n                }\n            }\n            return false;\n\
    \        }\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.dup.sort;\n        long[] negs = sorted.filter!(x\
    \ => x < 0).dup;\n        long[] poss = sorted.filter!(x => x >= 0).dup;\n   \
    \     foreach (i; 0 .. negs.length)\n        {\n            foreach (j; 0 .. poss.length)\n\
    \            {\n                if (negs[i] + poss[j] == 0)\n                \
    \    return true;\n                else if (negs[i] + poss[j] > 0)\n         \
    \           break;\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length)\n\
    \    {\n        foreach (j; i + 1 .. l.length)\n        {\n            foreach\
    \ (k; j + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k]\
    \ == 0)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}", "{\n    long[] sorted_l = l.dup.sort;\n    foreach(i; 0..sorted_l.length)\n\
    \    {\n        long a = sorted_l[i];\n        long j = i + 1;\n        long k\
    \ = sorted_l.length - 1;\n        while(j < k)\n        {\n            long b\
    \ = sorted_l[j];\n            long c = sorted_l[k];\n            if(a + b + c\
    \ == 0)\n            {\n                return true;\n            }\n        \
    \    else if(a + b + c < 0)\n            {\n                j += 1;\n        \
    \    }\n            else\n            {\n                k -= 1;\n           \
    \ }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n    \
    \    return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else \n    {\n        long[]\
    \ sorted_l = l.dup.sort;\n        foreach (i; 0 .. sorted_l.length - 2)\n    \
    \    {\n            long a = sorted_l[i];\n            long b = sorted_l[i + 1];\n\
    \            long c = -(a + b);\n            if (sorted_l.binarySearch(c) != -1)\n\
    \                return true;\n        }\n        return false;\n    }\n}", "{\n\
    \    long[] sorted = l.dup.sort;\n    foreach(i; 0..sorted.length-2)\n    {\n\
    \        long a = sorted[i];\n        long j = i+1;\n        long k = sorted.length-1;\n\
    \        while(j < k)\n        {\n            long b = sorted[j];\n          \
    \  long c = sorted[k];\n            if(a + b + c == 0)\n            {\n      \
    \          return true;\n            }\n            else if(a + b + c < 0)\n \
    \           {\n                j++;\n            }\n            else\n       \
    \     {\n                k--;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        long[] sorted = l.sort();\n        for (int\
    \ i = 0; i < sorted.length - 2; i++)\n        {\n            long a = sorted[i];\n\
    \            int j = i + 1;\n            int k = sorted.length - 1;\n        \
    \    while (j < k)\n            {\n                long b = sorted[j];\n     \
    \           long c = sorted[k];\n                if (a + b + c == 0)\n       \
    \             return true;\n                else if (a + b + c < 0)\n        \
    \            j++;\n                else\n                    k--;\n          \
    \  }\n        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    else\n    {\n        long[] sorted = l.sort();\n \
    \       long[] negative = sorted.filter!(x => x < 0);\n        long[] positive\
    \ = sorted.filter!(x => x > 0);\n        long[] zero = sorted.filter!(x => x ==\
    \ 0);\n        if (zero.length >= 3)\n            return true;\n        else\n\
    \        {\n            foreach (n; negative)\n            {\n               \
    \ foreach (p; positive)\n                {\n                    if (negative.canFind(n\
    \ + p))\n                        return true;\n                }\n           \
    \ }\n            return false;\n        }\n    }\n}", "{\n    if (l.length < 3)\
    \ return false;\n    long[] sorted = l.dup.sort;\n    foreach (i; 0 .. sorted.length\
    \ - 2)\n    {\n        long a = sorted[i];\n        long b = sorted[i + 1];\n\
    \        long c = -(a + b);\n        if (sorted.canFind(c)) return true;\n   \
    \ }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.dup.sort;\n        long[] neg = sorted.filter!(x\
    \ => x < 0);\n        long[] pos = sorted.filter!(x => x > 0);\n        foreach\
    \ (i; 0 .. neg.length)\n        {\n            foreach (j; 0 .. pos.length)\n\
    \            {\n                if (neg[i] + pos[j] == 0)\n                  \
    \  return true;\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted_l = l.sort();\n        long[] triple;\n        for (size_t i = 0; i <\
    \ sorted_l.length - 2; i++)\n        {\n            triple = [sorted_l[i], sorted_l[i\
    \ + 1], sorted_l[i + 2]];\n            if (triple.sum == 0)\n                return\
    \ true;\n        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\
    \ \n    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2) \n        {\n   \
    \         long a = sorted[i];\n            long b = sorted[i + 1];\n         \
    \   long c = -(a + b);\n            if (sorted.canFind(c)) \n            {\n \
    \               return true;\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3)\n        return false;\n    l.sort();\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        auto j = i + 1;\n        auto\
    \ k = l.length - 1;\n        while (j < k)\n        {\n            auto sum =\
    \ l[i] + l[j] + l[k];\n            if (sum == 0)\n                return true;\n\
    \            else if (sum < 0)\n                j += 1;\n            else\n  \
    \              k -= 1;\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        long[] negs = sorted.filter!(x => x < 0)();\n        long[] poss = sorted.filter!(x\
    \ => x > 0)();\n        if (negs.length == 0 || poss.length == 0)\n          \
    \  return false;\n        else\n        {\n            foreach (n; negs)\n   \
    \         {\n                foreach (p; poss)\n                {\n          \
    \          if (n + p == 0)\n                        return true;\n           \
    \     }\n            }\n            return false;\n        }\n    }\n}", "{\n\
    \    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n\
    \        long[] sorted_l = sort(l);\n        foreach (i; 0 .. sorted_l.length\
    \ - 2) \n        {\n            long a = sorted_l[i];\n            long b = sorted_l[i\
    \ + 1];\n            long c = -(a + b);\n            if (binarySearch(sorted_l,\
    \ c) != -1) \n            {\n                return true;\n            }\n   \
    \     }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n   \
    \     return false;\n    long[] sorted = l.dup.sort;\n    foreach (i; 0 .. sorted.length\
    \ - 2)\n    {\n        long a = sorted[i];\n        long b = sorted[i + 1];\n\
    \        long c = -(a + b);\n        if (sorted.binarySearch(c) != -1)\n     \
    \       return true;\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    else\n    {\n        long[] sorted = sort(l);\n  \
    \      long[] neg = filter!(x => x < 0)(sorted);\n        long[] pos = filter!(x\
    \ => x > 0)(sorted);\n        long[] zeros = filter!(x => x == 0)(sorted);\n \
    \       if (zeros.length >= 3)\n            return true;\n        else\n     \
    \   {\n            foreach (i; 0 .. neg.length)\n            {\n             \
    \   foreach (j; 0 .. pos.length)\n                {\n                    long\
    \ sum = neg[i] + pos[j];\n                    if (sum == 0)\n                \
    \        return true;\n                    else if (sum > 0)\n               \
    \         break;\n                }\n            }\n            return false;\n\
    \        }\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    foreach (i; 0 .. l.length - 2) \n    {\n        foreach (j; i + 1\
    \ .. l.length - 1) \n        {\n            foreach (k; j + 1 .. l.length) \n\
    \            {\n                if (l[i] + l[j] + l[k] == 0) \n              \
    \  {\n                    return true;\n                }\n            }\n   \
    \     }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else \n    {\n        long[] l_sorted = l.sort();\n        foreach\
    \ (i; 0 .. l_sorted.length - 2)\n        {\n            long a = l_sorted[i];\n\
    \            long b = l_sorted[i + 1];\n            long c = -(a + b);\n     \
    \       if (l_sorted.canFind(c))\n                return true;\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.sort();\n        long[] neg = sorted.takeWhile!(x\
    \ => x < 0);\n        long[] pos = sorted.dropWhile!(x => x < 0);\n        if\
    \ (neg.length == 0 || pos.length == 0)\n            return false;\n        else\n\
    \        {\n            long[] neg_sums = neg.map!(x => x + neg[0]).drop(1);\n\
    \            long[] pos_sums = pos.map!(x => x + pos[0]).drop(1);\n          \
    \  return neg_sums.any!(x => pos_sums.contains(x));\n        }\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = sort(l);\n        for (int i = 0; i < sorted.length - 2; i++)\n   \
    \     {\n            if (sorted[i] + sorted[i + 1] + sorted[i + 2] == 0)\n   \
    \             return true;\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    auto s = l.dup;\n    s.sort;\n\
    \    foreach (i, _; s)\n    {\n        auto j = i + 1;\n        auto k = s.length\
    \ - 1;\n        while (j < k)\n        {\n            auto sum = s[i] + s[j] +\
    \ s[k];\n            if (sum == 0)\n                return true;\n           \
    \ else if (sum < 0)\n                j += 1;\n            else\n             \
    \   k -= 1;\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        l.sort();\n\
    \        foreach (i; 0 .. l.length - 2) \n        {\n            foreach (j; i\
    \ + 1 .. l.length - 1) \n            {\n                foreach (k; j + 1 .. l.length)\
    \ \n                {\n                    if (l[i] + l[j] + l[k] == 0) \n   \
    \                 {\n                        return true;\n                  \
    \  }\n                }\n            }\n        }\n        return false;\n   \
    \ }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n   \
    \ else \n    {\n        long[] sorted = l.dup.sort;\n        long[] negs = sorted.filter!(x\
    \ => x < 0);\n        long[] poss = sorted.filter!(x => x > 0);\n        long[]\
    \ zeros = sorted.filter!(x => x == 0);\n        if (zeros.length >= 3) \n    \
    \    {\n            return true;\n        }\n        else \n        {\n      \
    \      foreach (long neg; negs) \n            {\n                foreach (long\
    \ pos; poss) \n                {\n                    if (neg + pos == 0) \n \
    \                   {\n                        return true;\n                \
    \    }\n                }\n            }\n            return false;\n        }\n\
    \    }\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n \
    \   else\n    {\n        long[] sorted_l = l.dup.sort;\n        foreach (i; 0\
    \ .. sorted_l.length - 2)\n        {\n            long a = sorted_l[i];\n    \
    \        long b = sorted_l[i + 1];\n            long c = -(a + b);\n         \
    \   if (sorted_l.canFind(c))\n            {\n                return true;\n  \
    \          }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] sorted\
    \ = l.sort();\n        long[] negative = sorted.filter!(x => x < 0);\n       \
    \ long[] positive = sorted.filter!(x => x > 0);\n        for (int i = 0; i < negative.length;\
    \ i++)\n        {\n            for (int j = 0; j < positive.length; j++)\n   \
    \         {\n                if (negative[i] + positive[j] == 0)\n           \
    \     {\n                    return true;\n                }\n            }\n\
    \        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        long[] negative = sorted.filter!(x => x < 0).dup;\n        long[] positive\
    \ = sorted.filter!(x => x > 0).dup;\n        long[] zero = sorted.filter!(x =>\
    \ x == 0).dup;\n        if (zero.length >= 3)\n        {\n            return true;\n\
    \        }\n        else\n        {\n            for (long i = 0; i < negative.length;\
    \ i++)\n            {\n                for (long j = 0; j < positive.length; j++)\n\
    \                {\n                    if (negative[i] + positive[j] == 0)\n\
    \                    {\n                        return true;\n               \
    \     }\n                }\n            }\n            return false;\n       \
    \ }\n    }\n}", "{\n    long[] sorted = l.dup.sort;\n    foreach(immutable i;\
    \ 0 .. sorted.length - 2)\n    {\n        long a = sorted[i];\n        long b\
    \ = sorted[i + 1];\n        long c = -(a + b);\n        if(sorted.canFind(c))\n\
    \        {\n            return true;\n        }\n    }\n    return false;\n}",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = l.sort();\n        foreach (long i; 0 .. sorted.length\
    \ - 2) \n        {\n            long j = i + 1;\n            long k = sorted.length\
    \ - 1;\n            while (j < k) \n            {\n                if (sorted[i]\
    \ + sorted[j] + sorted[k] == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (sorted[i] + sorted[j] + sorted[k]\
    \ < 0) \n                {\n                    j += 1;\n                }\n \
    \               else \n                {\n                    k -= 1;\n      \
    \          }\n            }\n        }\n        return false;\n    }\n}\n/*",
  "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n    {\n\
    \        long[] l_sorted = l.sort();\n        long[] l_sorted_neg = l_sorted.map!(x\
    \ => -x);\n        long[] l_sorted_neg_pos = l_sorted_neg.filter!(x => x > 0);\n\
    \        long[] l_sorted_pos = l_sorted.filter!(x => x > 0);\n        long[] l_sorted_neg_neg\
    \ = l_sorted_neg.filter!(x => x < 0);\n        long[] l_sorted_neg_neg_pos = l_sorted_neg_neg.filter!(x\
    \ => x > 0);\n        long[] l_sorted_neg_neg_neg = l_sorted_neg_neg.filter!(x\
    \ => x < 0);\n        long[] l_sorted_pos_pos = l_sorted_pos.filter!(x => x >\
    \ 0);\n        long[] l_sorted_pos_pos_pos = l_sorted_pos_pos.filter!(x => x >\
    \ 0);\n        long[] l_sorted_neg_pos_pos = l_sorted_neg_pos.filter!(x => x >\
    \ 0);\n        long[] l_sorted_neg_neg_pos_pos = l_sorted_neg_neg_pos.filter!(x\
    \ => x > 0);\n        long[] l_sorted_neg_neg_neg_pos = l_sorted_neg_neg_neg.filter!(x\
    \ => x > 0);\n        long[] l_sorted_neg_neg_neg_neg = l_sorted_neg_neg_neg.filter!(x\
    \ => x < 0);\n        long[] l_sorted_neg_neg_neg_neg_pos = l_sorted_neg_neg_neg_neg.filter!(x\
    \ => x > 0);\n        long[] l_sorted_neg_neg_neg_neg_neg = l_sorted_neg_neg_neg_neg.filter!(x\
    \ => x < 0);\n        long[] l_sorted_", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n        long[]\
    \ negs = sorted.filter!(x => x < 0).dup;\n        long[] poss = sorted.filter!(x\
    \ => x >= 0).dup;\n        long[] zeros = sorted.filter!(x => x == 0).dup;\n \
    \       if (zeros.length >= 3)\n            return true;\n        else\n     \
    \   {\n            foreach (i, x; negs)\n            {\n                foreach\
    \ (j, y; poss)\n                {\n                    if (x + y == 0)\n     \
    \                   return true;\n                    else if (x + y < 0)\n  \
    \                      break;\n                }\n            }\n            return\
    \ false;\n        }\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return\
    \ false;\n    }\n    else \n    {\n        long[] sorted_l = l.sort();\n     \
    \   foreach (long i; 0 .. sorted_l.length - 2) \n        {\n            if (sorted_l[i]\
    \ == sorted_l[i + 1]) \n            {\n                continue;\n           \
    \ }\n            long j = i + 1;\n            long k = sorted_l.length - 1;\n\
    \            while (j < k) \n            {\n                if (sorted_l[i] +\
    \ sorted_l[j] + sorted_l[k] == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (sorted_l[i] + sorted_l[j]\
    \ + sorted_l[k] < 0) \n                {\n                    j += 1;\n      \
    \          }\n                else \n                {\n                    k\
    \ -= 1;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.sort();\n        foreach (long i;\
    \ sorted) \n        {\n            long j = i + 1;\n            long k = sorted.length\
    \ - 1;\n            while (j < k) \n            {\n                long sum =\
    \ sorted[i] + sorted[j] + sorted[k];\n                if (sum == 0) \n       \
    \         {\n                    return true;\n                }\n           \
    \     else if (sum < 0) \n                {\n                    j++;\n      \
    \          }\n                else \n                {\n                    k--;\n\
    \                }\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = l.dup.sort;\n        long[] negs = sorted.filter!(x\
    \ => x < 0);\n        long[] poss = sorted.filter!(x => x > 0);\n        if (negs.length\
    \ < 2 || poss.length < 2) \n        {\n            return false;\n        }\n\
    \        else \n        {\n            long[] neg_pairs = negs.combinations!(2).map!(x\
    \ => x[0] + x[1]).array;\n            long[] pos_pairs = poss.combinations!(2).map!(x\
    \ => x[0] + x[1]).array;\n            return neg_pairs.any!(x => -x in pos_pairs);\n\
    \        }\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        sort(l);\n        foreach (i; 0 .. l.length - 2)\n        {\n\
    \            long a = l[i];\n            long k = i + 1;\n            long j =\
    \ l.length - 1;\n            while (k < j)\n            {\n                long\
    \ b = l[k];\n                long c = l[j];\n                if (a + b + c ==\
    \ 0)\n                    return true;\n                else if (a + b + c > 0)\n\
    \                    j -= 1;\n                else\n                    k += 1;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.sort();\n\
    \        long[] negs = sorted.filter!(x => x < 0)();\n        long[] poss = sorted.filter!(x\
    \ => x > 0)();\n        long[] zeros = sorted.filter!(x => x == 0)();\n      \
    \  if (zeros.length >= 3)\n            return true;\n        else\n        {\n\
    \            foreach (long n; negs)\n            {\n                foreach (long\
    \ p; poss)\n                {\n                    if (negs.canFind(n + p))\n\
    \                        return true;\n                }\n            }\n    \
    \        return false;\n        }\n    }\n}", "{\n    if (l.length < 3)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        foreach (i; 0 .. l.length)\n\
    \        {\n            foreach (j; i+1 .. l.length)\n            {\n        \
    \        foreach (k; j+1 .. l.length)\n                {\n                   \
    \ if (l[i] + l[j] + l[k] == 0)\n                    {\n                      \
    \  return true;\n                    }\n                }\n            }\n   \
    \     }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        for (int i = 0; i < sorted.length - 2; i++)\n        {\n            if\
    \ (sorted[i] + sorted[i + 1] + sorted[i + 2] == 0)\n            {\n          \
    \      return true;\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3)\n        return false;\n    else \n    {\n        long[]\
    \ sorted = l.dup.sort;\n        long[] negs = sorted.filter!(x => x < 0);\n  \
    \      long[] pos = sorted.filter!(x => x > 0);\n        foreach (i; 0 .. negs.length)\n\
    \        {\n            foreach (j; 0 .. pos.length)\n            {\n        \
    \        if (negs[i] + pos[j] == 0)\n                    return true;\n      \
    \      }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        for (int i = 0; i < sorted.length - 2; i++) \n \
    \       {\n            if (two_sum_to_zero(sorted[i + 1 .. $], -sorted[i])) \n\
    \            {\n                return true;\n            }\n        }\n     \
    \   return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] sorted = l.sort();\n        foreach\
    \ (i; 0 .. sorted.length - 2)\n        {\n            long a = sorted[i];\n  \
    \          long b = sorted[i + 1];\n            long c = sorted[i + 2];\n    \
    \        if (a + b + c == 0)\n            {\n                return true;\n  \
    \          }\n        }\n        return false;\n    }\n}\n/*", "{\n    // if the\
    \ list is empty or has only one or two elements,\n    // there can't be any triples\
    \ that sum to zero\n    if (l.length < 3)\n        return false;\n    // sort\
    \ the list\n    l.sort();\n    // iterate through the list\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        // set the left and right pointers\n    \
    \    int left = i + 1;\n        int right = l.length - 1;\n        // while the\
    \ left pointer is less than the right pointer\n        while (left < right)\n\
    \        {\n            // if the sum of the three elements is zero, return true\n\
    \            if (l[i] + l[left] + l[right] == 0)\n                return true;\n\
    \            // if the sum is less than zero, move the left pointer to the right\n\
    \            else if (l[i] + l[left] + l[right] < 0)\n                left++;\n\
    \            // if the sum is greater than zero, move the right pointer to the\
    \ left\n            else\n                right--;\n        }\n    }\n    // if\
    \ we get here, there are no triples that sum to zero\n    return false;\n}\n/*",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = sort(l);\n        for (int i = 0; i < sorted.length\
    \ - 2; i++) \n        {\n            if (sorted[i] + sorted[i + 1] + sorted[i\
    \ + 2] == 0) \n            {\n                return true;\n            }\n  \
    \      }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n  \
    \  {\n        return false;\n    }\n    else\n    {\n        foreach (i; 0 ..\
    \ l.length - 2)\n        {\n            foreach (j; i + 1 .. l.length - 1)\n \
    \           {\n                foreach (k; j + 1 .. l.length)\n              \
    \  {\n                    if (l[i] + l[j] + l[k] == 0)\n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        long[] neg = sorted.filter!(x => x < 0)();\n   \
    \     long[] pos = sorted.filter!(x => x > 0)();\n        long[] zeros = sorted.filter!(x\
    \ => x == 0)();\n        if (zeros.length >= 3) \n        {\n            return\
    \ true;\n        }\n        else \n        {\n            for (int i = 0; i <\
    \ neg.length; i++) \n            {\n                for (int j = 0; j < pos.length;\
    \ j++) \n                {\n                    if (neg[i] + pos[j] == 0) \n \
    \                   {\n                        return true;\n                \
    \    }\n                }\n            }\n            return false;\n        }\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = sort(l);\n        for (int i = 0; i\
    \ < sorted.length - 2; i++) \n        {\n            if (sorted[i] == 0) \n  \
    \          {\n                if (sorted[i + 1] == 0 && sorted[i + 2] == 0) \n\
    \                {\n                    return true;\n                }\n    \
    \        }\n            else \n            {\n                if (sorted[i] +\
    \ sorted[i + 1] + sorted[i + 2] == 0) \n                {\n                  \
    \  return true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3)\n        return false;\n    auto s = l.sort();\n\
    \    foreach (i; 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto\
    \ k = s.length - 1;\n        while (j < k)\n        {\n            auto sum =\
    \ s[i] + s[j] + s[k];\n            if (sum == 0)\n                return true;\n\
    \            else if (sum < 0)\n                j += 1;\n            else\n  \
    \              k -= 1;\n        }\n    }\n    return false;\n}\n/*", "{\n    if\
    \ (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n   \
    \     foreach (i; 0 .. l.length) \n        {\n            foreach (j; i + 1 ..\
    \ l.length) \n            {\n                foreach (k; j + 1 .. l.length) \n\
    \                {\n                    if (l[i] + l[j] + l[k] == 0) \n      \
    \              {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = l.sort();\n        foreach (long i; sorted) \n  \
    \      {\n            long j = i + 1;\n            long k = sorted.length - 1;\n\
    \            while (j < k) \n            {\n                if (sorted[j] + sorted[k]\
    \ + i == 0) \n                {\n                    return true;\n          \
    \      }\n                else if (sorted[j] + sorted[k] + i < 0) \n         \
    \       {\n                    j += 1;\n                }\n                else\
    \ \n                {\n                    k -= 1;\n                }\n      \
    \      }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted_l = l.sort();\n        foreach (long x; sorted_l) \n        {\n     \
    \       foreach (long y; sorted_l) \n            {\n                foreach (long\
    \ z; sorted_l) \n                {\n                    if (x != y && y != z &&\
    \ x != z) \n                    {\n                        if (x + y + z == 0)\
    \ \n                        {\n                            return true;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        return false;\n    }\n}\n/*", "{\n    bool result = false;\n\
    \    if (l.length >= 3) \n    {\n        foreach (i; 0 .. l.length - 2) \n   \
    \     {\n            foreach (j; i + 1 .. l.length - 1) \n            {\n    \
    \            foreach (k; j + 1 .. l.length) \n                {\n            \
    \        if (l[i] + l[j] + l[k] == 0) \n                    {\n              \
    \          result = true;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    // YOUR CODE HERE\n\
    \    return false;\n}", "{\n    if (l.length < 3)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        foreach (i; 0 .. l.length)\n        {\n     \
    \       foreach (j; i + 1 .. l.length)\n            {\n                foreach\
    \ (k; j + 1 .. l.length)\n                {\n                    if (l[i] + l[j]\
    \ + l[k] == 0)\n                    {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        long[] sorted = l.dup.sort;\n        for (int\
    \ i = 0; i < sorted.length - 2; i++) \n        {\n            long x = sorted[i];\n\
    \            int j = i + 1;\n            int k = sorted.length - 1;\n        \
    \    while (j < k) \n            {\n                long y = sorted[j];\n    \
    \            long z = sorted[k];\n                if (x + y + z == 0) \n     \
    \           {\n                    return true;\n                }\n         \
    \       else if (x + y + z < 0) \n                {\n                    j++;\n\
    \                }\n                else \n                {\n               \
    \     k--;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.dup.sort;\n        long[] negatives\
    \ = sorted.filter!(x => x < 0).array;\n        long[] positives = sorted.filter!(x\
    \ => x > 0).array;\n        for (int i = 0; i < negatives.length; i++) \n    \
    \    {\n            for (int j = 0; j < positives.length; j++) \n            {\n\
    \                long sum = negatives[i] + positives[j];\n                if (sum\
    \ == 0) \n                {\n                    return true;\n              \
    \  }\n                else if (sum > 0) \n                {\n                \
    \    break;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted_l = l.sort();\n        for (int i = 0;\
    \ i < sorted_l.length - 2; i++) \n        {\n            long a = sorted_l[i];\n\
    \            long b = sorted_l[i + 1];\n            long c = sorted_l[i + 2];\n\
    \            if (a + b + c == 0) \n            {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted_l = l.sort();\n\
    \        long[] neg_l = sorted_l.filter!(x => x < 0);\n        long[] pos_l =\
    \ sorted_l.filter!(x => x > 0);\n        long[] zero_l = sorted_l.filter!(x =>\
    \ x == 0);\n        if (zero_l.length >= 3)\n            return true;\n      \
    \  else\n        {\n            foreach (i; 0 .. neg_l.length)\n            {\n\
    \                foreach (j; 0 .. pos_l.length)\n                {\n         \
    \           if (neg_l[i] + pos_l[j] == 0)\n                        return true;\n\
    \                }\n            }\n            return false;\n        }\n    }\n\
    }", "{\n    if (l.length < 3)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] sorted = l.sort();\n        for (int i = 0; i < sorted.length;\
    \ i++)\n        {\n            for (int j = i + 1; j < sorted.length; j++)\n \
    \           {\n                for (int k = j + 1; k < sorted.length; k++)\n \
    \               {\n                    if (sorted[i] + sorted[j] + sorted[k] ==\
    \ 0)\n                    {\n                        return true;\n          \
    \          }\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted_list = sort(l);\n        foreach (long\
    \ i; sorted_list) \n        {\n            long[] sub_list = sorted_list[1..$];\n\
    \            if (two_sum_to_zero(sub_list, -i)) \n            {\n            \
    \    return true;\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted_l = sort(l);\n        for (int i = 0; i < sorted_l.length\
    \ - 2; i++) \n        {\n            long a = sorted_l[i];\n            long b\
    \ = sorted_l[i + 1];\n            long c = sorted_l[i + 2];\n            if (a\
    \ + b + c == 0) \n            {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        long[] sorted = sort(l);\n\
    \        for (int i = 0; i < sorted.length; i++)\n        {\n            for (int\
    \ j = i + 1; j < sorted.length; j++)\n            {\n                for (int\
    \ k = j + 1; k < sorted.length; k++)\n                {\n                    if\
    \ (sorted[i] + sorted[j] + sorted[k] == 0)\n                    {\n          \
    \              return true;\n                    }\n                }\n      \
    \      }\n        }\n        return false;\n    }\n}", "{\n    if (l.length <\
    \ 3)\n        return false;\n    else\n    {\n        long[] sorted_l = sort(l);\n\
    \        foreach (long i; sorted_l)\n        {\n            long[] sub_l = sorted_l[1..$];\n\
    \            if (two_sum_to_zero(sub_l, -i))\n                return true;\n \
    \       }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n     \
    \   return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n    \
    \    long[] negative = sorted.filter!(x => x < 0);\n        long[] positive =\
    \ sorted.filter!(x => x > 0);\n        foreach (i; 0 .. negative.length)\n   \
    \     {\n            foreach (j; 0 .. positive.length)\n            {\n      \
    \          if (negative[i] + positive[j] == 0)\n                    return true;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = sort(l);\n\
    \        foreach (i; 0 .. sorted.length - 2)\n        {\n            long a =\
    \ sorted[i];\n            long j = i + 1;\n            long k = sorted.length\
    \ - 1;\n            while (j < k)\n            {\n                long b = sorted[j];\n\
    \                long c = sorted[k];\n                if (a + b + c == 0)\n  \
    \                  return true;\n                else if (a + b + c < 0)\n   \
    \                 j += 1;\n                else\n                    k -= 1;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n    {\n        return false;\n    }\n    else\n    {\n        long[] sorted\
    \ = sort(l);\n        for (int i = 0; i < sorted.length - 2; i++)\n        {\n\
    \            int j = i + 1;\n            int k = sorted.length - 1;\n        \
    \    while (j < k)\n            {\n                long sum = sorted[i] + sorted[j]\
    \ + sorted[k];\n                if (sum == 0)\n                {\n           \
    \         return true;\n                }\n                else if (sum < 0)\n\
    \                {\n                    j++;\n                }\n            \
    \    else\n                {\n                    k--;\n                }\n  \
    \          }\n        }\n        return false;\n    }\n}", "{\n    // YOUR CODE\
    \ HERE\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.dup.sort;\n        int i = 0;\n  \
    \      int j = sorted.length - 1;\n        while (i < j)\n        {\n        \
    \    int k = i + 1;\n            while (k < j)\n            {\n              \
    \  if (sorted[i] + sorted[k] + sorted[j] == 0)\n                    return true;\n\
    \                k++;\n            }\n            if (sorted[i] + sorted[j] >\
    \ 0)\n                j--;\n            else\n                i++;\n        }\n\
    \        return false;\n    }\n}", "{\n    long[] sorted_l = l.dup.sort;\n   \
    \ foreach(long i; 0..sorted_l.length)\n    {\n        long a = sorted_l[i];\n\
    \        long j = i + 1;\n        long k = sorted_l.length - 1;\n        while(j\
    \ < k)\n        {\n            long b = sorted_l[j];\n            long c = sorted_l[k];\n\
    \            if(a + b + c == 0)\n            {\n                return true;\n\
    \            }\n            else if(a + b + c < 0)\n            {\n          \
    \      j++;\n            }\n            else\n            {\n                k--;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (long i; 0 .. sorted.length - 2) \n    \
    \    {\n            long j = i + 1;\n            long k = sorted.length - 1;\n\
    \            while (j < k) \n            {\n                long sum = sorted[i]\
    \ + sorted[j] + sorted[k];\n                if (sum == 0) \n                {\n\
    \                    return true;\n                }\n                else if\
    \ (sum < 0) \n                {\n                    j++;\n                }\n\
    \                else \n                {\n                    k--;\n        \
    \        }\n            }\n        }\n        return false;\n    }\n}", "{\n \
    \   long[] sorted = l.dup.sort;\n    foreach(long i; 0..sorted.length-2)\n   \
    \ {\n        long j = i+1;\n        long k = sorted.length-1;\n        while(j\
    \ < k)\n        {\n            long sum = sorted[i] + sorted[j] + sorted[k];\n\
    \            if(sum == 0)\n                return true;\n            else if(sum\
    \ < 0)\n                j += 1;\n            else\n                k -= 1;\n \
    \       }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n    {\n  \
    \      return false;\n    }\n    else\n    {\n        long[] l2 = l.dup;\n   \
    \     l2.sort;\n        long[] l3 = l2.dup;\n        long[] l4 = l2.dup;\n   \
    \     l3.popFront;\n        l4.popBack;\n        long[] l5 = l3.dup;\n       \
    \ l5.popBack;\n        long[] l6 = l4.dup;\n        l6.popFront;\n        long[]\
    \ l7 = l5.dup;\n        l7.popFront;\n        long[] l8 = l6.dup;\n        l8.popBack;\n\
    \        if (l2[0] + l3[0] + l4[0] == 0)\n        {\n            return true;\n\
    \        }\n        else if (l2[0] + l3[0] + l4[l4.length - 1] == 0)\n       \
    \ {\n            return true;\n        }\n        else if (l2[0] + l3[l3.length\
    \ - 1] + l4[0] == 0)\n        {\n            return true;\n        }\n       \
    \ else if (l2[0] + l3[l3.length - 1] + l4[l4.length - 1] == 0)\n        {\n  \
    \          return true;\n        }\n        else if (l2[l2.length - 1] + l3[0]\
    \ + l4[0] == 0)\n        {\n            return true;\n        }\n        else\
    \ if (l2[l2.length - 1] + l3[0] + l4[l4.length - 1] == 0)\n        {\n       \
    \     return true;\n        }\n        else if (l2[l2.length - 1] + l3[l3.length\
    \ - 1] + l4[0] == 0)\n        {\n            return true;\n        }\n       \
    \ else if (l2[l2.length - 1] + l3[l3.length - 1] + l4[l4.length - 1] == 0)\n \
    \      ", "{\n    long[] sorted = l.dup.sort;\n    foreach(i; 0..sorted.length-2)\n\
    \    {\n        long a = sorted[i];\n        long j = i+1;\n        long k = sorted.length-1;\n\
    \        while(j < k)\n        {\n            long b = sorted[j];\n          \
    \  long c = sorted[k];\n            if(a + b + c == 0)\n            {\n      \
    \          return true;\n            }\n            else if(a + b + c < 0)\n \
    \           {\n                j += 1;\n            }\n            else\n    \
    \        {\n                k -= 1;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted_l = l.sort();\n        foreach (long\
    \ i; 0 .. sorted_l.length - 2) \n        {\n            long j = i + 1;\n    \
    \        long k = sorted_l.length - 1;\n            while (j < k) \n         \
    \   {\n                long sum = sorted_l[i] + sorted_l[j] + sorted_l[k];\n \
    \               if (sum == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (sum < 0) \n             \
    \   {\n                    j += 1;\n                }\n                else \n\
    \                {\n                    k -= 1;\n                }\n         \
    \   }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length <\
    \ 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.dup.sort;\n        long[] neg = sorted.filter!(x => x < 0);\n        long[]\
    \ pos = sorted.filter!(x => x > 0);\n        long[] zer = sorted.filter!(x =>\
    \ x == 0);\n        if (zer.length >= 3) \n        {\n            return true;\n\
    \        }\n        else \n        {\n            foreach (long x; neg) \n   \
    \         {\n                foreach (long y; pos) \n                {\n     \
    \               if (neg.canFind(x + y)) \n                    {\n            \
    \            return true;\n                    }\n                }\n        \
    \    }\n            return false;\n        }\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.sort();\n\
    \        foreach (long i; sorted)\n        {\n            long[] sub = sorted[1..$];\n\
    \            if (two_sum_to_zero(sub, -i))\n                return true;\n   \
    \     }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n       \
    \ return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j;\
    \ i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length)\n       \
    \ {\n            long[] l3 = l2[i .. $];\n            foreach (j; 0 .. l3.length)\n\
    \            {\n                long[] l4 = l3[j .. $];\n                foreach\
    \ (k; 0 .. l4.length)\n                {\n                    if (l2[i] + l3[j]\
    \ + l4[k] == 0)\n                        return true;\n                }\n   \
    \         }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        foreach\
    \ (i; 0 .. l.length - 2) \n        {\n            foreach (j; i + 1 .. l.length\
    \ - 1) \n            {\n                foreach (k; j + 1 .. l.length) \n    \
    \            {\n                    if (l[i] + l[j] + l[k] == 0) \n          \
    \          {\n                        return true;\n                    }\n  \
    \              }\n            }\n        }\n        return false;\n    }\n}\n\
    /*", "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n     \
    \   long[] sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2)\n \
    \       {\n            long a = sorted[i];\n            long b = sorted[i + 1];\n\
    \            long c = -(a + b);\n            if (sorted.canFind(c))\n        \
    \        return true;\n        }\n        return false;\n    }\n}\n/*", "{\n \
    \   if (l.length < 3)\n        return false;\n    else\n    {\n        auto sorted\
    \ = l.sort();\n        long[] triple;\n        foreach (i; 0 .. sorted.length\
    \ - 2)\n        {\n            triple = sorted[i .. $];\n            if (triple.length\
    \ < 3)\n                return false;\n            else\n            {\n     \
    \           long[] left = triple[0 .. $ - 1];\n                long[] right =\
    \ triple[1 .. $];\n                foreach (j; 0 .. left.length - 1)\n       \
    \         {\n                    if (right.binarySearch(-(left[j] + triple[$ -\
    \ 1])) != -1)\n                        return true;\n                }\n     \
    \       }\n        }\n        return false;\n    }\n}\n/*", "{\n    // if the\
    \ list is empty, return false\n    if (l.length == 0)\n    {\n        return false;\n\
    \    }\n    // if the list has only one element, return false\n    if (l.length\
    \ == 1)\n    {\n        return false;\n    }\n    // if the list has only two\
    \ elements, return false\n    if (l.length == 2)\n    {\n        return false;\n\
    \    }\n    // if the list has three elements, check if they sum to zero\n   \
    \ if (l.length == 3)\n    {\n        return l[0] + l[1] + l[2] == 0;\n    }\n\
    \    // if the list has more than three elements, sort it\n    l.sort();\n   \
    \ // iterate over the list\n    for (int i = 0; i < l.length - 2; i++)\n    {\n\
    \        // if the first element is greater than zero, return false\n        if\
    \ (l[i] > 0)\n        {\n            return false;\n        }\n        // if the\
    \ first element is zero, check if the next two elements are zero\n        if (l[i]\
    \ == 0)\n        {\n            if (l[i + 1] == 0 && l[i + 2] == 0)\n        \
    \    {\n                return true;\n            }\n        }\n        // if\
    \ the first element is less than zero, check if the next two elements sum to zero\n\
    \        if (l[i] < 0)\n        {\n            if (l[i + 1] + l[i + 2] == -l[i])\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    // if no triple sums to zero, return false\n    return false;\n}", "{\n \
    \   if (l.length < 3)\n        return false;\n    else\n    {\n        l.sort();\n\
    \        foreach (i; 0 .. l.length - 2)\n        {\n            long a = l[i];\n\
    \            long j = i + 1;\n            long k = l.length - 1;\n           \
    \ while (j < k)\n            {\n                long b = l[j];\n             \
    \   long c = l[k];\n                if (a + b + c == 0)\n                    return\
    \ true;\n                else if (a + b + c < 0)\n                    j++;\n \
    \               else\n                    k--;\n            }\n        }\n   \
    \     return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n        return\
    \ false;\n    }\n    else \n    {\n        foreach (i; 0 .. l.length - 2) \n \
    \       {\n            foreach (j; i + 1 .. l.length - 1) \n            {\n  \
    \              foreach (k; j + 1 .. l.length) \n                {\n          \
    \          if (l[i] + l[j] + l[k] == 0) \n                    {\n            \
    \            return true;\n                    }\n                }\n        \
    \    }\n        }\n        return false;\n    }\n}", "{\n    // YOUR CODE HERE\n\
    \    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n   \
    \ else\n    {\n        bool[] b = new bool[l.length];\n        for (int i = 0;\
    \ i < l.length; i++)\n        {\n            for (int j = 0; j < l.length; j++)\n\
    \            {\n                if (i != j)\n                {\n             \
    \       for (int k = 0; k < l.length; k++)\n                    {\n          \
    \              if (k != i && k != j)\n                        {\n            \
    \                if (l[i] + l[j] + l[k] == 0)\n                              \
    \  return true;\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        return false;\n    }\n}\n/*", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        foreach\
    \ (i; 0 .. l.length)\n        {\n            foreach (j; i+1 .. l.length)\n  \
    \          {\n                foreach (k; j+1 .. l.length)\n                {\n\
    \                    if (l[i] + l[j] + l[k] == 0)\n                        return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
