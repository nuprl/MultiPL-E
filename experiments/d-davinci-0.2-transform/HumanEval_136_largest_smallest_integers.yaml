name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2L,\
  \ 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n    >>> largest_smallest_integers([])\n\
  \    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n    tuple(None,\
  \ None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(elem; lst) \n    {\n        if (elem\
    \ < 0) \n        {\n            if (largest_negative is null || largest_negative\
    \ < elem) \n            {\n                largest_negative = elem;\n        \
    \    }\n        } \n        else if (elem > 0) \n        {\n            if (smallest_positive\
    \ is null || smallest_positive > elem) \n            {\n                smallest_positive\
    \ = elem;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n    {\n   \
    \     if(l < 0)\n        {\n            if(largestNegative is null || l > largestNegative)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive is null ||\
    \ l < smallestPositive)\n            {\n                smallestPositive = l;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = Nullable!(long)();\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long)();\n    foreach(l; lst)\n    {\n       \
    \ if(l < 0)\n        {\n            if(largest_negative.isNull || l > largest_negative.get)\n\
    \            {\n                largest_negative = Nullable!(long)(l);\n     \
    \       }\n        }\n        else if(l > 0)\n        {\n            if(smallest_positive.isNull\
    \ || l < smallest_positive.get)\n            {\n                smallest_positive\
    \ = Nullable!(long)(l);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(l; lst) \n    {\n\
    \        if(l < 0) \n        {\n            if(largest_negative is null || l >\
    \ largest_negative) \n            {\n                largest_negative = l;\n \
    \           }\n        }\n        else if(l > 0) \n        {\n            if(smallest_positive\
    \ is null || l < smallest_positive) \n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative.isNull || largestNegative.get > l)\n            {\n  \
    \              largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive.isNull || smallestPositive.get\
    \ < l)\n            {\n                smallestPositive = l;\n            }\n\
    \        }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(!largestNegative.isNull)\n            {\n  \
    \              if(i > largestNegative.get)\n                {\n              \
    \      largestNegative.set(i);\n                }\n            }\n           \
    \ else\n            {\n                largestNegative.set(i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(!smallestPositive.isNull)\n\
    \            {\n                if(i < smallestPositive.get)\n               \
    \ {\n                    smallestPositive.set(i);\n                }\n       \
    \     }\n            else\n            {\n                smallestPositive.set(i);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largest_negative is null || num > largest_negative) \n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else if(num > 0) \n        {\n            if(smallest_positive is null ||\
    \ num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest = null;\n    Nullable!(long)\
    \ smallest = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n\
    \            if(largest is null || i > largest)\n            {\n             \
    \   largest = i;\n            }\n        }\n        else if(i > 0)\n        {\n\
    \            if(smallest is null || i < smallest)\n            {\n           \
    \     smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n        {\n      \
    \      if(largest_negative is null || l > largest_negative) \n            {\n\
    \                largest_negative = l;\n            }\n        }\n        else\
    \ if(l > 0) \n        {\n            if(smallest_positive is null || l < smallest_positive)\
    \ \n            {\n                smallest_positive = l;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest is null ||\
    \ i > largest)\n            {\n                largest = i;\n            }\n \
    \       }\n        else if(i > 0)\n        {\n            if(smallest is null\
    \ || i < smallest)\n            {\n                smallest = i;\n           \
    \ }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = Nullable!(long).init;\n    Nullable!(long) smallest = Nullable!(long).init;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest.isNull\
    \ || largest.get > i)\n            {\n                largest = i;\n         \
    \   }\n        }\n        else if(i > 0)\n        {\n            if(smallest.isNull\
    \ || smallest.get < i)\n            {\n                smallest = i;\n       \
    \     }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest is null || i > largest)\n\
    \            {\n                largest = i;\n            }\n        }\n     \
    \   else if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n\
    \            {\n                smallest = i;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null\
    \ || i > largest_negative)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive is null || i < smallest_positive)\n            {\n   \
    \             smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
