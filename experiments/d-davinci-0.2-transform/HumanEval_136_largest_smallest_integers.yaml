name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2L,\
  \ 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n    >>> largest_smallest_integers([])\n\
  \    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n    tuple(None,\
  \ None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(elem; lst) \n    {\n        if (elem\
    \ < 0) \n        {\n            if (largest_negative is null || largest_negative\
    \ < elem) \n            {\n                largest_negative = elem;\n        \
    \    }\n        } \n        else if (elem > 0) \n        {\n            if (smallest_positive\
    \ is null || smallest_positive > elem) \n            {\n                smallest_positive\
    \ = elem;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n    {\n   \
    \     if(l < 0)\n        {\n            if(largestNegative is null || l > largestNegative)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive is null ||\
    \ l < smallestPositive)\n            {\n                smallestPositive = l;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = Nullable!(long)();\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long)();\n    foreach(l; lst)\n    {\n       \
    \ if(l < 0)\n        {\n            if(largest_negative.isNull || l > largest_negative.get)\n\
    \            {\n                largest_negative = Nullable!(long)(l);\n     \
    \       }\n        }\n        else if(l > 0)\n        {\n            if(smallest_positive.isNull\
    \ || l < smallest_positive.get)\n            {\n                smallest_positive\
    \ = Nullable!(long)(l);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(l; lst) \n    {\n\
    \        if(l < 0) \n        {\n            if(largest_negative is null || l >\
    \ largest_negative) \n            {\n                largest_negative = l;\n \
    \           }\n        }\n        else if(l > 0) \n        {\n            if(smallest_positive\
    \ is null || l < smallest_positive) \n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative.isNull || largestNegative.get > l)\n            {\n  \
    \              largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive.isNull || smallestPositive.get\
    \ < l)\n            {\n                smallestPositive = l;\n            }\n\
    \        }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(!largestNegative.isNull)\n            {\n  \
    \              if(i > largestNegative.get)\n                {\n              \
    \      largestNegative.set(i);\n                }\n            }\n           \
    \ else\n            {\n                largestNegative.set(i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(!smallestPositive.isNull)\n\
    \            {\n                if(i < smallestPositive.get)\n               \
    \ {\n                    smallestPositive.set(i);\n                }\n       \
    \     }\n            else\n            {\n                smallestPositive.set(i);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largest_negative is null || num > largest_negative) \n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else if(num > 0) \n        {\n            if(smallest_positive is null ||\
    \ num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest = null;\n    Nullable!(long)\
    \ smallest = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n\
    \            if(largest is null || i > largest)\n            {\n             \
    \   largest = i;\n            }\n        }\n        else if(i > 0)\n        {\n\
    \            if(smallest is null || i < smallest)\n            {\n           \
    \     smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n        {\n      \
    \      if(largest_negative is null || l > largest_negative) \n            {\n\
    \                largest_negative = l;\n            }\n        }\n        else\
    \ if(l > 0) \n        {\n            if(smallest_positive is null || l < smallest_positive)\
    \ \n            {\n                smallest_positive = l;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest is null ||\
    \ i > largest)\n            {\n                largest = i;\n            }\n \
    \       }\n        else if(i > 0)\n        {\n            if(smallest is null\
    \ || i < smallest)\n            {\n                smallest = i;\n           \
    \ }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = Nullable!(long).init;\n    Nullable!(long) smallest = Nullable!(long).init;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest.isNull\
    \ || largest.get > i)\n            {\n                largest = i;\n         \
    \   }\n        }\n        else if(i > 0)\n        {\n            if(smallest.isNull\
    \ || smallest.get < i)\n            {\n                smallest = i;\n       \
    \     }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest is null || i > largest)\n\
    \            {\n                largest = i;\n            }\n        }\n     \
    \   else if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n\
    \            {\n                smallest = i;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null\
    \ || i > largest_negative)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive is null || i < smallest_positive)\n            {\n   \
    \             smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest_neg\
    \ = null;\n    Nullable!(long) smallest_pos = null;\n    foreach(elem; lst)\n\
    \    {\n        if(elem < 0)\n        {\n            if(largest_neg is null)\n\
    \            {\n                largest_neg = elem;\n            }\n         \
    \   else\n            {\n                largest_neg = max(largest_neg, elem);\n\
    \            }\n        }\n        else if(elem > 0)\n        {\n            if(smallest_pos\
    \ is null)\n            {\n                smallest_pos = elem;\n            }\n\
    \            else\n            {\n                smallest_pos = min(smallest_pos,\
    \ elem);\n            }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largest_neg = Nullable!(long)();\n    Nullable!(long)\
    \ smallest_pos = Nullable!(long)();\n    foreach(elem; lst) \n    {\n        if\
    \ (elem < 0) \n        {\n            if (largest_neg.isNull || elem > largest_neg.get)\
    \ \n            {\n                largest_neg = Nullable!(long)(elem);\n    \
    \        }\n        } \n        else if (elem > 0) \n        {\n            if\
    \ (smallest_pos.isNull || elem < smallest_pos.get) \n            {\n         \
    \       smallest_pos = Nullable!(long)(elem);\n            }\n        }\n    }\n\
    \    return tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n    {\n   \
    \     if(l < 0)\n        {\n            if(largestNegative is null || l > largestNegative)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive is null ||\
    \ l < smallestPositive)\n            {\n                smallestPositive = l;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(largest.isNull || i > largest.get)\n         \
    \   {\n                largest = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest.isNull || i < smallest.get)\n     \
    \       {\n                smallest = i;\n            }\n        }\n    }\n  \
    \  return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(item; lst)\n\
    \    {\n        if(item < 0)\n        {\n            if(largestNegative is null\
    \ || item > largestNegative)\n            {\n                largestNegative =\
    \ item;\n            }\n        }\n        else if(item > 0)\n        {\n    \
    \        if(smallestPositive is null || item < smallestPositive)\n           \
    \ {\n                smallestPositive = item;\n            }\n        }\n    }\n\
    \    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = Nullable!(long)();\n    Nullable!(long) smallest_positive = Nullable!(long)();\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull\
    \ || i > largest_negative.get)\n            {\n                largest_negative\
    \ = Nullable!(long)(i);\n            }\n        }\n        else if(i > 0)\n  \
    \      {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = Nullable!(long)(i);\n    \
    \        }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largest_neg is null || elem > largest_neg)\n            {\n    \
    \            largest_neg = elem;\n            }\n        }\n        else if(elem\
    \ > 0)\n        {\n            if(smallest_pos is null || elem < smallest_pos)\n\
    \            {\n                smallest_pos = elem;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largestNegative is null ||\
    \ l > largestNegative)\n            {\n                largestNegative = l;\n\
    \            }\n        }\n        else if(l > 0)\n        {\n            if(smallestPositive\
    \ is null || l < smallestPositive)\n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    auto largest = Nullable!(long)();\n    auto smallest = Nullable!(long)();\n\
    \    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(largest.isNull\
    \ || e > largest.get)\n            {\n                largest = e;\n         \
    \   }\n        }\n        else if(e > 0)\n        {\n            if(smallest.isNull\
    \ || e < smallest.get)\n            {\n                smallest = e;\n       \
    \     }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull\
    \ || largest_negative < i)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive.isNull || smallest_positive > i)\n            {\n    \
    \            smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long)();\n    Nullable!(long) smallestPositive = Nullable!(long)();\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || largestNegative.get > i)\n            {\n                largestNegative\
    \ = Nullable!(long)(i);\n            }\n        }\n        else if(i > 0)\n  \
    \      {\n            if(smallestPositive.isNull || smallestPositive.get > i)\n\
    \            {\n                smallestPositive = Nullable!(long)(i);\n     \
    \       }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative.isNull || i > largest_negative.get) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest.isNull || i > largest.get)\n            {\n  \
    \              largest = i;\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest.isNull || i < smallest.get)\n            {\n\
    \                smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst) \n    {\n        if(num < 0L)\
    \ \n        {\n            if(largest_negative is null || num > largest_negative)\
    \ \n            {\n                largest_negative = num;\n            }\n  \
    \      }\n        else if(num > 0L) \n        {\n            if(smallest_positive\
    \ is null || num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst) \n    {\n\
    \        if(i < 0) \n        {\n            if(largest_negative is null || i >\
    \ largest_negative) \n            {\n                largest_negative = i;\n \
    \           }\n        }\n        else if(i > 0) \n        {\n            if(smallest_positive\
    \ is null || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0L)\n        {\n \
    \           if(largestNegative is null || elem > largestNegative)\n          \
    \  {\n                largestNegative = elem;\n            }\n        }\n    \
    \    else if(elem > 0L)\n        {\n            if(smallestPositive is null ||\
    \ elem < smallestPositive)\n            {\n                smallestPositive =\
    \ elem;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(x; lst) \n    {\n        if (x < 0) \n\
    \        {\n            if (largest.isNull || largest.get > x) \n            {\n\
    \                largest = x;\n            }\n        }\n        else if (x >\
    \ 0) \n        {\n            if (smallest.isNull || smallest.get < x) \n    \
    \        {\n                smallest = x;\n            }\n        }\n    }\n \
    \   return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n\
    \    Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n \
    \   {\n        if(i < 0)\n        {\n            if(largest.isNull || i > largest.get)\n\
    \            {\n                largest = i;\n            }\n        }\n     \
    \   else if(i > 0)\n        {\n            if(smallest.isNull || i < smallest.get)\n\
    \            {\n                smallest = i;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long)();\n    Nullable!(long) smallestPositive = Nullable!(long)();\n\
    \    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n            if(largestNegative.isNull\
    \ || l > largestNegative.get)\n            {\n                largestNegative\
    \ = Nullable!(long)(l);\n            }\n        }\n        else if(l > 0)\n  \
    \      {\n            if(smallestPositive.isNull || l < smallestPositive.get)\n\
    \            {\n                smallestPositive = Nullable!(long)(l);\n     \
    \       }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largest_negative is null)\n            {\n                largest_negative\
    \ = elem;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, elem);\n            }\n        }\n        else if(elem\
    \ > 0)\n        {\n            if(smallest_positive is null)\n            {\n\
    \                smallest_positive = elem;\n            }\n            else\n\
    \            {\n                smallest_positive = min(smallest_positive, elem);\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = l;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, l);\n            }\n        }\n        else if(l > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = l;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, l);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = Nullable!(long)(i);\n      \
    \      }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = Nullable!(long)(i);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largestNegative = null;\n  \
    \  Nullable!(long) smallestPositive = null;\n    foreach(long i; lst) \n    {\n\
    \        if(i < 0) \n        {\n            if(largestNegative is null || i >\
    \ largestNegative) \n            {\n                largestNegative = i;\n   \
    \         }\n        }\n        else if(i > 0) \n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive) \n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(e; lst)\n    {\n        if(e <\
    \ 0)\n        {\n            if(largest.isNull)\n            {\n             \
    \   largest = e;\n            }\n            else\n            {\n           \
    \     largest = max(largest, e);\n            }\n        }\n        else if(e\
    \ > 0)\n        {\n            if(smallest.isNull)\n            {\n          \
    \      smallest = e;\n            }\n            else\n            {\n       \
    \         smallest = min(smallest, e);\n            }\n        }\n    }\n    return\
    \ tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative is null)\n     \
    \       {\n                largest_negative = i;\n            }\n            else\n\
    \            {\n                largest_negative = max(largest_negative, i);\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(l; lst)\n    {\n        if(l\
    \ < 0)\n        {\n            if(largestNegative.isNull || l > largestNegative.get)\n\
    \            {\n                largestNegative = Nullable!(long)(l);\n      \
    \      }\n        }\n        else if(l > 0)\n        {\n            if(smallestPositive.isNull\
    \ || l < smallestPositive.get)\n            {\n                smallestPositive\
    \ = Nullable!(long)(l);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largestNegative = null;\n  \
    \  Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n    {\n    \
    \    if(l < 0)\n        {\n            if(largestNegative is null || l > largestNegative)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive is null ||\
    \ l < smallestPositive)\n            {\n                smallestPositive = l;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n            if(largest\
    \ is null || i > largest) \n            {\n                largest = i;\n    \
    \        }\n        }\n        else if(i > 0) \n        {\n            if(smallest\
    \ is null || i < smallest) \n            {\n                smallest = i;\n  \
    \          }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(long i; lst)\n    {\n        if(i < 0)\n        {\n   \
    \         if(largestNegative is null || i > largestNegative)\n            {\n\
    \                largestNegative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative;\n    Nullable!(long) smallest_positive;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(!largest_negative.isNull\
    \ || i > largest_negative.get)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(!smallest_positive.isNull || i < smallest_positive.get)\n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i; lst)\n\
    \    {\n        if(i > 0)\n        {\n            if(smallest is null)\n     \
    \       {\n                smallest = i;\n            }\n            else\n  \
    \          {\n                smallest = min(smallest, i);\n            }\n  \
    \      }\n        else if(i < 0)\n        {\n            if(largest is null)\n\
    \            {\n                largest = i;\n            }\n            else\n\
    \            {\n                largest = max(largest, i);\n            }\n  \
    \      }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l;\
    \ lst)\n    {\n        if(l < 0)\n        {\n            if(largestNegative is\
    \ null || l > largestNegative)\n            {\n                largestNegative\
    \ = l;\n            }\n        }\n        else if(l > 0)\n        {\n        \
    \    if(smallestPositive is null || l < smallestPositive)\n            {\n   \
    \             smallestPositive = l;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long)();\n    Nullable!(long) smallestPositive = Nullable!(long)();\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = Nullable!(long)(i);\n            }\n        }\n        else if(i > 0)\n  \
    \      {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = Nullable!(long)(i);\n     \
    \       }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = l;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, l);\n            }\n        }\n        else if(l > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = l;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, l);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = Nullable!(long)(i);\n      \
    \      }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = Nullable!(long)(i);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largest_negative = null;\n \
    \   Nullable!(long) smallest_positive = null;\n    foreach(l; lst)\n    {\n  \
    \      if(l < 0)\n        {\n            if(largest_negative is null || l > largest_negative)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive is null\
    \ || l < smallest_positive)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largest_negative is null || elem > largest_negative)\n         \
    \   {\n                largest_negative = elem;\n            }\n        }\n  \
    \      else if(elem > 0)\n        {\n            if(smallest_positive is null\
    \ || elem < smallest_positive)\n            {\n                smallest_positive\
    \ = elem;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || largestNegative < i)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || smallestPositive\
    \ > i)\n            {\n                smallestPositive = i;\n            }\n\
    \        }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(!largest.isNull)\n            {\n                if(i\
    \ > largest.get)\n                {\n                    largest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    largest.set(i);\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(!smallest.isNull)\n            {\n                if(i <\
    \ smallest.get)\n                {\n                    smallest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    smallest.set(i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n  \
    \      {\n            if(largestNegative is null || i > largestNegative)\n   \
    \         {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative.isNull || l > largest_negative.get)\n            {\n\
    \                largest_negative = l;\n            }\n        }\n        else\
    \ if(l > 0)\n        {\n            if(smallest_positive.isNull || l < smallest_positive.get)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(l; lst)\n    {\n        if(l\
    \ < 0)\n        {\n            if(largestNegative.isNull || l > largestNegative.get)\n\
    \            {\n                largestNegative = Nullable!(long)(l);\n      \
    \      }\n        }\n        else if(l > 0)\n        {\n            if(smallestPositive.isNull\
    \ || l < smallestPositive.get)\n            {\n                smallestPositive\
    \ = Nullable!(long)(l);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largestNegative = null;\n  \
    \  Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largestNegative is null || i > largestNegative)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest is null ||\
    \ largest < i)\n            {\n                largest = i;\n            }\n \
    \       }\n        else if(i > 0)\n        {\n            if(smallest is null\
    \ || smallest > i)\n            {\n                smallest = i;\n           \
    \ }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(elem; lst) \n    {\n        if (elem < 0) \n        {\n           \
    \ if (largest_negative is null || elem > largest_negative) \n            {\n \
    \               largest_negative = elem;\n            }\n        } \n        else\
    \ if (elem > 0) \n        {\n            if (smallest_positive is null || elem\
    \ < smallest_positive) \n            {\n                smallest_positive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(e; lst)\n    {\n        if(e <\
    \ 0)\n        {\n            if(largest.isNull || e > largest.get)\n         \
    \   {\n                largest = e;\n            }\n        }\n        else if(e\
    \ > 0)\n        {\n            if(smallest.isNull || e < smallest.get)\n     \
    \       {\n                smallest = e;\n            }\n        }\n    }\n  \
    \  return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ auto min_pos = Nullable!(long)();\n    auto max_neg = Nullable!(long)();\n \
    \   foreach(e; lst)\n    {\n        if(e > 0)\n        {\n            if(min_pos.isNull\
    \ || e < min_pos.get)\n                min_pos = e;\n        }\n        else if(e\
    \ < 0)\n        {\n            if(max_neg.isNull || e > max_neg.get)\n       \
    \         max_neg = e;\n        }\n    }\n    return tuple(max_neg, min_pos);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || largest_negative.get < i)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || smallest_positive.get\
    \ > i)\n            {\n                smallest_positive = i;\n            }\n\
    \        }\n    }\n    return tuple(largest_negative, smallest_positive);\n}",
  "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_neg\
    \ is null || num > largest_neg)\n            {\n                largest_neg =\
    \ num;\n            }\n        }\n        else if(num > 0)\n        {\n      \
    \      if(smallest_pos is null || num < smallest_pos)\n            {\n       \
    \         smallest_pos = num;\n            }\n        }\n    }\n    return tuple(largest_neg,\
    \ smallest_pos);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n\
    \    Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n \
    \   {\n        if(i < 0)\n        {\n            if(largest.isNull)\n        \
    \    {\n                largest = i;\n            }\n            else\n      \
    \      {\n                largest = max(largest, i);\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallest.isNull)\n        \
    \    {\n                smallest = i;\n            }\n            else\n     \
    \       {\n                smallest = min(smallest, i);\n            }\n     \
    \   }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num;\
    \ lst) \n    {\n        if(num < 0) \n        {\n            if(largestNegative\
    \ is null || num > largestNegative) \n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0) \n        {\n   \
    \         if(smallestPositive is null || num < smallestPositive) \n          \
    \  {\n                smallestPositive = num;\n            }\n        }\n    }\n\
    \    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull\
    \ || i > largest_negative.get)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallest_positive.isNull || i < smallest_positive.get)\n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l;\
    \ lst)\n    {\n        if(l < 0)\n        {\n            if(largestNegative.isNull\
    \ || l > largestNegative.get)\n            {\n                largestNegative\
    \ = l;\n            }\n        }\n        else if(l > 0)\n        {\n        \
    \    if(smallestPositive.isNull || l < smallestPositive.get)\n            {\n\
    \                smallestPositive = l;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest\
    \ = null;\n    Nullable!(long) smallest = null;\n    foreach(e; lst)\n    {\n\
    \        if(e < 0)\n        {\n            if(largest is null || e > largest)\n\
    \            {\n                largest = e;\n            }\n        }\n     \
    \   else if(e > 0)\n        {\n            if(smallest is null || e < smallest)\n\
    \            {\n                smallest = e;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long)();\n    Nullable!(long) smallestPositive = Nullable!(long)();\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = Nullable!(long)(i);\n            }\n        }\n        else if(i > 0)\n  \
    \      {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = Nullable!(long)(i);\n     \
    \       }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n            if(smallest.isNull)\n\
    \            {\n                smallest = i;\n            }\n            else\n\
    \            {\n                smallest = min(smallest, i);\n            }\n\
    \        }\n        else if(i < 0)\n        {\n            if(largest.isNull)\n\
    \            {\n                largest = i;\n            }\n            else\n\
    \            {\n                largest = max(largest, i);\n            }\n  \
    \      }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num;\
    \ lst) \n    {\n        if(num < 0) \n        {\n            if(largestNegative\
    \ is null || num > largestNegative) \n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0) \n        {\n   \
    \         if(smallestPositive is null || num < smallestPositive) \n          \
    \  {\n                smallestPositive = num;\n            }\n        }\n    }\n\
    \    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largestNegative.isNull ||\
    \ l > largestNegative.get)\n            {\n                largestNegative = l;\n\
    \            }\n        }\n        else if(l > 0)\n        {\n            if(smallestPositive.isNull\
    \ || l < smallestPositive.get)\n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) maxNeg = null;\n    Nullable!(long) minPos = null;\n    foreach(e;\
    \ lst)\n    {\n        if(e < 0)\n        {\n            if(maxNeg is null ||\
    \ e > maxNeg)\n                maxNeg = e;\n        }\n        else if(e > 0)\n\
    \        {\n            if(minPos is null || e < minPos)\n                minPos\
    \ = e;\n        }\n    }\n    return tuple(maxNeg, minPos);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative\
    \ is null || i > largest_negative)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallest_positive is null || i < smallest_positive)\n            {\n \
    \               smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n    {\n   \
    \     if(i < 0)\n        {\n            if(largestNegative is null || i > largestNegative)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative.isNull || l > largestNegative.get)\n            {\n  \
    \              largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive.isNull || l < smallestPositive.get)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(e;\
    \ lst)\n    {\n        if(e > 0)\n        {\n            if(smallest is null ||\
    \ e < smallest)\n            {\n                smallest = e;\n            }\n\
    \        }\n        else if(e < 0)\n        {\n            if(largest is null\
    \ || e > largest)\n            {\n                largest = e;\n            }\n\
    \        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative\
    \ is null || i > largest_negative)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallest_positive is null || i < smallest_positive)\n            {\n \
    \               smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long)();\n    Nullable!(long) smallestPositive = Nullable!(long)();\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = Nullable!(long)(i);\n            }\n        }\n        else if(i > 0)\n  \
    \      {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = Nullable!(long)(i);\n     \
    \       }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0L) \n        {\n     \
    \       if(largest_negative is null || l > largest_negative) \n            {\n\
    \                largest_negative = l;\n            }\n        }\n        else\
    \ if(l > 0L) \n        {\n            if(smallest_positive is null || l < smallest_positive)\
    \ \n            {\n                smallest_positive = l;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    long largest_negative = long.min;\n    long smallest_positive = long.max;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            largest_negative\
    \ = max(largest_negative, i);\n        }\n        else if(i > 0)\n        {\n\
    \            smallest_positive = min(smallest_positive, i);\n        }\n    }\n\
    \    return tuple(largest_negative == long.min ? null : largest_negative, smallest_positive\
    \ == long.max ? null : smallest_positive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\
    \ \n    {\n        if(i < 0L) \n        {\n            if(largest_negative is\
    \ null) \n            {\n                largest_negative = i;\n            }\
    \ \n            else \n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        } \n        else if(i > 0L) \n        {\n      \
    \      if(smallest_positive is null) \n            {\n                smallest_positive\
    \ = i;\n            } \n            else \n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst) \n    {\n\
    \        if(i < 0) \n        {\n            if(largest_negative is null || i >\
    \ largest_negative) \n            {\n                largest_negative = i;\n \
    \           }\n        }\n        else if(i > 0) \n        {\n            if(smallest_positive\
    \ is null || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst) \n    {\n        if(i < 0) \n \
    \       {\n            if(largest.isNull || i > largest.get) \n            {\n\
    \                largest = i;\n            }\n        }\n        else if(i > 0)\
    \ \n        {\n            if(smallest.isNull || i < smallest.get) \n        \
    \    {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest = null;\n   \
    \ Nullable!(long) smallest = null;\n    foreach(e; lst)\n    {\n        if(e <\
    \ 0)\n        {\n            if(largest is null || e > largest)\n            {\n\
    \                largest = e;\n            }\n        }\n        else if(e > 0)\n\
    \        {\n            if(smallest is null || e < smallest)\n            {\n\
    \                smallest = e;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n  \
    \      {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = Nullable!(long)();\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long)();\n    foreach(l; lst)\n    {\n       \
    \ if(l < 0)\n        {\n            if(!largest_negative.isNull)\n           \
    \ {\n                if(l > largest_negative.get)\n                {\n       \
    \             largest_negative.set(l);\n                }\n            }\n   \
    \         else\n            {\n                largest_negative.set(l);\n    \
    \        }\n        }\n        else if(l > 0)\n        {\n            if(!smallest_positive.isNull)\n\
    \            {\n                if(l < smallest_positive.get)\n              \
    \  {\n                    smallest_positive.set(l);\n                }\n     \
    \       }\n            else\n            {\n                smallest_positive.set(l);\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(!largest.isNull)\n            {\n                if(i\
    \ > largest.get)\n                {\n                    largest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    largest.set(i);\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(!smallest.isNull)\n            {\n                if(i <\
    \ smallest.get)\n                {\n                    smallest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    smallest.set(i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst) \n    {\n       \
    \ if(i < 0) \n        {\n            if(!largestNegative.isNull) \n          \
    \  {\n                if(i > largestNegative.get) \n                {\n      \
    \              largestNegative.set(i);\n                }\n            }\n   \
    \         else \n            {\n                largestNegative.set(i);\n    \
    \        }\n        }\n        else if(i > 0) \n        {\n            if(!smallestPositive.isNull)\
    \ \n            {\n                if(i < smallestPositive.get) \n           \
    \     {\n                    smallestPositive.set(i);\n                }\n   \
    \         }\n            else \n            {\n                smallestPositive.set(i);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative;\n    Nullable!(long) smallest_positive;\n\
    \    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n            if(largest_negative.isNull)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ l);\n            }\n        }\n        else if(l > 0)\n        {\n         \
    \   if(smallest_positive.isNull)\n            {\n                smallest_positive\
    \ = l;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, l);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(l; lst) \n    {\n\
    \        if(l < 0) \n        {\n            if(largest_negative.isNull || l >\
    \ largest_negative.get) \n            {\n                largest_negative = l;\n\
    \            }\n        }\n        else if(l > 0) \n        {\n            if(smallest_positive.isNull\
    \ || l < smallest_positive.get) \n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = Nullable!(long)(i);\n      \
    \      }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = Nullable!(long)(i);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largest_negative = null;\n \
    \   Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n  \
    \      if(i < 0)\n        {\n            if(largest_negative is null)\n      \
    \      {\n                largest_negative = i;\n            }\n            else\n\
    \            {\n                largest_negative = max(largest_negative, i);\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest is null ||\
    \ i > largest)\n            {\n                largest = i;\n            }\n \
    \       }\n        else if(i > 0)\n        {\n            if(smallest is null\
    \ || i < smallest)\n            {\n                smallest = i;\n           \
    \ }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = null;\n    Nullable!(long) smallest = null;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largest is null || l > largest)\n\
    \            {\n                largest = l;\n            }\n        }\n     \
    \   else if(l > 0)\n        {\n            if(smallest is null || l < smallest)\n\
    \            {\n                smallest = l;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(largest.isNull || i > largest.get)\n         \
    \   {\n                largest = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest.isNull || i < smallest.get)\n     \
    \       {\n                smallest = i;\n            }\n        }\n    }\n  \
    \  return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest = null;\n\
    \    Nullable!(long) smallest = null;\n    foreach(i; lst) \n    {\n        if(i\
    \ < 0) \n        {\n            if(largest is null || i > largest) \n        \
    \    {\n                largest = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallest is null || i < smallest) \n      \
    \      {\n                smallest = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive.isNull || i < smallest_positive.get)\n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst) \n    {\n        if(i < 0) \n        {\n            if(largest_negative\
    \ is null || i > largest_negative) \n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0) \n        {\n       \
    \     if(smallest_positive is null || i < smallest_positive) \n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest = Nullable!(long).init;\n    Nullable!(long) smallest = Nullable!(long).init;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest.isNull\
    \ || i > largest.get)\n            {\n                largest = i;\n         \
    \   }\n        }\n        else if(i > 0)\n        {\n            if(smallest.isNull\
    \ || i < smallest.get)\n            {\n                smallest = i;\n       \
    \     }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = Nullable!(long).init;\n    Nullable!(long) smallest = Nullable!(long).init;\n\
    \    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n            if(largest.isNull\
    \ || i > largest.get) \n            {\n                largest = i;\n        \
    \    }\n        }\n        else if(i > 0) \n        {\n            if(smallest.isNull\
    \ || i < smallest.get) \n            {\n                smallest = i;\n      \
    \      }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n   \
    \ Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n            if(largest_neg\
    \ is null || largest_neg < elem)\n            {\n                largest_neg =\
    \ elem;\n            }\n        }\n        else if(elem > 0)\n        {\n    \
    \        if(smallest_pos is null || smallest_pos > elem)\n            {\n    \
    \            smallest_pos = elem;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long) largest = null;\n\
    \    Nullable!(long) smallest = null;\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largest is null || i > largest)\n          \
    \  {\n                largest = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest is null || i < smallest)\n        \
    \    {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n\
    \    Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n \
    \   {\n        if(i < 0)\n        {\n            if(largest.isNull)\n        \
    \    {\n                largest = i;\n            }\n            else\n      \
    \      {\n                largest = max(largest, i);\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallest.isNull)\n        \
    \    {\n                smallest = i;\n            }\n            else\n     \
    \       {\n                smallest = min(smallest, i);\n            }\n     \
    \   }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest is null || i > largest)\n\
    \            {\n                largest = i;\n            }\n        }\n     \
    \   else if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n\
    \            {\n                smallest = i;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largestNegative is null ||\
    \ l > largestNegative)\n            {\n                largestNegative = l;\n\
    \            }\n        }\n        else if(l > 0)\n        {\n            if(smallestPositive\
    \ is null || l < smallestPositive)\n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largestNegative is null || item > largestNegative)\n           \
    \ {\n                largestNegative = item;\n            }\n        }\n     \
    \   else if(item > 0)\n        {\n            if(smallestPositive is null || item\
    \ < smallestPositive)\n            {\n                smallestPositive = item;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst) \n    {\n        if(i > 0) \n        {\n            if(smallest.isNull\
    \ || i < smallest.get) \n            {\n                smallest = i;\n      \
    \      }\n        } \n        else if(i < 0) \n        {\n            if(largest.isNull\
    \ || i > largest.get) \n            {\n                largest = i;\n        \
    \    }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    long\
    \ largest = long.min;\n    long smallest = long.max;\n    foreach(i; lst) \n \
    \   {\n        if (i < 0) \n        {\n            largest = max(largest, i);\n\
    \        }\n        else if (i > 0) \n        {\n            smallest = min(smallest,\
    \ i);\n        }\n    }\n    return tuple(largest == long.min ? null : largest,\
    \ smallest == long.max ? null : smallest);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive.isNull || i < smallest_positive.get)\n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative\
    \ is null || i > largest_negative)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallest_positive is null || i < smallest_positive)\n            {\n \
    \               smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest\
    \ = null;\n    Nullable!(long) smallest = null;\n    foreach(i; lst)\n    {\n\
    \        if(i > 0)\n        {\n            if(smallest is null)\n            {\n\
    \                smallest = i;\n            }\n            else\n            {\n\
    \                smallest = min(smallest, i);\n            }\n        }\n    \
    \    else if(i < 0)\n        {\n            if(largest is null)\n            {\n\
    \                largest = i;\n            }\n            else\n            {\n\
    \                largest = max(largest, i);\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largest = null;\n\
    \    Nullable!(long) smallest = null;\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0 && (largest is null || i > largest))\n        {\n            largest = i;\n\
    \        }\n        else if(i > 0 && (smallest is null || i < smallest))\n   \
    \     {\n            smallest = i;\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n  \
    \  Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n   \
    \ {\n        if(i < 0)\n        {\n            if(largest.isNull || i > largest.get)\n\
    \            {\n                largest = i;\n            }\n        }\n     \
    \   else if(i > 0)\n        {\n            if(smallest.isNull || i < smallest.get)\n\
    \            {\n                smallest = i;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || largestNegative < i)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || smallestPositive\
    \ > i)\n            {\n                smallestPositive = i;\n            }\n\
    \        }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(!largestNegative.isNull)\n            {\n  \
    \              if(i > largestNegative.get)\n                {\n              \
    \      largestNegative.set(i);\n                }\n            }\n           \
    \ else\n            {\n                largestNegative.set(i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(!smallestPositive.isNull)\n\
    \            {\n                if(i < smallestPositive.get)\n               \
    \ {\n                    smallestPositive.set(i);\n                }\n       \
    \     }\n            else\n            {\n                smallestPositive.set(i);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest.isNull || i > largest.get)\n            {\n  \
    \              largest = i;\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest.isNull || i < smallest.get)\n            {\n\
    \                smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n  \
    \      {\n            if(largestNegative is null || i > largestNegative)\n   \
    \         {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest.isNull || i > largest.get)\n            {\n  \
    \              largest = i;\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest.isNull || i < smallest.get)\n            {\n\
    \                smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n  \
    \  Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n   \
    \ {\n        if(i < 0)\n        {\n            if(largest.isNull || largest.get\
    \ > i)\n            {\n                largest = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallest.isNull || smallest.get\
    \ < i)\n            {\n                smallest = i;\n            }\n        }\n\
    \    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || largestNegative < elem)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || smallestPositive\
    \ > elem)\n            {\n                smallestPositive = elem;\n         \
    \   }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = l;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, l);\n            }\n        }\n        else if(l > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = l;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, l);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n        {\n      \
    \      if(largest_negative is null || l > largest_negative) \n            {\n\
    \                largest_negative = l;\n            }\n        }\n        else\
    \ if(l > 0) \n        {\n            if(smallest_positive is null || l < smallest_positive)\
    \ \n            {\n                smallest_positive = l;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}\n/*",
  "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long) smallestPositive\
    \ = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i < 0)\n      \
    \  {\n            if(largestNegative.isNull || i > largestNegative.get)\n    \
    \        {\n                largestNegative = Nullable!(long)(i);\n          \
    \  }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = Nullable!(long)(i);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largest_negative = null;\n \
    \   Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n  \
    \      if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n        else if(i < 0)\n        {\n            if(largest_negative.isNull\
    \ || i > largest_negative)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(largest\
    \ is null || e > largest)\n            {\n                largest = e;\n     \
    \       }\n        }\n        else if(e > 0)\n        {\n            if(smallest\
    \ is null || e < smallest)\n            {\n                smallest = e;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative.isNull || num > largest_negative.get)\n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else if(num > 0)\n        {\n            if(smallest_positive.isNull ||\
    \ num < smallest_positive.get)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = Nullable!(long)();\n\
    \    Nullable!(long) smallest_positive = Nullable!(long)();\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ Nullable!(long)(i);\n            }\n        }\n        else if(i > 0)\n    \
    \    {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = Nullable!(long)(i);\n    \
    \        }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largestNegative.isNull)\n            {\n   \
    \             largestNegative = Nullable!(long)(i);\n            }\n         \
    \   else\n            {\n                largestNegative = Nullable!(long)(max(largestNegative.get,\
    \ i));\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive.isNull)\n            {\n                smallestPositive\
    \ = Nullable!(long)(i);\n            }\n            else\n            {\n    \
    \            smallestPositive = Nullable!(long)(min(smallestPositive.get, i));\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(largest\
    \ is null || e > largest)\n            {\n                largest = e;\n     \
    \       }\n        }\n        else if(e > 0)\n        {\n            if(smallest\
    \ is null || e < smallest)\n            {\n                smallest = e;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest_negative = Nullable!(long)();\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long)();\n    foreach(i; lst) \n    {\n      \
    \  if(i < 0) \n        {\n            if(largest_negative.isNull || i > largest_negative.get)\
    \ \n            {\n                largest_negative = Nullable!(long)(i);\n  \
    \          }\n        }\n        else if(i > 0) \n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get) \n            {\n                smallest_positive\
    \ = Nullable!(long)(i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
