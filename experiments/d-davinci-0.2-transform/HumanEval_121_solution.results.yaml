language: d
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    return lst.filter!(x => x % 2 ==\
    \ 1 && lst.indexOf(x) % 2 == 0).sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplc4zvcsl.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplc4zvcsl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long ret = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 == 1)\n            ret += e;\n \
    \   }\n    return ret;\n}\nunittest\n{\n    alias candidate = solution;\n\n  \
    \  assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i%2 == 0 && e%2 != 0)\n        {\n            sum +=\
    \ e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate =\
    \ solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(e % 2 == 1 && i % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if (i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, item;\
    \ lst)\n    {\n        if(i % 2 == 0 && item % 2 != 0)\n        {\n          \
    \  sum += item;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i%2==0 && e%2==1)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i%2==0 && e%2!=0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ e; lst)\n    {\n        if (i % 2 == 0 && e % 2 != 0)\n        {\n         \
    \   result += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ e; lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n          \
    \  result += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i%2==0 && e%2!=0)\n        {\n            sum+=e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i%2==0 && e%2!=0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    return lst.filter!(x => x % 2 ==\
    \ 1 && lst.indexOf(x) % 2 == 0).sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplc4zvcsl.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplc4zvcsl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ e; lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n          \
    \  result += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, val;\
    \ lst)\n    {\n        if(i % 2 == 0 && val % 2 != 0)\n        {\n           \
    \ sum += val;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
