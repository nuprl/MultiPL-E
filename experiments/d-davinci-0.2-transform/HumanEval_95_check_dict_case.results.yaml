language: d
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7zgk47v.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpw7zgk47v.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7zgk47v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidh_5rlb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpidh_5rlb.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidh_5rlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5wsjut4.d(25): Error: no property `isLower` for type `string`

    /tmp/tmpz5wsjut4.d(28): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5wsjut4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            is_upper = true;\n        }\n        else if (key.isLower)\n\
    \        {\n            is_lower = true;\n        }\n        else\n        {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpex4rwa03.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpex4rwa03.d(32): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpex4rwa03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbpv2e_v.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpqbpv2e_v.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbpv2e_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zzgb22f.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zzgb22f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (k; dict.keys)\n\
    \    {\n        if (k.isUpper != is_upper) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tk0xsjx.d(25): Error: no property `isUpper` for type `string`

    /tmp/tmp8tk0xsjx.d(28): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tk0xsjx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsldqlopm.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpsldqlopm.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsldqlopm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy63typ9l.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpy63typ9l.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy63typ9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1sdf2nv9.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp1sdf2nv9.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sdf2nv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper) is_upper = true;\n        if (k.isLower)\
    \ is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzo0qyxmq.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpzo0qyxmq.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzo0qyxmq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        } \n    \
    \    else if (key.isLower) \n        {\n            all_upper = false;\n     \
    \   } \n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq2yx2p0m.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpq2yx2p0m.d(32): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2yx2p0m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_upper = true;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_lower =\
    \ true;\n        }\n        else \n        {\n            return false;\n    \
    \    }\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7s410zyr.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp7s410zyr.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7s410zyr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_upper =\
    \ dict.keys[0].isUpper;\n    foreach (k; dict.keys)\n    {\n        if (k.isUpper\
    \ != is_upper)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhqpmd_v.d(25): Error: no property `isUpper` for type `string`

    /tmp/tmplhqpmd_v.d(28): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhqpmd_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb6qr_pi.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpsb6qr_pi.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb6qr_pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavdftnvo.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavdftnvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavdftnvo.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavdftnvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (k.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu00lk9bc.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpu00lk9bc.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu00lk9bc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) is_upper = true;\n      \
    \  if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhiunnhb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmphhiunnhb.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhiunnhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_arw00q.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp6_arw00q.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_arw00q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_upper\
    \ = true;\n    bool all_lower = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdvh49ht.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxdvh49ht.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdvh49ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (k, v; dict) \n    {\n        if (k.isUpper) all_lower = false;\n        if\
    \ (k.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zylmi6h.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp3zylmi6h.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zylmi6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavdftnvo.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavdftnvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mzqkz_m.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp8mzqkz_m.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mzqkz_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(!isLower(key))\n            is_lower = false;\n        if(!isUpper(key))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5czodi4.d(29): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmpz5czodi4.d(31): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5czodi4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbpv2e_v.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpqbpv2e_v.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbpv2e_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_upper\
    \ = true;\n    bool all_lower = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdvh49ht.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxdvh49ht.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdvh49ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (!isLower(key))\n            is_lower = false;\n        if (!isUpper(key))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclmlw376.d(29): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmpclmlw376.d(31): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclmlw376.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpskwuk17n.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpskwuk17n.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpskwuk17n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.length == 0) return false;\n        if (key[0].isUpper)\
    \ is_lower = false;\n        if (key[0].isLower) is_upper = false;\n    }\n  \
    \  return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnc02xl8g.d(30): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpnc02xl8g.d(31): Error: no property `isLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnc02xl8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidh_5rlb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpidh_5rlb.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidh_5rlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(key.isUpper)\n            is_lower = false;\n        else if(key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq23tdgo_.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpq23tdgo_.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq23tdgo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \            lower = false;\n        else if (key.isLower)\n            upper\
    \ = false;\n        else\n            return false;\n    }\n    return lower ||\
    \ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rh8gwdj.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp1rh8gwdj.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rh8gwdj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj77j5g5n.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpj77j5g5n.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj77j5g5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidh_5rlb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpidh_5rlb.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidh_5rlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39i7n3ch.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp39i7n3ch.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39i7n3ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5h3xus3.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpx5h3xus3.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5h3xus3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyojlier.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpdyojlier.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyojlier.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_upper = false;\n\
    \    bool is_lower = false;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_upper = true;\n        if(key.isLower) is_lower = true;\n    }\n    return\
    \ is_upper ^ is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jvb6i2k.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp4jvb6i2k.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jvb6i2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj77j5g5n.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpj77j5g5n.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj77j5g5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\n\
    \            lower = false;\n        else if (key.isLower)\n            upper\
    \ = false;\n        else\n            return false;\n    }\n    return lower ||\
    \ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsf9sm2k.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpbsf9sm2k.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsf9sm2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) all_lower = false;\n    \
    \    if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7y2_kkf.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp_7y2_kkf.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7y2_kkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n    \
    \    if(key.isUpper)\n            all_lower = false;\n        else if(key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9wphnak.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpz9wphnak.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9wphnak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.empty) return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrx2ubvo.d(24): Error: no property `empty` for type `Nullable!(string[string])`

    /tmp/tmpvrx2ubvo.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpvrx2ubvo.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrx2ubvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        } \n    \
    \    else if (key.isLower) \n        {\n            all_upper = false;\n     \
    \   } \n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq2yx2p0m.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpq2yx2p0m.d(32): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2yx2p0m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ \n        {\n            lower = false;\n        } \n        else if (key.isLower)\
    \ \n        {\n            upper = false;\n        } \n        else \n       \
    \ {\n            return false;\n        }\n    }\n    return lower || upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzmozlel.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpvzmozlel.d(32): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzmozlel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) is_upper = true;\n      \
    \  if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhiunnhb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmphhiunnhb.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhiunnhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys) \n\
    \    {\n        if (key.isUpper) \n        {\n            lower = false;\n   \
    \     }\n        else if (key.isLower) \n        {\n            upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1mbh3qtl.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp1mbh3qtl.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mbh3qtl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_arw00q.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp6_arw00q.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_arw00q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb6qr_pi.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpsb6qr_pi.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb6qr_pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (is_lower && !isLower(key))\n            is_lower = false;\n        if\
    \ (is_upper && !isUpper(key))\n            is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_62l5bxx.d(29): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmp_62l5bxx.d(31): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_62l5bxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_upper = dict.keys[0].isUpper;\n  \
    \  foreach (key; dict.keys)\n    {\n        if (key.isUpper != is_upper)\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ccn4h59.d(27): Error: no property `isUpper` for type `string`

    /tmp/tmp2ccn4h59.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ccn4h59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1sdf2nv9.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp1sdf2nv9.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sdf2nv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.isEmpty) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbw3_rksk.d(24): Error: no property `isEmpty` for type `Nullable!(string[string])`

    /tmp/tmpbw3_rksk.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpbw3_rksk.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbw3_rksk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper) is_upper = true;\n        if(key.isLower)\
    \ is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp98vaeak5.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp98vaeak5.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98vaeak5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5h3xus3.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpx5h3xus3.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5h3xus3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper) is_lower = false;\n        if(key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6b6xf8jn.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp6b6xf8jn.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6b6xf8jn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) is_upper = true;\n      \
    \  if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhiunnhb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmphhiunnhb.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhiunnhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy63typ9l.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpy63typ9l.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy63typ9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n  \
    \          is_lower = false;\n            break;\n        }\n    }\n    if (is_lower)\n\
    \    {\n        foreach (key; dict.keys)\n        {\n            if (key.isLower)\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    else\n    {\n        foreach (key; dict.keys)\n        {\n            if\
    \ (key.isLower)\n            {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpblx26wpg.d(27): Error: no property `isUpper` for type `string`

    /tmp/tmpblx26wpg.d(37): Error: no property `isLower` for type `string`

    /tmp/tmpblx26wpg.d(47): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblx26wpg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6x5b3x3x.d(28): Error: no property `isLower` for type `string`

    /tmp/tmp6x5b3x3x.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6x5b3x3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        all_lower = all_lower && key.isLower;\n   \
    \     all_upper = all_upper && key.isUpper;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqziqr2nw.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpqziqr2nw.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqziqr2nw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuq4smne4.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpuq4smne4.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuq4smne4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb6qr_pi.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpsb6qr_pi.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb6qr_pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj77j5g5n.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpj77j5g5n.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj77j5g5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavdftnvo.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavdftnvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys)\n    {\n\
    \        if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplc4b_bfw.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmplc4b_bfw.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplc4b_bfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb6qr_pi.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpsb6qr_pi.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb6qr_pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.empty) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2t16hi6d.d(24): Error: no property `empty` for type `Nullable!(string[string])`

    /tmp/tmp2t16hi6d.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp2t16hi6d.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t16hi6d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmpr8ccv8.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpmpr8ccv8.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmpr8ccv8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpie12_8d4.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpie12_8d4.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpie12_8d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39i7n3ch.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp39i7n3ch.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39i7n3ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsldqlopm.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpsldqlopm.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsldqlopm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5h3xus3.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpx5h3xus3.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5h3xus3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsuyj4a0k.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpsuyj4a0k.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsuyj4a0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper) all_lower = false;\n        if(key.isLower)\
    \ all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrua5rlm.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpqrua5rlm.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrua5rlm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqaii7aa.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpmqaii7aa.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqaii7aa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (!isLower(key))\n            is_lower = false;\n        if (!isUpper(key))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclmlw376.d(29): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmpclmlw376.d(31): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclmlw376.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n    \
    \    if(key.isUpper)\n            all_lower = false;\n        else if(key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9wphnak.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpz9wphnak.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9wphnak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    foreach (k,\
    \ v; dict)\n    {\n        if (k.isUpper) is_lower = false;\n        if (k.isLower)\
    \ is_upper = false;\n    }\n    return is_upper || is_lower;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05el2tvd.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp05el2tvd.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05el2tvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwgh705hc.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpwgh705hc.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgh705hc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\
    \ all_lower = false;\n        if (k.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6mkn8v0.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpc6mkn8v0.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6mkn8v0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj77j5g5n.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpj77j5g5n.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj77j5g5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_upper =\
    \ false;\n    bool is_lower = false;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9n9pav55.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp9n9pav55.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9n9pav55.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mzqkz_m.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp8mzqkz_m.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mzqkz_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj77j5g5n.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpj77j5g5n.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj77j5g5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy63typ9l.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpy63typ9l.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy63typ9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5h3xus3.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpx5h3xus3.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5h3xus3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_arw00q.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp6_arw00q.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_arw00q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper != is_upper) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpixuulv7f.d(25): Error: no property `isUpper` for type `string`

    /tmp/tmpixuulv7f.d(28): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixuulv7f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtid87k5.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpdtid87k5.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtid87k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsldqlopm.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpsldqlopm.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsldqlopm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mzqkz_m.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp8mzqkz_m.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mzqkz_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    else\n    {\n \
    \       bool is_lower = true;\n        bool is_upper = true;\n        foreach\
    \ (key; dict.keys)\n        {\n            is_lower = is_lower && key.isLower;\n\
    \            is_upper = is_upper && key.isUpper;\n        }\n        return is_lower\
    \ || is_upper;\n    }\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwf1oieh.d(31): Error: no property `isLower` for type `string`

    /tmp/tmpxwf1oieh.d(32): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwf1oieh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyojlier.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpdyojlier.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyojlier.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= islower(key);\n        is_upper &= isupper(key);\n    }\n   \
    \ return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibmru8u9.d(29): Error: undefined identifier `islower`, did you
    mean variable `is_lower`?

    /tmp/tmpibmru8u9.d(30): Error: undefined identifier `isupper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibmru8u9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    auto lower = true;\n\
    \    auto upper = true;\n    foreach (key; dict.keys)\n    {\n        if (lower\
    \ && key != key.toLower)\n            lower = false;\n        if (upper && key\
    \ != key.toUpper)\n            upper = false;\n    }\n    return lower || upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcl02gspy.d(29): Error: no property `toLower` for type `string`

    /tmp/tmpcl02gspy.d(31): Error: no property `toUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcl02gspy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper)\n            all_lower = false;\n        else if (k.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjtxkfnjq.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpjtxkfnjq.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtxkfnjq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr18qkcn.d(31): Error: no property `isLower` for type `string`

    /tmp/tmpmr18qkcn.d(32): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr18qkcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxiu4oz31.d(35): Error: no property `isLower` for type `string`

    /tmp/tmpxiu4oz31.d(36): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxiu4oz31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        all_lower\
    \ &= key.isLower;\n        all_upper &= key.isUpper;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz4trt6pr.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpz4trt6pr.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4trt6pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isUpper =\
    \ true;\n    bool isLower = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   if (key.isUpper)\n            isLower = false;\n        else if (key.isLower)\n\
    \            isUpper = false;\n        else\n            return false;\n    }\n\
    \    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsbrct7h.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpbsbrct7h.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsbrct7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s4z4sd1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp1s4z4sd1.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s4z4sd1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyojlier.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpdyojlier.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyojlier.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidh_5rlb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpidh_5rlb.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidh_5rlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (k; dict.keys)\n\
    \    {\n        if (k.isLower != is_lower) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd9per8b.d(25): Error: no property `isLower` for type `string`

    /tmp/tmpbd9per8b.d(28): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd9per8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy63typ9l.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpy63typ9l.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy63typ9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1sdf2nv9.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp1sdf2nv9.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sdf2nv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_arw00q.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp6_arw00q.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_arw00q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            is_upper = true;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_lower = true;\n   \
    \     }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0i285tx6.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmp0i285tx6.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i285tx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n   \
    \     is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpov1izzrr.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpov1izzrr.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpov1izzrr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqc4oshua.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpqc4oshua.d(33): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqc4oshua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isLower =\
    \ true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   if (key.isUpper)\n            isLower = false;\n        else if (key.isLower)\n\
    \            isUpper = false;\n        else\n            return false;\n    }\n\
    \    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa537wro0.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpa537wro0.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa537wro0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys)\n    {\n\
    \        if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplc4b_bfw.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmplc4b_bfw.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplc4b_bfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n        is_lower\
    \ &= k.isLower;\n        is_upper &= k.isUpper;\n    }\n    return is_lower ||\
    \ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qrabq6v.d(29): Error: no property `isLower` for type `string`

    /tmp/tmp1qrabq6v.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qrabq6v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull) return false;\n    if (dict.isEmpty) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            all_lower = false;\n\
    \        else if (key.isLower)\n            all_upper = false;\n        else\n\
    \            return false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77mrkr_2.d(24): Error: no property `isEmpty` for type `Nullable!(string[string])`

    /tmp/tmp77mrkr_2.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp77mrkr_2.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77mrkr_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb6qr_pi.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpsb6qr_pi.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb6qr_pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ else if (dict.length == 0) \n    {\n        return false;\n    }\n    else \n\
    \    {\n        bool all_lower = true;\n        bool all_upper = true;\n     \
    \   foreach (key; dict.keys) \n        {\n            if (key.isUpper) \n    \
    \        {\n                all_lower = false;\n            }\n            else\
    \ if (key.isLower) \n            {\n                all_upper = false;\n     \
    \       }\n            else \n            {\n                return false;\n \
    \           }\n        }\n        return all_lower || all_upper;\n    }\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpajepwabp.d(37): Error: no property `isUpper` for type `string`

    /tmp/tmpajepwabp.d(41): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpajepwabp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s4z4sd1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp1s4z4sd1.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s4z4sd1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidh_5rlb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpidh_5rlb.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidh_5rlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqaii7aa.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpmqaii7aa.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqaii7aa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbpv2e_v.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpqbpv2e_v.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbpv2e_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool isUpper = dict.keys[0].isUpper;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper != isUpper) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtnfjqp9.d(25): Error: no property `isUpper` for type `string`

    /tmp/tmprtnfjqp9.d(28): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtnfjqp9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        all_lower &= key.isLower;\n        all_upper &= key.isUpper;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprvgwhw0x.d(35): Error: no property `isLower` for type `string`

    /tmp/tmprvgwhw0x.d(36): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvgwhw0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.empty) return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isLower) is_upper = false;\n        if (key.isUpper)\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1etyq7o.d(24): Error: no property `empty` for type `Nullable!(string[string])`

    /tmp/tmpz1etyq7o.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpz1etyq7o.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1etyq7o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = dict.keys[0].isLower;\n  \
    \  foreach (key; dict.keys)\n    {\n        if (key.isLower != is_lower)\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdyayy53.d(27): Error: no property `isLower` for type `string`

    /tmp/tmptdyayy53.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdyayy53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            is_upper = true;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_lower = true;\n   \
    \     }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0i285tx6.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmp0i285tx6.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i285tx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else \n        {\n            all_upper = false;\n        }\n  \
    \  }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw3u94w96.d(35): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3u94w96.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (!key.isUpper)\n            is_upper = false;\n        if (!key.isLower)\n\
    \            is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39j7pvbk.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp39j7pvbk.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39j7pvbk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        is_lower = is_lower && k.isLower;\n        is_upper\
    \ = is_upper && k.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnn8i9cj8.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpnn8i9cj8.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnn8i9cj8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbpv2e_v.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpqbpv2e_v.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbpv2e_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_upper = true;\n    bool all_lower = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgvm716si.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpgvm716si.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvm716si.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtid87k5.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpdtid87k5.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtid87k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_5k_jc8.d(28): Error: no property `isLower` for type `string`

    /tmp/tmpw_5k_jc8.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_5k_jc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) all_lower = false;\n    \
    \    if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7y2_kkf.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp_7y2_kkf.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7y2_kkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper) all_lower = false;\n        if (k.isLower)\
    \ all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7xygle4n.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp7xygle4n.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xygle4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0yznnawr.d(25): Error: no property `isLower` for type `string`

    /tmp/tmp0yznnawr.d(28): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0yznnawr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy63typ9l.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpy63typ9l.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy63typ9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s4z4sd1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp1s4z4sd1.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s4z4sd1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q833__.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpp6q833__.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q833__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7zgk47v.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpw7zgk47v.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7zgk47v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcbykpur.d(31): Error: no property `isLower` for type `string`

    /tmp/tmpzcbykpur.d(32): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcbykpur.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s4z4sd1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmp1s4z4sd1.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s4z4sd1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7zgk47v.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpw7zgk47v.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7zgk47v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtid87k5.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpdtid87k5.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtid87k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        if (k.isUpper) is_lower = false;\n        if (k.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpntesfrm1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpntesfrm1.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpntesfrm1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ else if (dict.length == 0) \n    {\n        return false;\n    }\n    else \n\
    \    {\n        bool all_lower = true;\n        bool all_upper = true;\n     \
    \   foreach (key; dict.keys) \n        {\n            if (key.isUpper) \n    \
    \        {\n                all_lower = false;\n            }\n            else\
    \ if (key.isLower) \n            {\n                all_upper = false;\n     \
    \       }\n            else \n            {\n                return false;\n \
    \           }\n        }\n        return all_lower || all_upper;\n    }\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpajepwabp.d(37): Error: no property `isUpper` for type `string`

    /tmp/tmpajepwabp.d(41): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpajepwabp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpie12_8d4.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpie12_8d4.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpie12_8d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \   {\n            is_lower = false;\n            break;\n        }\n    }\n \
    \   if (is_lower)\n    {\n        foreach (key; dict.keys)\n        {\n      \
    \      if (!key.isLower)\n                return false;\n        }\n    }\n  \
    \  else\n    {\n        foreach (key; dict.keys)\n        {\n            if (!key.isUpper)\n\
    \                return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfaq8y860.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpfaq8y860.d(38): Error: no property `isLower` for type `string`

    /tmp/tmpfaq8y860.d(46): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfaq8y860.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_upper = true;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_lower =\
    \ true;\n        }\n        else \n        {\n            return false;\n    \
    \    }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2v4_z6al.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmp2v4_z6al.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2v4_z6al.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.length == 0)\n \
    \           return false;\n        if (key[0].isUpper)\n            is_lower =\
    \ false;\n        else if (key[0].isLower)\n            is_lower = true;\n   \
    \     else\n            return false;\n    }\n    return is_lower || !is_lower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzu8npu9w.d(30): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpzu8npu9w.d(32): Error: no property `isLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzu8npu9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys) \n    {\n\
    \        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n \
    \   return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2notox3.d(29): Error: no property `isLower` for type `string`

    /tmp/tmpp2notox3.d(30): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2notox3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(key.isUpper)\n            is_lower = false;\n        else if(key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq23tdgo_.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpq23tdgo_.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq23tdgo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    auto keys = dict.keys;\n\
    \    if (keys.length == 0) return false;\n    bool is_lower = keys[0].isLower;\n\
    \    foreach (key; keys)\n    {\n        if (key.isLower != is_lower) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcqfrntci.d(26): Error: no property `isLower` for type `string`

    /tmp/tmpcqfrntci.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqfrntci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.isNull) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppg4h_n2t.d(30): Error: no property `isUpper` for type `string`

    /tmp/tmppg4h_n2t.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppg4h_n2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        if (k.isUpper) is_lower = false;\n        if (k.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpntesfrm1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpntesfrm1.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpntesfrm1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isLower =\
    \ true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   if (key.isUpper)\n            isLower = false;\n        else\n           \
    \ isUpper = false;\n    }\n    return isLower || isUpper;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzbwidnm.d(29): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzbwidnm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n        if\
    \ (k.isUpper)\n            is_lower = false;\n        else if (k.isLower)\n  \
    \          is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkuzm1b29.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpkuzm1b29.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuzm1b29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu7pwexz.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxu7pwexz.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu7pwexz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zzgb22f.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zzgb22f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mzqkz_m.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmp8mzqkz_m.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mzqkz_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.isEmpty) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxc4t2egy.d(27): Error: no property `isEmpty` for type `Nullable!(string[string])`

    /tmp/tmpxc4t2egy.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmpxc4t2egy.d(39): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxc4t2egy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy63typ9l.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpy63typ9l.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy63typ9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys)\n    {\n\
    \        if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplc4b_bfw.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmplc4b_bfw.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplc4b_bfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbpv2e_v.d(28): Error: no property `isUpper` for type `string`

    /tmp/tmpqbpv2e_v.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbpv2e_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isUpper =\
    \ false;\n    bool isLower = false;\n    foreach (key; dict.keys)\n    {\n   \
    \     if (key.isUpper)\n            isUpper = true;\n        else if (key.isLower)\n\
    \            isLower = true;\n        else\n            return false;\n    }\n\
    \    return isUpper ^ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxnuh4a8.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpnxnuh4a8.d(31): Error: no property `isLower` for type `string`

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtid87k5.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpdtid87k5.d(30): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtid87k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zzgb22f.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zzgb22f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_upper\
    \ = true;\n    bool is_lower = true;\n    foreach (key; dict.keys) \n    {\n \
    \       is_upper &= key.isUpper;\n        is_lower &= key.isLower;\n    }\n  \
    \  return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40qlwg9i.d(35): Error: no property `isUpper` for type `string`

    /tmp/tmp40qlwg9i.d(36): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40qlwg9i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.isEmpty)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n            all_lower\
    \ = false;\n        else if (key.isLower)\n            all_upper = false;\n  \
    \      else\n            return false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpspyp26ac.d(25): Error: no property `isEmpty` for type `Nullable!(string[string])`

    /tmp/tmpspyp26ac.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpspyp26ac.d(33): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspyp26ac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1qkjzw1.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpc1qkjzw1.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1qkjzw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidh_5rlb.d(29): Error: no property `isUpper` for type `string`

    /tmp/tmpidh_5rlb.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidh_5rlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zzgb22f.d(31): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zzgb22f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (!isLower(key))\
    \ is_lower = false;\n        if (!isUpper(key)) is_upper = false;\n    }\n   \
    \ return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbl2udk6q.d(28): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmpbl2udk6q.d(29): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbl2udk6q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164295
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7zgk47v.d(31): Error: no property `isUpper` for type `string`

    /tmp/tmpw7zgk47v.d(35): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7zgk47v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
