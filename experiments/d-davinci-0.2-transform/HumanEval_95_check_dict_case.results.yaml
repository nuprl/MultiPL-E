language: d
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoktjeevw.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpoktjeevw.d(35):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpoktjeevw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3k4s1ip.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpa3k4s1ip.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa3k4s1ip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7iul9dwd.d(25): Error: no property `isLower` for type `string`\n/tmp/tmp7iul9dwd.d(28):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7iul9dwd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            is_upper = true;\n        }\n        else if (key.isLower)\n\
    \        {\n            is_lower = true;\n        }\n        else\n        {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppscd382e.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmppscd382e.d(32):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppscd382e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzix46z55.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpzix46z55.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzix46z55.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9cm8ht6y.d(31): Error: no property `isUpper` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cm8ht6y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (k; dict.keys)\n\
    \    {\n        if (k.isUpper != is_upper) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4oxi2t6p.d(25): Error: no property `isUpper` for type `string`\n/tmp/tmp4oxi2t6p.d(28):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4oxi2t6p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9ll50nd.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpq9ll50nd.d(33):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq9ll50nd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptbc7ttbe.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmptbc7ttbe.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptbc7ttbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i798p6o.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmp6i798p6o.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6i798p6o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper) is_upper = true;\n        if (k.isLower)\
    \ is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_152_0e.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmp3_152_0e.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3_152_0e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        } \n    \
    \    else if (key.isLower) \n        {\n            all_upper = false;\n     \
    \   } \n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjp809foa.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpjp809foa.d(32):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjp809foa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_upper = true;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_lower =\
    \ true;\n        }\n        else \n        {\n            return false;\n    \
    \    }\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a79lt6j.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmp0a79lt6j.d(35):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0a79lt6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_upper =\
    \ dict.keys[0].isUpper;\n    foreach (k; dict.keys)\n    {\n        if (k.isUpper\
    \ != is_upper)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyrnucs61.d(25): Error: no property `isUpper` for type `string`\n/tmp/tmpyrnucs61.d(28):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyrnucs61.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv4ijtxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799816
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy07_rxjl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy07_rxjl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (k.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0h9h8zp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) is_upper = true;\n      \
    \  if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfin4ffrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky4b8d_7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_upper\
    \ = true;\n    bool all_lower = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69gpe19l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (k, v; dict) \n    {\n        if (k.isUpper) all_lower = false;\n        if\
    \ (k.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuh4ioaa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy07_rxjl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49mhkn1y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(!isLower(key))\n            is_lower = false;\n        if(!isUpper(key))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwq1edavj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzix46z55.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpzix46z55.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzix46z55.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_upper\
    \ = true;\n    bool all_lower = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69gpe19l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (!isLower(key))\n            is_lower = false;\n        if (!isUpper(key))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3y2u4mp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6viqlu1a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.length == 0) return false;\n        if (key[0].isUpper)\
    \ is_lower = false;\n        if (key[0].isLower) is_upper = false;\n    }\n  \
    \  return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsf8yg4xt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3k4s1ip.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpa3k4s1ip.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa3k4s1ip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(key.isUpper)\n            is_lower = false;\n        else if(key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82zxgdwt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \            lower = false;\n        else if (key.isLower)\n            upper\
    \ = false;\n        else\n            return false;\n    }\n    return lower ||\
    \ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofnzu_81.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oeom5st.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3k4s1ip.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpa3k4s1ip.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa3k4s1ip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0gd8pt6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpviq6zurx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk2kwfsb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_upper = false;\n\
    \    bool is_lower = false;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_upper = true;\n        if(key.isLower) is_lower = true;\n    }\n    return\
    \ is_upper ^ is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpika_wdln.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oeom5st.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\n\
    \            lower = false;\n        else if (key.isLower)\n            upper\
    \ = false;\n        else\n            return false;\n    }\n    return lower ||\
    \ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkuykmu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) all_lower = false;\n    \
    \    if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0lvokhn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n    \
    \    if(key.isUpper)\n            all_lower = false;\n        else if(key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpif0srog8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.empty) return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk_2p38f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        } \n    \
    \    else if (key.isLower) \n        {\n            all_upper = false;\n     \
    \   } \n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjp809foa.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpjp809foa.d(32):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjp809foa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ \n        {\n            lower = false;\n        } \n        else if (key.isLower)\
    \ \n        {\n            upper = false;\n        } \n        else \n       \
    \ {\n            return false;\n        }\n    }\n    return lower || upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqk96cm9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) is_upper = true;\n      \
    \  if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfin4ffrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys) \n\
    \    {\n        if (key.isUpper) \n        {\n            lower = false;\n   \
    \     }\n        else if (key.isLower) \n        {\n            upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4cdvrp5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky4b8d_7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv4ijtxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799816
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (is_lower && !isLower(key))\n            is_lower = false;\n        if\
    \ (is_upper && !isUpper(key))\n            is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8xw2gb6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_upper = dict.keys[0].isUpper;\n  \
    \  foreach (key; dict.keys)\n    {\n        if (key.isUpper != is_upper)\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0t0la07_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i798p6o.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmp6i798p6o.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6i798p6o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.isEmpty) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1lilfh9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper) is_upper = true;\n        if(key.isLower)\
    \ is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp166njd80.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpviq6zurx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper) is_lower = false;\n        if(key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpmzar9d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) is_upper = true;\n      \
    \  if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfin4ffrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptbc7ttbe.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmptbc7ttbe.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptbc7ttbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n  \
    \          is_lower = false;\n            break;\n        }\n    }\n    if (is_lower)\n\
    \    {\n        foreach (key; dict.keys)\n        {\n            if (key.isLower)\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    else\n    {\n        foreach (key; dict.keys)\n        {\n            if\
    \ (key.isLower)\n            {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphw_1z36k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_o2j04g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        all_lower = all_lower && key.isLower;\n   \
    \     all_upper = all_upper && key.isUpper;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsxptk0f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqeaghuv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv4ijtxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799816
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oeom5st.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy07_rxjl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys)\n    {\n\
    \        if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphivhj0oi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv4ijtxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799816
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.empty) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5w2wk2vi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg8063tbb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8td0p751.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0gd8pt6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9ll50nd.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpq9ll50nd.d(33):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq9ll50nd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpviq6zurx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvjotxxt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper) all_lower = false;\n        if(key.isLower)\
    \ all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz63k_wnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_by68py.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (!isLower(key))\n            is_lower = false;\n        if (!isUpper(key))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3y2u4mp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n    \
    \    if(key.isUpper)\n            all_lower = false;\n        else if(key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpif0srog8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    foreach (k,\
    \ v; dict)\n    {\n        if (k.isUpper) is_lower = false;\n        if (k.isLower)\
    \ is_upper = false;\n    }\n    return is_upper || is_lower;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgxvhfzh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl5bfypn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\
    \ all_lower = false;\n        if (k.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsslicv3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oeom5st.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_upper =\
    \ false;\n    bool is_lower = false;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbg02agmb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49mhkn1y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oeom5st.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptbc7ttbe.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmptbc7ttbe.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptbc7ttbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpviq6zurx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky4b8d_7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper != is_upper) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxghzgd8u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllb08nv8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9ll50nd.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpq9ll50nd.d(33):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq9ll50nd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49mhkn1y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    else\n    {\n \
    \       bool is_lower = true;\n        bool is_upper = true;\n        foreach\
    \ (key; dict.keys)\n        {\n            is_lower = is_lower && key.isLower;\n\
    \            is_upper = is_upper && key.isUpper;\n        }\n        return is_lower\
    \ || is_upper;\n    }\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgm4cmt5b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk2kwfsb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= islower(key);\n        is_upper &= isupper(key);\n    }\n   \
    \ return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lzfx0zh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    auto lower = true;\n\
    \    auto upper = true;\n    foreach (key; dict.keys)\n    {\n        if (lower\
    \ && key != key.toLower)\n            lower = false;\n        if (upper && key\
    \ != key.toUpper)\n            upper = false;\n    }\n    return lower || upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7oh2pndp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper)\n            all_lower = false;\n        else if (k.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn2bjulk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsffax9nz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcodg_ga0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        all_lower\
    \ &= key.isLower;\n        all_upper &= key.isUpper;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_qsc47f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isUpper =\
    \ true;\n    bool isLower = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   if (key.isUpper)\n            isLower = false;\n        else if (key.isLower)\n\
    \            isUpper = false;\n        else\n            return false;\n    }\n\
    \    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkoefp6fv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_8g3e5m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk2kwfsb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3k4s1ip.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpa3k4s1ip.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa3k4s1ip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (k; dict.keys)\n\
    \    {\n        if (k.isLower != is_lower) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5q8c3f6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptbc7ttbe.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmptbc7ttbe.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptbc7ttbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i798p6o.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmp6i798p6o.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6i798p6o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky4b8d_7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            is_upper = true;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_lower = true;\n   \
    \     }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcfatpcx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n   \
    \     is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg0xg1ql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_40_z4ob.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isLower =\
    \ true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   if (key.isUpper)\n            isLower = false;\n        else if (key.isLower)\n\
    \            isUpper = false;\n        else\n            return false;\n    }\n\
    \    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4vkkmt_6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys)\n    {\n\
    \        if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphivhj0oi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n        is_lower\
    \ &= k.isLower;\n        is_upper &= k.isUpper;\n    }\n    return is_lower ||\
    \ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7e3jov1a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull) return false;\n    if (dict.isEmpty) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            all_lower = false;\n\
    \        else if (key.isLower)\n            all_upper = false;\n        else\n\
    \            return false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc52qun1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv4ijtxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799816
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ else if (dict.length == 0) \n    {\n        return false;\n    }\n    else \n\
    \    {\n        bool all_lower = true;\n        bool all_upper = true;\n     \
    \   foreach (key; dict.keys) \n        {\n            if (key.isUpper) \n    \
    \        {\n                all_lower = false;\n            }\n            else\
    \ if (key.isLower) \n            {\n                all_upper = false;\n     \
    \       }\n            else \n            {\n                return false;\n \
    \           }\n        }\n        return all_lower || all_upper;\n    }\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6r96ydn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_8g3e5m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3k4s1ip.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpa3k4s1ip.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa3k4s1ip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_by68py.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzix46z55.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpzix46z55.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzix46z55.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    if(dict.length == 0) return\
    \ false;\n    bool isUpper = dict.keys[0].isUpper;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper != isUpper) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqyus5de.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        all_lower &= key.isLower;\n        all_upper &= key.isUpper;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplklw9vbb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.empty) return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isLower) is_upper = false;\n        if (key.isUpper)\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdzy96w5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = dict.keys[0].isLower;\n  \
    \  foreach (key; dict.keys)\n    {\n        if (key.isLower != is_lower)\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9sslm_d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            is_upper = true;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_lower = true;\n   \
    \     }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcfatpcx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else \n        {\n            all_upper = false;\n        }\n  \
    \  }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmad8y68o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (!key.isUpper)\n            is_upper = false;\n        if (!key.isLower)\n\
    \            is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyf4c43y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        is_lower = is_lower && k.isLower;\n        is_upper\
    \ = is_upper && k.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3d_ajg1m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzix46z55.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpzix46z55.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzix46z55.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_upper = true;\n    bool all_lower = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8n289z5e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllb08nv8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyr49axh.d(28): Error: no property `isLower` for type `string`\n/tmp/tmpsyr49axh.d(29):
    Error: no property `isUpper` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsyr49axh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) all_lower = false;\n    \
    \    if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0lvokhn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper) all_lower = false;\n        if (k.isLower)\
    \ all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmproqlp4so.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmto1cua0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptbc7ttbe.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmptbc7ttbe.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptbc7ttbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_8g3e5m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4e86k9rk.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmp4e86k9rk.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4e86k9rk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoktjeevw.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpoktjeevw.d(35):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpoktjeevw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsm2l7a2m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_8g3e5m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoktjeevw.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpoktjeevw.d(35):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpoktjeevw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllb08nv8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        if (k.isUpper) is_lower = false;\n        if (k.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91f5nrdn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ else if (dict.length == 0) \n    {\n        return false;\n    }\n    else \n\
    \    {\n        bool all_lower = true;\n        bool all_upper = true;\n     \
    \   foreach (key; dict.keys) \n        {\n            if (key.isUpper) \n    \
    \        {\n                all_lower = false;\n            }\n            else\
    \ if (key.isLower) \n            {\n                all_upper = false;\n     \
    \       }\n            else \n            {\n                return false;\n \
    \           }\n        }\n        return all_lower || all_upper;\n    }\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6r96ydn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8td0p751.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \   {\n            is_lower = false;\n            break;\n        }\n    }\n \
    \   if (is_lower)\n    {\n        foreach (key; dict.keys)\n        {\n      \
    \      if (!key.isLower)\n                return false;\n        }\n    }\n  \
    \  else\n    {\n        foreach (key; dict.keys)\n        {\n            if (!key.isUpper)\n\
    \                return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ff041lu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_upper = true;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_lower =\
    \ true;\n        }\n        else \n        {\n            return false;\n    \
    \    }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabsu9hrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.length == 0)\n \
    \           return false;\n        if (key[0].isUpper)\n            is_lower =\
    \ false;\n        else if (key[0].isLower)\n            is_lower = true;\n   \
    \     else\n            return false;\n    }\n    return is_lower || !is_lower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvw1uav3l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys) \n    {\n\
    \        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n \
    \   return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp65ri1q4u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(key.isUpper)\n            is_lower = false;\n        else if(key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82zxgdwt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    auto keys = dict.keys;\n\
    \    if (keys.length == 0) return false;\n    bool is_lower = keys[0].isLower;\n\
    \    foreach (key; keys)\n    {\n        if (key.isLower != is_lower) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpejqxk5ya.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.isNull) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74iaklxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        if (k.isUpper) is_lower = false;\n        if (k.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91f5nrdn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isLower =\
    \ true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   if (key.isUpper)\n            isLower = false;\n        else\n           \
    \ isUpper = false;\n    }\n    return isLower || isUpper;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1y8yhy44.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n        if\
    \ (k.isUpper)\n            is_lower = false;\n        else if (k.isLower)\n  \
    \          is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7qjuqoy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfpnokpi.d(35): Error: no property `isUpper` for type `string`\n/tmp/tmpjfpnokpi.d(39):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjfpnokpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9cm8ht6y.d(31): Error: no property `isUpper` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cm8ht6y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49mhkn1y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.isEmpty) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4asp89yf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptbc7ttbe.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmptbc7ttbe.d(30):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptbc7ttbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict.isNull)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.get.keys)\n    {\n\
    \        if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphivhj0oi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzix46z55.d(28): Error: no property `isUpper` for type `string`\n/tmp/tmpzix46z55.d(29):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzix46z55.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isUpper =\
    \ false;\n    bool isLower = false;\n    foreach (key; dict.keys)\n    {\n   \
    \     if (key.isUpper)\n            isUpper = true;\n        else if (key.isLower)\n\
    \            isLower = true;\n        else\n            return false;\n    }\n\
    \    return isUpper ^ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmox6oqt7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllb08nv8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9cm8ht6y.d(31): Error: no property `isUpper` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cm8ht6y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_upper\
    \ = true;\n    bool is_lower = true;\n    foreach (key; dict.keys) \n    {\n \
    \       is_upper &= key.isUpper;\n        is_lower &= key.isLower;\n    }\n  \
    \  return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tbk1060.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.isEmpty)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n            all_lower\
    \ = false;\n        else if (key.isLower)\n            all_upper = false;\n  \
    \      else\n            return false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzujgd_nf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnewn6tj4.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpnewn6tj4.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnewn6tj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3k4s1ip.d(29): Error: no property `isUpper` for type `string`\n/tmp/tmpa3k4s1ip.d(31):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa3k4s1ip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n         \
    \   all_lower = false;\n        else\n            all_upper = false;\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9cm8ht6y.d(31): Error: no property `isUpper` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cm8ht6y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (!isLower(key))\
    \ is_lower = false;\n        if (!isUpper(key)) is_upper = false;\n    }\n   \
    \ return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg81cn3or.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799817
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoktjeevw.d(31): Error: no property `isUpper` for type `string`\n/tmp/tmpoktjeevw.d(35):
    Error: no property `isLower` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpoktjeevw.d", "-I/tmp"]\n'''
  stdout: b''
