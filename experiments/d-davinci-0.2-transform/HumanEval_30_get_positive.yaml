name: HumanEval_30_get_positive
language: d
prompt: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
  \ get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
  \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
  \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n"
tests: "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
  \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L,\
  \ 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
  \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
completions: ["{\n    return l.filter!(x => x > 0);\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(x; l)\n    {\n        if(x > 0)\n\
    \        {\n            result ~= x;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only negative numbers in the list.\n    >>> get_negative([-1L, 2L,\
    \ -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n       \
    \ if(i < 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn only even numbers in the list.\n    >>> get_even([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn only odd numbers in the list.\n    >>> get_odd([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [-1L, 5L]\n    >>> get_odd([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, -5L, -3L, 3L, 9", "{\n    long[] result;\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n}",
  "{\n    long[] result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n\
    \        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] res = new long[0];\n    foreach(long i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n \
    \   {\n        if(i > 0)\n        {\n            result[count] = i;\n        \
    \    count++;\n        }\n    }\n    return result[0..count];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
