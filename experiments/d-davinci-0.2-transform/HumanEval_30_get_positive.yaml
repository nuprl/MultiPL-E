name: HumanEval_30_get_positive
language: d
prompt: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
  \ get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
  \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
  \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n"
tests: "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
  \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L,\
  \ 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
  \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
completions: ["{\n    return l.filter!(x => x > 0);\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(x; l)\n    {\n        if(x > 0)\n\
    \        {\n            result ~= x;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only negative numbers in the list.\n    >>> get_negative([-1L, 2L,\
    \ -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n       \
    \ if(i < 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn only even numbers in the list.\n    >>> get_even([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn only odd numbers in the list.\n    >>> get_odd([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [-1L, 5L]\n    >>> get_odd([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, -5L, -3L, 3L, 9", "{\n    long[] result;\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n}",
  "{\n    long[] result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n\
    \        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] res = new long[0];\n    foreach(long i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n \
    \   {\n        if(i > 0)\n        {\n            result[count] = i;\n        \
    \    count++;\n        }\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ res = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ res = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int j = 0;\n    foreach(i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result[j] = i;\n           \
    \ j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n    \
    \        j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int count = 0;\n    foreach(long x; l)\n \
    \   {\n        if(x > 0)\n        {\n            result[count] = x;\n        \
    \    count++;\n        }\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ res = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n}\n\
    /*\nReturn only negative numbers in the list.\n    >>> get_negative([-1L, 2L,\
    \ -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n     \
    \   if(i < 0)\n        {\n            ret ~= i;\n        }\n    }\n    return\
    \ ret;\n}\n/*\nReturn only even numbers in the list.\n    >>> get_even([-1L, 2L,\
    \ -4L, 5L, 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[] l)\
    \ \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n\
    }\n/*\nReturn only odd numbers in the list.\n    >>> get_odd([-1L, 2L, -4L, 5L,\
    \ 6L])\n    [-1L, 5L]\n    >>> get_odd([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    [5L, 3L, -5L, -3L, 3", "{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn only negative numbers in the list.\n\
    \    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[]\
    \ get_negative(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] < 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn only even numbers in the list.\n    >>> get_even([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L, 123L, -10L]\n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] % 2 == 0)\n        {\n  \
    \          result[j] = l[i];\n            j++;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn only odd numbers in the list.\n    >>> get_odd([-1L", "{\n    long[]\
    \ result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    long[] res = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n\
    \    long[] res;\n    foreach(l; e)\n    {\n        if(e > 0)\n        {\n   \
    \         res ~= e;\n        }\n    }\n    return res;\n}", "{\n    long[] result\
    \ = new long[0];\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            result ~= x;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ l.filter!(x => x > 0);\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] ret = new long[0];\n\
    \    foreach(num; l)\n    {\n        if(num > 0)\n        {\n            ret ~=\
    \ num;\n        }\n    }\n    return ret;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}", "{\n    return l.filter!(x => x > 0);\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int i = 0;\n \
    \   foreach(long x; l)\n    {\n        if(x > 0)\n        {\n            result[i]\
    \ = x;\n            i++;\n        }\n    }\n    return result[0..i];\n}", "{\n\
    \    long[] result;\n    foreach(x; l)\n    {\n        if(x > 0)\n        {\n\
    \            result ~= x;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{ \n    long[] ret = new long[l.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            ret[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n\
    \    long[] result = [];\n    foreach(long i; l)\n    {\n        if(i > 0)\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] res = new long[l.length];\n    int i = 0;\n    foreach(long\
    \ x; l)\n    {\n        if(x > 0)\n        {\n            res[i] = x;\n      \
    \      i++;\n        }\n    }\n    return res[0..i];\n}", "{\n    long[] result;\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ l.filter!(x => x > 0);\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(x; l)\n    {\n        if(x > 0)\n        {\n            result ~=\
    \ x;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if\
    \ (l[i] > 0)\n        {\n            result[count] = l[i];\n            count++;\n\
    \        }\n    }\n    return result[0..count];\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n  \
    \  {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n      \
    \      j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[];\n    foreach(long i; l)\n    {\n     \
    \   if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int j = 0;\n \
    \   for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n     \
    \   {\n            result[j] = l[i];\n            j++;\n        }\n    }\n   \
    \ return result[0..j];\n}", "{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}", "{\n    long[] result;\n    foreach(long i; l)\n    {\n\
    \        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n\tlong[] result = new long[l.length];\n\tint i = 0;\n\
    \tforeach(long x; l)\n\t{\n\t\tif(x > 0)\n\t\t{\n\t\t\tresult[i] = x;\n\t\t\t\
    i++;\n\t\t}\n\t}\n\treturn result[0..i];\n}", "{\n    long[] res;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(i; l)\n    {\n        if(i > 0)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(x; l) \n    {\n        if (x > 0) \n        {\n            result\
    \ ~= x;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n\tlong[] result = new long[l.length];\n\tint j = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t{\n\t\t\tresult[j] = l[i];\n\t\t\tj++;\n\t\
    \t}\n\t}\n\treturn result;\n}", "{\n    long[] res;\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res;\n}", "{\n    long[] res;\n    foreach(long i; l) \n    {\n  \
    \      if (i > 0) \n        {\n            res ~= i;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n   \
    \ {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n      \
    \      result[i] = x;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n       \
    \     result[j] = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn only negative numbers in the list.\n    >>> get_negative([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n  \
    \      if(i < 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn only even numbers in the list.\n    >>> get_even([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n  \
    \      if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn only odd numbers in the list.\n    >>> get_odd([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [-1L, 5L]\n    >>> get_odd([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, -5L, -3L, 3", "{\n    long[] result =\
    \ new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ res = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n \
    \       if(x > 0)\n        {\n            res[i] = x;\n            i++;\n    \
    \    }\n    }\n    return res[0..i];\n}", "{\n    long[] result;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[l.length];\n    int i = 0;\n    foreach(long x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            result[i] = x;\n      \
    \      i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    long[] result\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[l.length];\n    int j = 0;\n    foreach(i; l)\n\
    \    {\n        if(i > 0)\n        {\n            res[j] = i;\n            j++;\n\
    \        }\n    }\n    return res[0..j];\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] res = new long[0];\n\
    \    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n            res\
    \ ~= x;\n        }\n    }\n    return res;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n  \
    \  {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n      \
    \      j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    foreach(long x; l) {\n        if\
    \ (x > 0) {\n            result[i] = x;\n            i++;\n        }\n    }\n\
    \    return result[0..i];\n}", "{\n    long[] res = new long[l.length];\n    int\
    \ j = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n      \
    \      res[j] = i;\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int j = 0;\n \
    \   for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n       \
    \ {\n            result[j] = l[i];\n            j++;\n        }\n    }\n    return\
    \ result[0..j];\n}", "{\n    long[] result = new long[0];\n    foreach(long i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    foreach(l; i)\n  \
    \  {\n        if(l[i] > 0)\n        {\n            result ~= l[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}", "{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l) \n    {\n        if (i > 0) \n        {\n            res ~= i;\n     \
    \   }\n    }\n    return res;\n}", "{\n    long[] result;\n    foreach(i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}\n/*\nReturn only negative numbers in the list.\n \
    \   >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[]\
    \ get_negative(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i < 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\n/*\nReturn only even numbers in the list.\n    >>> get_even([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only odd numbers in the list.\n    >>> get_odd([-1L, 2L, -4L, 5L, 6L])\n\
    \    [-1L, 5L]\n    >>> get_odd([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [5L, 3L, -5L, -3L, 3L, 9L, 123L, 1L]\n*/\nlong[] get_", "{\n    long[] result\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n    {\n\
    \        if(i > 0)\n        {\n            ret[count] = i;\n            count++;\n\
    \        }\n    }\n    return ret[0..count];\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n\
    \    long[] result = new long[l.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n\
    \    long[] result;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n\
    \            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ res = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > 0)\n        {\n            res[j] = l[i];\n\
    \            j++;\n        }\n    }\n    return res[0..j];\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    foreach(i; l)\n    {\n        if(i > 0)\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}",
  "{\n    long[] result;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n    \
    \        j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int j = 0;\n \
    \   for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n       \
    \ {\n            result[j] = l[i];\n            j++;\n        }\n    }\n    return\
    \ result[0..j];\n}", "{\n    long[] result = new long[0];\n    foreach(long i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    foreach(i; l)\n  \
    \  {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result;\n    foreach(long i; l)\n    {\n\
    \        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    return l.filter!(x => x > 0)();\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int j = 0;\n    foreach(long i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result[j] = i;\n      \
    \      j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[] res\
    \ = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            res[j] = l[i];\n       \
    \     j++;\n        }\n    }\n    return res[0..j];\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n    \
    \        j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ ret;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n        \
    \    ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[] result;\n\
    \    foreach(x; l)\n    {\n        if(x > 0)\n        {\n            result ~=\
    \ x;\n        }\n    }\n    return result;\n}\n/*\nReturn only negative numbers\
    \ in the list.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    [-1L, -4L]\n\
    \    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[] l) \n{\n    long[] result;\n\
    \    foreach(x; l)\n    {\n        if(x < 0)\n        {\n            result ~=\
    \ x;\n        }\n    }\n    return result;\n}\n/*\nReturn only even numbers in\
    \ the list.\n    >>> get_even([-1L, 2L, -4L, 5L, 6L])\n    [2L, -4L, 6L]\n   \
    \ >>> get_even([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [2L, 0L,\
    \ -10L]\n*/\nlong[] get_even(long[] l) \n{\n    long[] result;\n    foreach(x;\
    \ l)\n    {\n        if(x % 2 == 0)\n        {\n            result ~= x;\n   \
    \     }\n    }\n    return result;\n}\n/*\nReturn only odd numbers in the list.\n\
    \    >>> get_odd([-1L, 2L, -4L, 5L, 6L])\n    [-1L, 5L]\n    >>> get_odd([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, -5L, -3L, 3L, 9L,\
    \ 123L, 1L]\n*/\nlong[] get_", "{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n  \
    \  int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}", "{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > 0) \n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}", "{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}", "{\n    long[] ret;\n    foreach(e; l)\n  \
    \  {\n        if(e > 0)\n        {\n            ret ~= e;\n        }\n    }\n\
    \    return ret;\n}\n/*\nReturn only negative numbers in the list.\n    >>> get_negative([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] ret;\n    foreach(e; l)\n    {\n        if(e < 0)\n     \
    \   {\n            ret ~= e;\n        }\n    }\n    return ret;\n}\n/*\nReturn\
    \ only even numbers in the list.\n    >>> get_even([-1L, 2L, -4L, 5L, 6L])\n \
    \   [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[] l) \n{\n    long[] ret;\n\
    \    foreach(e; l)\n    {\n        if(e % 2 == 0)\n        {\n            ret\
    \ ~= e;\n        }\n    }\n    return ret;\n}\n/*\nReturn only odd numbers in\
    \ the list.\n    >>> get_odd([-1L, 2L, -4L, 5L, 6L])\n    [-1L, 5L]\n    >>> get_odd([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, -5L, -3L, 3L, 9L,\
    \ 123L, 1L]\n*/\nlong[] get_", "{\n    long[] ret = new long[l.length];\n    int\
    \ i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n      \
    \      ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[0];\n    foreach(x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            result ~= x;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            result[i] = x;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    long[] result;\n    foreach(long x; l)\n    {\n        if(x > 0)\n\
    \        {\n            result ~= x;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n       \
    \     result[j] = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }", "{\n    long[] result;\n    foreach(num; l)\n    {\n        if(num > 0)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] ret;\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n \
    \   long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result;\n    foreach(i; l)\n    {\n\
    \        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    return l.filter!(x\
    \ => x > 0);\n}", "{\n    long[] res;\n    foreach(i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}",
  "{\n    long[] result = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    foreach(long i; l)\n    {\n        if(i > 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only negative numbers in the list.\n    >>> get_negative([-1L, 2L,\
    \ -4L, 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result;\n    foreach(long i; l)\n    {\n        if(i < 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only even numbers in the list.\n    >>> get_even([-1L, 2L, -4L, 5L,\
    \ 6L])\n    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    [2L, 0L, -10L]\n*/\nlong[] get_even(long[] l) \n{\n  \
    \  long[] result;\n    foreach(long i; l)\n    {\n        if(i % 2 == 0)\n   \
    \     {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n\
    Return only odd numbers in the list.\n    >>> get_odd([-1L, 2L, -4L, 5L, 6L])\n\
    \    [-1L, 5L]\n    >>> get_odd([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [5L, 3L, -5L, -3L, 3L, 9L, 123L, 1L]\n*/\nlong", "{\n    long[] result =\
    \ new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    long[] res = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}",
  "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}\n/*\n\
    Return only negative numbers in the list.\n    >>> get_negative([-1L, 2L, -4L,\
    \ 5L, 6L])\n    [-1L, -4L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    [-5L, -3L, -10L]\n*/\nlong[] get_negative(long[] l)\
    \ \n{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i < 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}\n/*\n\
    Return only even numbers in the list.\n    >>> get_even([-1L, 2L, -4L, 5L, 6L])\n\
    \    [2L, -4L, 6L]\n    >>> get_even([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    [2L, 0L, 123L, -10L]\n*/\nlong[] get_even(long[] l) \n{\n  \
    \  long[] result = new long[l.length];\n    int count = 0;\n    foreach(long i;\
    \ l)\n    {\n        if(i % 2 == 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}\n/*\n\
    Return only odd numbers in the list.\n    >>> get_odd([-1L, 2L, -4L, 5L, 6L])\n\
    \    [-1L, 5L]\n", "{\n    long[] result = new long[0];\n    foreach(i; l)\n \
    \   {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] result;\n    foreach(i; l)\n    {\n\
    \        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
