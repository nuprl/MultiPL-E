name: HumanEval_113_odd_count
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a list of strings, where\
  \ each string consists of only digits, return a list.\n    Each element i of the\
  \ output should be \"the number of odd elements in the\n    string i of the input.\"\
  \ where all the i's should be replaced by the number\n    of odd digits in the i'th\
  \ string of the input.\n\n    >>> odd_count([\"1234567\"])\n    [\"the number of\
  \ odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"\
  ])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
  \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \n*/\nstring[] odd_count(string[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = odd_count;\n\n    assert(candidate([\"\
  1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n\
  \    assert(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n\
  \ the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of\
  \ the 8nput.\"]);\n    assert(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
  \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
  \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2\
  \ of the 2nput.\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[lst.length];\n    foreach(i, s;\
    \ lst)\n    {\n        int count = 0;\n        foreach(c; s)\n        {\n    \
    \        if((c - '0') % 2 == 1)\n                count++;\n        }\n       \
    \ result[i] = format(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i);\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[lst.length];\n    foreach(i, s; lst)\n    {\n        int count = 0;\n\
    \        foreach(c; s)\n        {\n            if(c.to!int % 2 == 1)\n       \
    \         count++;\n        }\n        result[i] = format(\"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\", count, count, i, i);\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[lst.length];\n \
    \   foreach(i, item; lst)\n    {\n        int odd_count = 0;\n        foreach(j,\
    \ char; item)\n        {\n            if(char % 2 == 1)\n            {\n     \
    \           odd_count++;\n            }\n        }\n        result[i] = \"the\
    \ number of odd elements \" ~ to!string(odd_count) ~ \"n the str\" ~ to!string(odd_count)\
    \ ~ \"ng \" ~ to!string(odd_count) ~ \" of the \" ~ to!string(odd_count) ~ \"\
    nput.\";\n    }\n    return result;\n}", "{\n    string[] result = new string[lst.length];\n\
    \    foreach(i, item; lst)\n    {\n        int count = 0;\n        foreach(j,\
    \ char; item)\n        {\n            if(char.to!int() % 2 != 0)\n           \
    \ {\n                count++;\n            }\n        }\n        result[i] = \"\
    the number of odd elements \" ~ to!string(count) ~ \"n the str\" ~ to!string(count)\
    \ ~ \"ng \" ~ to!string(count) ~ \" of the \" ~ to!string(count) ~ \"nput.\";\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[lst.length];\n\
    \    foreach(i, s; lst)\n    {\n        int count = 0;\n        foreach(c; s)\n\
    \        {\n            if(c.to!int % 2 == 1)\n                count++;\n    \
    \    }\n        result[i] = \"the number of odd elements \" ~ to!string(count)\
    \ ~ \"n the str\" ~ to!string(count) ~ \"ng \" ~ to!string(count) ~ \" of the\
    \ \" ~ to!string(count) ~ \"nput.\";\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[lst.length];\n    foreach(i, item; lst)\n    {\n       \
    \ int count = 0;\n        foreach(j, digit; item)\n        {\n            if(digit\
    \ % 2 == 1)\n                count++;\n        }\n        result[i] = \"the number\
    \ of odd elements \" ~ to!string(count) ~ \"n the str\" ~ to!string(count) ~ \"\
    ng \" ~ to!string(count) ~ \" of the \" ~ to!string(count) ~ \"nput.\";\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[lst.length];\n \
    \   foreach(i, s; lst)\n    {\n        int count = 0;\n        foreach(c; s)\n\
    \        {\n            if(c.to!int % 2 == 1)\n                count++;\n    \
    \    }\n        result[i] = \"the number of odd elements \" ~ to!string(count)\
    \ ~ \"n the str\" ~ to!string(count) ~ \"ng \" ~ to!string(count) ~ \" of the\
    \ \" ~ to!string(count) ~ \"nput.\";\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[lst.length];\n    foreach(i, str; lst)\n    {\n        int\
    \ count = 0;\n        foreach(ch; str)\n        {\n            if(ch.to!int %\
    \ 2 != 0)\n                count++;\n        }\n        result[i] = \"the number\
    \ of odd elements \" ~ to!string(count) ~ \"n the str\" ~ to!string(count) ~ \"\
    ng \" ~ to!string(count) ~ \" of the \" ~ to!string(count) ~ \"nput.\";\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[lst.length];\n \
    \   foreach(i, s; lst)\n    {\n        int odd_count = 0;\n        foreach(c;\
    \ s)\n        {\n            if(c.to!int % 2 == 1)\n                odd_count++;\n\
    \        }\n        result[i] = format(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", odd_count, odd_count, odd_count, odd_count);\n    }\n \
    \   return result;\n}", "{\n    string[] result = new string[lst.length];\n  \
    \  foreach(i, s; lst)\n    {\n        int count = 0;\n        foreach(c; s)\n\
    \        {\n            if(c.to!int() % 2 == 1)\n                count++;\n  \
    \      }\n        result[i] = \"the number of odd elements \" ~ to!string(count)\
    \ ~ \"n the str\" ~ to!string(count) ~ \"ng \" ~ to!string(count) ~ \" of the\
    \ \" ~ to!string(count) ~ \"nput.\";\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[lst.length];\n    foreach(i, item; lst)\n    {\n       \
    \ int count = 0;\n        foreach(j, c; item)\n        {\n            if(c.to!int()\
    \ % 2 == 1)\n                count++;\n        }\n        result[i] = \"the number\
    \ of odd elements \" ~ to!string(count) ~ \"n the str\" ~ to!string(count) ~ \"\
    ng \" ~ to!string(count) ~ \" of the \" ~ to!string(count) ~ \"nput.\";\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[lst.length];\n \
    \   foreach(i, item; lst)\n    {\n        int oddCount = 0;\n        foreach(j,\
    \ digit; item)\n        {\n            if(digit.to!int % 2 != 0)\n           \
    \ {\n                oddCount++;\n            }\n        }\n        result[i]\
    \ = \"the number of odd elements \" ~ to!string(oddCount) ~ \"n the str\" ~ to!string(oddCount)\
    \ ~ \"ng \" ~ to!string(oddCount) ~ \" of the \" ~ to!string(oddCount) ~ \"nput.\"\
    ;\n    }\n    return result;\n}", "{\n    string[] result = new string[lst.length];\n\
    \    foreach(i, s; lst) \n    {\n        int odd = 0;\n        foreach(c; s) \n\
    \        {\n            if(c.to!int % 2 == 1) \n            {\n              \
    \  odd++;\n            }\n        }\n        result[i] = format(\"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\", odd, odd, i, i);\n    }\n\
    \    return result;\n}\n/*\nGiven a list of strings, where each string consists\
    \ of only digits, return a list.\n    Each element i of the output should be \"\
    the number of even elements in the\n    string i of the input.\" where all the\
    \ i's should be replaced by the number\n    of even digits in the i'th string\
    \ of the input.", "{\n    string[] result = new string[lst.length];\n    foreach(i,\
    \ item; lst)\n    {\n        int count = 0;\n        foreach(j, char; item)\n\
    \        {\n            if(char.to!int % 2 == 1)\n                count++;\n \
    \       }\n        result[i] = \"the number of odd elements \" ~ to!string(count)\
    \ ~ \"n the str\" ~ to!string(count) ~ \"ng \" ~ to!string(count) ~ \" of the\
    \ \" ~ to!string(count) ~ \"nput.\";\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[lst.length];\n    foreach(i, s; lst)\n    {\n        int\
    \ count = 0;\n        foreach(c; s)\n        {\n            if(c.to!int % 2 ==\
    \ 1)\n                count++;\n        }\n        result[i] = \"the number of\
    \ odd elements \" ~ count.to!string ~ \"n the str\" ~ count.to!string ~ \"ng \"\
    \ ~ count.to!string ~ \" of the \" ~ count.to!string ~ \"nput.\";\n    }\n   \
    \ return result;\n}", "{\n    string[] result = new string[lst.length];\n    foreach(i,\
    \ s; lst)\n    {\n        int count = 0;\n        foreach(c; s)\n        {\n \
    \           if(c.to!int % 2 == 1)\n                count++;\n        }\n     \
    \   result[i] = format(\"the number of odd elements %dn the str%dng %d of the\
    \ %dnput.\", count, count, i, i);\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[lst.length];\n    foreach(int i, string s; lst)\n    {\n\
    \        int count = 0;\n        foreach(char c; s)\n        {\n            if(c.to!int\
    \ % 2 == 1)\n            {\n                count++;\n            }\n        }\n\
    \        result[i] = \"the number of odd elements \" ~ count.to!string ~ \"n the\
    \ str\" ~ count.to!string ~ \"ng \" ~ count.to!string ~ \" of the \" ~ count.to!string\
    \ ~ \"nput.\";\n    }\n    return result;\n}", "{\n    string[] result = new string[lst.length];\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        int count = 0;\n   \
    \     foreach (char c; lst[i])\n        {\n            if (c % 2 == 1)\n     \
    \           count++;\n        }\n        result[i] = format(\"the number of odd\
    \ elements %dn the str%dng %d of the %dput.\", count, i, i, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[lst.length];\n    foreach(i,\
    \ s; lst)\n    {\n        int odd = 0;\n        foreach(c; s)\n        {\n   \
    \         if(c.to!int % 2 == 1)\n                odd++;\n        }\n        result[i]\
    \ = \"the number of odd elements \" ~ to!string(odd) ~ \"n the str\" ~ to!string(odd)\
    \ ~ \"ng \" ~ to!string(odd) ~ \" of the \" ~ to!string(odd) ~ \"nput.\";\n  \
    \  }\n    return result;\n}", "{\n    string[] result = new string[lst.length];\n\
    \    foreach(i, s; lst)\n    {\n        int count = 0;\n        foreach(c; s)\n\
    \        {\n            if(c.to!int % 2 == 1)\n                count++;\n    \
    \    }\n        result[i] = format(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", count, count, i, i);\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
