language: d
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(elem; arr)\n    {\n        long sum =\
    \ 0;\n        long num = elem;\n        while(num != 0)\n        {\n         \
    \   sum += num % 10;\n            num /= 10;\n        }\n        if(sum > 0)\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp37go465r.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x42830d]\n??:? void tmp37go465r.__unittest_L34_C1() [0x427ff5]\n??:?
    void tmp37go465r.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302cd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b185]\n??:? runModuleUnitTests [0x42c0f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286e3]\n??:? _d_run_main [0x42864e]\n??:? main [0x4280a3]\n??:?
    __libc_start_main [0xdd11c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        if(num < 0)\n        {\n            num = -num;\n\
    \        }\n        while(num > 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if(sum > 0)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp36tqkw05.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp36tqkw05.__unittest_L40_C1() [0x427e3a]\n??:?
    void tmp36tqkw05.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280af]\n??:?
    __libc_start_main [0x2d8a3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        if(num < 0)\n        {\n            num = -num;\n\
    \        }\n        while(num > 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if(sum > 0)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp36tqkw05.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp36tqkw05.__unittest_L40_C1() [0x427e3a]\n??:?
    void tmp36tqkw05.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280af]\n??:?
    __libc_start_main [0x2d8a3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(i < 0)\n  \
    \      {\n            i = -i;\n        }\n        long sum = 0;\n        while(i\
    \ > 0)\n        {\n            sum += i % 10;\n            i /= 10;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4bzqja_3.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp4bzqja_3.__unittest_L39_C1() [0x427e3e]\n??:?
    void tmp4bzqja_3.__modtest() [0x4280a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280b3]\n??:?
    __libc_start_main [0x93b0b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        if(num < 0)\n        {\n            num = -num;\n\
    \        }\n        while(num > 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if(sum > 0)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn7g2ppxz.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn7g2ppxz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(num; arr)\n    {\n        long sum = 0;\n\
    \        foreach(digit; num.to!string)\n        {\n            if(digit.isDigit)\n\
    \            {\n                sum += digit.to!long;\n            }\n       \
    \ }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi0riok3q.d(23): Error: no property `to` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0riok3q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        if(num < 0)\n        {\n            num = -num;\n\
    \        }\n        while(num > 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if(sum > 0)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp36tqkw05.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp36tqkw05.__unittest_L40_C1() [0x427e3a]\n??:?
    void tmp36tqkw05.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280af]\n??:?
    __libc_start_main [0x2d8a3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(i < 0)\n  \
    \      {\n            i = -i;\n        }\n        long sum = 0;\n        while(i\
    \ > 0)\n        {\n            sum += i % 10;\n            i /= 10;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4bzqja_3.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp4bzqja_3.__unittest_L39_C1() [0x427e3e]\n??:?
    void tmp4bzqja_3.__modtest() [0x4280a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280b3]\n??:?
    __libc_start_main [0x93b0b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(i < 0)\n  \
    \      {\n            i = -i;\n        }\n        long sum = 0;\n        while(i\
    \ > 0)\n        {\n            sum += i % 10;\n            i /= 10;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp713bf18.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp713bf18.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(i < 0)\n  \
    \      {\n            i = -i;\n        }\n        long sum = 0;\n        while(i\
    \ > 0)\n        {\n            sum += i % 10;\n            i /= 10;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4bzqja_3.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp4bzqja_3.__unittest_L39_C1() [0x427e3e]\n??:?
    void tmp4bzqja_3.__modtest() [0x4280a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280b3]\n??:?
    __libc_start_main [0x93b0b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        while(num != 0)\n        {\n            sum +=\
    \ abs(num % 10);\n            num /= 10;\n        }\n        if(sum > 0)\n   \
    \         count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6710a0px.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428385]\n??:? void tmp6710a0px.__unittest_L34_C1() [0x427e8a]\n??:?
    void tmp6710a0px.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430868]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430345]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1fd]\n??:? runModuleUnitTests [0x42c169]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42875b]\n??:? _d_run_main [0x4286c6]\n??:? main [0x428117]\n??:?
    __libc_start_main [0x6e7b0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        if(num < 0)\n        {\n            num = -num;\n\
    \        }\n        while(num != 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if(sum > 0)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpz2q3rdbz.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmpz2q3rdbz.__unittest_L40_C1() [0x427e3a]\n??:?
    void tmpz2q3rdbz.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280af]\n??:?
    __libc_start_main [0xb8c91554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(num; arr)\n    {\n        long sum = 0;\n\
    \        long n = abs(num);\n        while(n > 0)\n        {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        if(sum > 0)\n         \
    \   count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpdhwaqnwj.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x42837d]\n??:? void tmpdhwaqnwj.__unittest_L34_C1() [0x427e86]\n??:?
    void tmpdhwaqnwj.__modtest() [0x428100]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430860]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43033d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1f5]\n??:? runModuleUnitTests [0x42c161]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428753]\n??:? _d_run_main [0x4286be]\n??:? main [0x428113]\n??:?
    __libc_start_main [0x5e799554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long n = i;\n        if(n < 0)\n            n = -n;\n        while(n\
    \ > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n        }\n\
    \        if(sum > 0)\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe9lca11i.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmpe9lca11i.__unittest_L36_C1() [0x427e3a]\n??:?
    void tmpe9lca11i.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280af]\n??:?
    __libc_start_main [0x111c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(idx, val; arr)\n    {\n        if(val\
    \ < 0)\n        {\n            val = -val;\n        }\n        long sum = 0;\n\
    \        while(val > 0)\n        {\n            sum += val % 10;\n           \
    \ val /= 10;\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpld5ohsgc.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmpld5ohsgc.__unittest_L39_C1() [0x427e3e]\n??:?
    void tmpld5ohsgc.__modtest() [0x4280a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280b3]\n??:?
    __libc_start_main [0x12426554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(elem; arr)\n    {\n        long sum =\
    \ 0;\n        long num = elem;\n        if(num < 0)\n        {\n            num\
    \ = -num;\n        }\n        while(num > 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if(sum > 0)\n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp1x67dhfi.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp1x67dhfi.__unittest_L40_C1() [0x427e3a]\n??:?
    void tmp1x67dhfi.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280af]\n??:?
    __libc_start_main [0xff35d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        while(num != 0)\n        {\n            sum +=\
    \ abs(num % 10);\n            num /= 10;\n        }\n        if(sum > 0)\n   \
    \         count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6710a0px.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428385]\n??:? void tmp6710a0px.__unittest_L34_C1() [0x427e8a]\n??:?
    void tmp6710a0px.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430868]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430345]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1fd]\n??:? runModuleUnitTests [0x42c169]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42875b]\n??:? _d_run_main [0x4286c6]\n??:? main [0x428117]\n??:?
    __libc_start_main [0x6e7b0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        foreach(j; i.digits)\n        {\n            sum += j;\n        }\n \
    \       if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0q6gs9in.d(23): Error: no property `digits` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0q6gs9in.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(i < 0)\n  \
    \      {\n            i = -i;\n        }\n        long sum = 0;\n        while(i\
    \ > 0)\n        {\n            sum += i % 10;\n            i /= 10;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4bzqja_3.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x42831d]\n??:? void tmp4bzqja_3.__unittest_L39_C1() [0x427e3e]\n??:?
    void tmp4bzqja_3.__modtest() [0x4280a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430800]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b195]\n??:? runModuleUnitTests [0x42c101]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286f3]\n??:? _d_run_main [0x42865e]\n??:? main [0x4280b3]\n??:?
    __libc_start_main [0x93b0b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        long sum = 0;\n\
    \        long num = i;\n        while(num != 0)\n        {\n            sum +=\
    \ abs(num % 10);\n            num /= 10;\n        }\n        if(sum > 0)\n   \
    \         count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6710a0px.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428385]\n??:? void tmp6710a0px.__unittest_L34_C1() [0x427e8a]\n??:?
    void tmp6710a0px.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430868]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430345]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1fd]\n??:? runModuleUnitTests [0x42c169]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42875b]\n??:? _d_run_main [0x4286c6]\n??:? main [0x428117]\n??:?
    __libc_start_main [0x6e7b0554]\n1/1 unittests FAILED\n'''
  stdout: b''
