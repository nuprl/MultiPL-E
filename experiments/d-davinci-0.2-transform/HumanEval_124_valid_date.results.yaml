language: d
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsxmg80ti.d(79): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxmg80ti.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n        return\
    \ false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (day > 29)\n            return false;\n    \
    \    if (day == 29)\n        {\n            if (year % 4 != 0)\n             \
    \   return false;\n            if (year % 100 == 0 && year % 400 != 0)\n     \
    \           return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp15qy0rpt.d(30): Error: no property `split` for type `string`\n/tmp/tmp15qy0rpt.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp15qy0rpt.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp15qy0rpt.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15qy0rpt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5o59gl5w.d(30): Error: no property `split` for type `string`\n/tmp/tmp5o59gl5w.d(32):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp5o59gl5w.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp5o59gl5w.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o59gl5w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.regex;\n    import std.conv;\n    import std.string;\n    import std.array;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.datetime;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.meta;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.regex;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.meta;\n    import std.typecons;\n    import std.math;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.conv;\n    import std.regex;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.meta;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.regex;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.meta;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.regex;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.traits;\n    import std.meta;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.regex;\n\
    \    import std.string;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.typecons;\n   \nunittest\n{\n    alias candidate =\
    \ valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx6g3r1u6.d(99): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6g3r1u6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3)\n        return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9amqt8t8.d(30): Error: no property `split` for type `string`\n/tmp/tmp9amqt8t8.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp9amqt8t8.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp9amqt8t8.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9amqt8t8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!(to!int);\n    if (date_arr.length != 3) return false;\n\
    \    if (date_arr[0] < 1 || date_arr[0] > 12) return false;\n    if (date_arr[1]\
    \ < 1 || date_arr[1] > months[date_arr[0] - 1]) return false;\n    if (date_arr[0]\
    \ == 2 && date_arr[1] == 29) {\n        if (date_arr[2] % 4 != 0) return false;\n\
    \        if (date_arr[2] % 100 == 0 && date_arr[2] % 400 != 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp31se4yuk.d(31): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31se4yuk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ month = to!int(parts[0]);\n    auto day = to!int(parts[1]);\n    auto year =\
    \ to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n    if (day\
    \ < 1) return false;\n    if (month == 2) {\n        if (day > 29) return false;\n\
    \        if (day == 29) {\n            if (year % 4 != 0) return false;\n    \
    \        if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n  \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \   if (day > 30) return false;\n    } else {\n        if (day > 31) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz867o2b9.d(30): Error: no property `split` for type `string`\n/tmp/tmpz867o2b9.d(32):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpz867o2b9.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpz867o2b9.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz867o2b9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    string[] date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3)\n        return false;\n\
    \    int month = date_split[0].to!int;\n    int day = date_split[1].to!int;\n\
    \    int year = date_split[2].to!int;\n    if (month < 1 || month > 12)\n    \
    \    return false;\n    if (day < 1 || day > months[month - 1])\n        return\
    \ false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n        return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg44bjau9.d(31): Error: no property `split` for type `string`\n/tmp/tmpg44bjau9.d(34):
    Error: no property `to` for type `string`\n/tmp/tmpg44bjau9.d(35): Error: no property
    `to` for type `string`\n/tmp/tmpg44bjau9.d(36): Error: no property `to` for type
    `string`\n/tmp/tmpg44bjau9.d(41): Error: undefined identifier `isLeapYear`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg44bjau9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > days_in_month[month - 1])\n        return false;\n \
    \   if (month == 2 && day == 29 && !isLeapYear(year))\n        return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8s8gzwz.d(31): Error: no property `split` for type `string`\n/tmp/tmpr8s8gzwz.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpr8s8gzwz.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpr8s8gzwz.d(36):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpr8s8gzwz.d(41):
    Error: undefined identifier `isLeapYear`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr8s8gzwz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : take, drop;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons :\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhku43bv.d(81): Error: identifier expected following `:`\n/tmp/tmpnhku43bv.d(81):
    Error: `;` expected\n/tmp/tmpnhku43bv.d(102): Error: found `End of File` when
    expecting `}` following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhku43bv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    if (date_tuple.length != 3)\n  \
    \      return false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (year % 4 == 0)\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n      \
    \  if (day > 31)\n            return false;\n    }\n    else\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpun2ujiwl.d(30): Error: no property `split` for type `string`\n/tmp/tmpun2ujiwl.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpun2ujiwl.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpun2ujiwl.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpun2ujiwl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length\
    \ == 0)\n        return false;\n    if (date.find(\"-\") == -1)\n        return\
    \ false;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n\
    \        return false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > days[month - 1])\n        return false;\n\
    \    if (month == 2 && day == 29)\n    {\n        if (year % 4 != 0)\n       \
    \     return false;\n        if (year % 100 == 0 && year % 400 != 0)\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpapl7kvq9.d(33): Error: no property `find` for type `string`\n/tmp/tmpapl7kvq9.d(35):
    Error: no property `split` for type `string`\n/tmp/tmpapl7kvq9.d(38): Error: template
    instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpapl7kvq9.d(39):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpapl7kvq9.d(40):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapl7kvq9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    int[] months = [31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    int[] date_arr = date.split(\"-\").map!(a => to!int(a)).array;\n\
    \    if(date_arr.length != 3)\n        return false;\n    if(date_arr[0] > 12\
    \ || date_arr[0] < 1)\n        return false;\n    if(date_arr[1] > months[date_arr[0]-1]\
    \ || date_arr[1] < 1)\n        return false;\n    if(date_arr[2] < 1)\n      \
    \  return false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a2xm27i.d(33): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a2xm27i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3) return false;\n\
    \    auto day = to!int(date_parts[1]);\n    auto month = to!int(date_parts[0]);\n\
    \    auto year = to!int(date_parts[2]);\n    if (year < 0) return false;\n   \
    \ if (month < 1 || month > 12) return false;\n    if (day < 1) return false;\n\
    \    if (month == 2) {\n        if (isLeapYear(year)) {\n            if (day >\
    \ 29) return false;\n        } else {\n            if (day > 28) return false;\n\
    \        }\n    } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) return false;\n    } else {\n        if (day >\
    \ 31) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo8zyv3l_.d(30): Error: no property `split` for type `string`\n/tmp/tmpo8zyv3l_.d(32):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpo8zyv3l_.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpo8zyv3l_.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpo8zyv3l_.d(39):
    Error: undefined identifier `isLeapYear`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo8zyv3l_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_split\
    \ = date.split(\"-\").map!(a => to!int(a)).array;\n    if (date_split.length !=\
    \ 3)\n        return false;\n    if (date_split[0] < 1 || date_split[0] > 12)\n\
    \        return false;\n    if (date_split[1] < 1 || date_split[1] > months[date_split[0]\
    \ - 1])\n        return false;\n    if (date_split[0] == 2 && date_split[1] ==\
    \ 29)\n    {\n        if (date_split[2] % 4 != 0)\n            return false;\n\
    \        if (date_split[2] % 100 == 0 && date_split[2] % 400 != 0)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp24oligw8.d(31): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24oligw8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.stdio;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n  \
    \      return false;\n    if (month == 2)\n    {\n        if (day > 29)\n    \
    \        return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [1,3,5,7,8,10,12];\n    int[] months2 = [4,6,9,11];\n    int[] months3\
    \ = [2];\n    string[] date_split = date.split(\"-\");\n    if(date_split.length\
    \ != 3)\n        return false;\n    int day = to!int(date_split[1]);\n    int\
    \ month = to!int(date_split[0]);\n    int year = to!int(date_split[2]);\n    if(day\
    \ < 1 || day > 31)\n        return false;\n    if(month < 1 || month > 12)\n \
    \       return false;\n    if(year < 1)\n        return false;\n    if(month.canFind(months))\n\
    \    {\n        if(day > 31)\n            return false;\n    }\n    else if(month.canFind(months2))\n\
    \    {\n        if(day > 30)\n            return false;\n    }\n    else if(month.canFind(months3))\n\
    \    {\n        if(day > 29)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4tmv_m8c.d(33): Error: no property `split` for type `string`\n/tmp/tmp4tmv_m8c.d(36):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp4tmv_m8c.d(37):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp4tmv_m8c.d(38):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp4tmv_m8c.d(45):
    Error: no property `canFind` for type `int`\n/tmp/tmp4tmv_m8c.d(50): Error: no
    property `canFind` for type `int`\n/tmp/tmp4tmv_m8c.d(55): Error: no property
    `canFind` for type `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tmv_m8c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = split(date, \"-\");\n    if (date_tuple.length != 3)\n        return\
    \ false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkzorjk2.d(30): Error: undefined identifier `split`\n/tmp/tmpkkzorjk2.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpkkzorjk2.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpkkzorjk2.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkzorjk2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    int month = to!int(date[0..1]);\n    int day\
    \ = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if (month < 1\
    \ || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n      \
    \  return false;\n    if (month == 2)\n    {\n        if (day > 29)\n        \
    \    return false;\n        if (day == 29)\n        {\n            if (year %\
    \ 4 != 0)\n                return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsvct_31.d(32): Error: template instance `to!int` template `to`
    is not defined, did you mean No?\n/tmp/tmpfsvct_31.d(33): Error: template instance
    `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpfsvct_31.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsvct_31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (day < 1 || day > 31)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (year < 0)\n        return false;\n    if (day > 30 && (month == 4 || month\
    \ == 6 || month == 9 || month == 11))\n        return false;\n    if (day > 29\
    \ && month == 2)\n        return false;\n    if (day == 29 && month == 2 && !isLeapYear(year))\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1279xyq6.d(30): Error: no property `split` for type `string`\n/tmp/tmp1279xyq6.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp1279xyq6.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp1279xyq6.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp1279xyq6.d(46):
    Error: undefined identifier `isLeapYear`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1279xyq6.d", "-I/tmp"]\n'''
  stdout: b''
