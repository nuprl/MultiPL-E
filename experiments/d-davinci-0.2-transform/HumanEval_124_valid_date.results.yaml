language: d
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsxmg80ti.d(79): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxmg80ti.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n        return\
    \ false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (day > 29)\n            return false;\n    \
    \    if (day == 29)\n        {\n            if (year % 4 != 0)\n             \
    \   return false;\n            if (year % 100 == 0 && year % 400 != 0)\n     \
    \           return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp15qy0rpt.d(30): Error: no property `split` for type `string`\n/tmp/tmp15qy0rpt.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp15qy0rpt.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp15qy0rpt.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15qy0rpt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5o59gl5w.d(30): Error: no property `split` for type `string`\n/tmp/tmp5o59gl5w.d(32):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp5o59gl5w.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp5o59gl5w.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o59gl5w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.regex;\n    import std.conv;\n    import std.string;\n    import std.array;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.datetime;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.meta;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.regex;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.meta;\n    import std.typecons;\n    import std.math;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.conv;\n    import std.regex;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.meta;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.regex;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.meta;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.regex;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.traits;\n    import std.meta;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.regex;\n\
    \    import std.string;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.typecons;\n   \nunittest\n{\n    alias candidate =\
    \ valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx6g3r1u6.d(99): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6g3r1u6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3)\n        return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9amqt8t8.d(30): Error: no property `split` for type `string`\n/tmp/tmp9amqt8t8.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp9amqt8t8.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp9amqt8t8.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9amqt8t8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!(to!int);\n    if (date_arr.length != 3) return false;\n\
    \    if (date_arr[0] < 1 || date_arr[0] > 12) return false;\n    if (date_arr[1]\
    \ < 1 || date_arr[1] > months[date_arr[0] - 1]) return false;\n    if (date_arr[0]\
    \ == 2 && date_arr[1] == 29) {\n        if (date_arr[2] % 4 != 0) return false;\n\
    \        if (date_arr[2] % 100 == 0 && date_arr[2] % 400 != 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp31se4yuk.d(31): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31se4yuk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ month = to!int(parts[0]);\n    auto day = to!int(parts[1]);\n    auto year =\
    \ to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n    if (day\
    \ < 1) return false;\n    if (month == 2) {\n        if (day > 29) return false;\n\
    \        if (day == 29) {\n            if (year % 4 != 0) return false;\n    \
    \        if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n  \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \   if (day > 30) return false;\n    } else {\n        if (day > 31) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz867o2b9.d(30): Error: no property `split` for type `string`\n/tmp/tmpz867o2b9.d(32):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpz867o2b9.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpz867o2b9.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz867o2b9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    string[] date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3)\n        return false;\n\
    \    int month = date_split[0].to!int;\n    int day = date_split[1].to!int;\n\
    \    int year = date_split[2].to!int;\n    if (month < 1 || month > 12)\n    \
    \    return false;\n    if (day < 1 || day > months[month - 1])\n        return\
    \ false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n        return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg44bjau9.d(31): Error: no property `split` for type `string`\n/tmp/tmpg44bjau9.d(34):
    Error: no property `to` for type `string`\n/tmp/tmpg44bjau9.d(35): Error: no property
    `to` for type `string`\n/tmp/tmpg44bjau9.d(36): Error: no property `to` for type
    `string`\n/tmp/tmpg44bjau9.d(41): Error: undefined identifier `isLeapYear`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg44bjau9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > days_in_month[month - 1])\n        return false;\n \
    \   if (month == 2 && day == 29 && !isLeapYear(year))\n        return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8s8gzwz.d(31): Error: no property `split` for type `string`\n/tmp/tmpr8s8gzwz.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpr8s8gzwz.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpr8s8gzwz.d(36):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpr8s8gzwz.d(41):
    Error: undefined identifier `isLeapYear`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr8s8gzwz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : take, drop;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons :\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhku43bv.d(81): Error: identifier expected following `:`\n/tmp/tmpnhku43bv.d(81):
    Error: `;` expected\n/tmp/tmpnhku43bv.d(102): Error: found `End of File` when
    expecting `}` following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhku43bv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    if (date_tuple.length != 3)\n  \
    \      return false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (year % 4 == 0)\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n      \
    \  if (day > 31)\n            return false;\n    }\n    else\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpun2ujiwl.d(30): Error: no property `split` for type `string`\n/tmp/tmpun2ujiwl.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpun2ujiwl.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpun2ujiwl.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpun2ujiwl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length\
    \ == 0)\n        return false;\n    if (date.find(\"-\") == -1)\n        return\
    \ false;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n\
    \        return false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > days[month - 1])\n        return false;\n\
    \    if (month == 2 && day == 29)\n    {\n        if (year % 4 != 0)\n       \
    \     return false;\n        if (year % 100 == 0 && year % 400 != 0)\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpapl7kvq9.d(33): Error: no property `find` for type `string`\n/tmp/tmpapl7kvq9.d(35):
    Error: no property `split` for type `string`\n/tmp/tmpapl7kvq9.d(38): Error: template
    instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpapl7kvq9.d(39):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpapl7kvq9.d(40):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapl7kvq9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    int[] months = [31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    int[] date_arr = date.split(\"-\").map!(a => to!int(a)).array;\n\
    \    if(date_arr.length != 3)\n        return false;\n    if(date_arr[0] > 12\
    \ || date_arr[0] < 1)\n        return false;\n    if(date_arr[1] > months[date_arr[0]-1]\
    \ || date_arr[1] < 1)\n        return false;\n    if(date_arr[2] < 1)\n      \
    \  return false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a2xm27i.d(33): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a2xm27i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3) return false;\n\
    \    auto day = to!int(date_parts[1]);\n    auto month = to!int(date_parts[0]);\n\
    \    auto year = to!int(date_parts[2]);\n    if (year < 0) return false;\n   \
    \ if (month < 1 || month > 12) return false;\n    if (day < 1) return false;\n\
    \    if (month == 2) {\n        if (isLeapYear(year)) {\n            if (day >\
    \ 29) return false;\n        } else {\n            if (day > 28) return false;\n\
    \        }\n    } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) return false;\n    } else {\n        if (day >\
    \ 31) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo8zyv3l_.d(30): Error: no property `split` for type `string`\n/tmp/tmpo8zyv3l_.d(32):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpo8zyv3l_.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpo8zyv3l_.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpo8zyv3l_.d(39):
    Error: undefined identifier `isLeapYear`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo8zyv3l_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_split\
    \ = date.split(\"-\").map!(a => to!int(a)).array;\n    if (date_split.length !=\
    \ 3)\n        return false;\n    if (date_split[0] < 1 || date_split[0] > 12)\n\
    \        return false;\n    if (date_split[1] < 1 || date_split[1] > months[date_split[0]\
    \ - 1])\n        return false;\n    if (date_split[0] == 2 && date_split[1] ==\
    \ 29)\n    {\n        if (date_split[2] % 4 != 0)\n            return false;\n\
    \        if (date_split[2] % 100 == 0 && date_split[2] % 400 != 0)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp24oligw8.d(31): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24oligw8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.stdio;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n  \
    \      return false;\n    if (month == 2)\n    {\n        if (day > 29)\n    \
    \        return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [1,3,5,7,8,10,12];\n    int[] months2 = [4,6,9,11];\n    int[] months3\
    \ = [2];\n    string[] date_split = date.split(\"-\");\n    if(date_split.length\
    \ != 3)\n        return false;\n    int day = to!int(date_split[1]);\n    int\
    \ month = to!int(date_split[0]);\n    int year = to!int(date_split[2]);\n    if(day\
    \ < 1 || day > 31)\n        return false;\n    if(month < 1 || month > 12)\n \
    \       return false;\n    if(year < 1)\n        return false;\n    if(month.canFind(months))\n\
    \    {\n        if(day > 31)\n            return false;\n    }\n    else if(month.canFind(months2))\n\
    \    {\n        if(day > 30)\n            return false;\n    }\n    else if(month.canFind(months3))\n\
    \    {\n        if(day > 29)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4tmv_m8c.d(33): Error: no property `split` for type `string`\n/tmp/tmp4tmv_m8c.d(36):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp4tmv_m8c.d(37):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp4tmv_m8c.d(38):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp4tmv_m8c.d(45):
    Error: no property `canFind` for type `int`\n/tmp/tmp4tmv_m8c.d(50): Error: no
    property `canFind` for type `int`\n/tmp/tmp4tmv_m8c.d(55): Error: no property
    `canFind` for type `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tmv_m8c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = split(date, \"-\");\n    if (date_tuple.length != 3)\n        return\
    \ false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkzorjk2.d(30): Error: undefined identifier `split`\n/tmp/tmpkkzorjk2.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpkkzorjk2.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpkkzorjk2.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkzorjk2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    int month = to!int(date[0..1]);\n    int day\
    \ = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if (month < 1\
    \ || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n      \
    \  return false;\n    if (month == 2)\n    {\n        if (day > 29)\n        \
    \    return false;\n        if (day == 29)\n        {\n            if (year %\
    \ 4 != 0)\n                return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsvct_31.d(32): Error: template instance `to!int` template `to`
    is not defined, did you mean No?\n/tmp/tmpfsvct_31.d(33): Error: template instance
    `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpfsvct_31.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsvct_31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (day < 1 || day > 31)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (year < 0)\n        return false;\n    if (day > 30 && (month == 4 || month\
    \ == 6 || month == 9 || month == 11))\n        return false;\n    if (day > 29\
    \ && month == 2)\n        return false;\n    if (day == 29 && month == 2 && !isLeapYear(year))\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1279xyq6.d(30): Error: no property `split` for type `string`\n/tmp/tmp1279xyq6.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp1279xyq6.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp1279xyq6.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp1279xyq6.d(46):
    Error: undefined identifier `isLeapYear`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1279xyq6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : take,\
    \ drop;\n    import std.string : split;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : take, drop;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.math : isNaN;\n    import std.typecons : tuple;\n    import std.array :\
    \ array;\n    import std.range : take, drop;\n    import std.conv : to;\n    import\
    \ std.algorithm : map;\n    import std.string : split;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.math : isNaN;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.conv : to;\n    import std.algorithm : map;\n\
    \    import std.string : split;\n    import std.stdio : writeln;\n    import std.traits\
    \ : isIntegral;\n    import std.math : isNaN;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : take, drop;\n    import\
    \ std.conv : to;\n    import std.algorithm : map;\n    import std.string : split;\n\
    \    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import\
    \ std.math : isNaN;\n    import std.typecons : tuple;\n    import std.array :\
    \ array;\n    import std.range : take, drop;\n    import std.conv : to;\n    import\
    \ std.algorithm : map;\n\nunittest\n{\n    alias candidate = valid_date;\n\n \
    \   assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcy52x5cx.d(81): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy52x5cx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3)\n        return false;\n    int month = to!int(parts[0]);\n\
    \    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > days[month\
    \ - 1])\n        return false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiw8bfo1g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    auto month = to!int(date_split[0]);\n\
    \    auto day = to!int(date_split[1]);\n    auto year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpheahgx7w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_parts = date.split(\"-\");\n   \
    \ if (date_parts.length != 3)\n        return false;\n    auto month = to!int(date_parts[0]);\n\
    \    auto day = to!int(date_parts[1]);\n    auto year = to!int(date_parts[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (month == 2)\n\
    \    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n \
    \   else if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n \
    \       if (day < 1 || day > 30)\n            return false;\n    }\n    else\n\
    \    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbgyma3m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : isInputRange;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5i7uxp82.d(79): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5i7uxp82.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0) return false;\n    auto d = split(date, \"-\");\n    if(d.length != 3)\
    \ return false;\n    if(d[0].length != 2 || d[1].length != 2 || d[2].length !=\
    \ 4) return false;\n    int month = to!int(d[0]);\n    int day = to!int(d[1]);\n\
    \    int year = to!int(d[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2)\n    {\n      \
    \  if(day > 29) return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 4 != 0) return false;\n            if(year % 100 == 0 && year % 400 != 0)\
    \ return false;\n        }\n    }\n    else if(month == 4 || month == 6 || month\
    \ == 9 || month == 11)\n    {\n        if(day > 30) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchbho_xt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.array : array;\n\
    \    import std.range : iota;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n   \nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvn71p1dn.d(82): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvn71p1dn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.array;\n    import std.conv;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.math;\n    import std.typecons;\n    import std.string;\n    import\
    \ std.format;\n    import std.stdio;\n    import std.exception;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.regex;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.regex;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.regex;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.regex;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.regex;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.regex;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.regex;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm_hwz50.d(99): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfm_hwz50.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length\
    \ != 10) return false;\n    if (date[2] != '-' || date[5] != '-') return false;\n\
    \    int month = to!int(date[0..1]);\n    int day = to!int(date[3..4]);\n    int\
    \ year = to!int(date[6..9]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > months[month - 1]) return false;\n    if (month == 2\
    \ && day == 29 && !isLeapYear(year)) return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ns9q_7h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [1,3,5,7,8,10,12];\n    int[] months2 = [4,6,9,11];\n    int[] months3\
    \ = [2];\n    int day = 0;\n    int month = 0;\n    int year = 0;\n    if (date.length\
    \ == 0)\n        return false;\n    if (date.length != 10)\n        return false;\n\
    \    if (date[2] != '-' || date[5] != '-')\n        return false;\n    day = to!int(date[0..1]);\n\
    \    month = to!int(date[3..4]);\n    year = to!int(date[6..9]);\n    if (day\
    \ < 1 || day > 31)\n        return false;\n    if (month < 1 || month > 12)\n\
    \        return false;\n    if (year < 1)\n        return false;\n    if (months.find(month)\
    \ != -1)\n    {\n        if (day > 31)\n            return false;\n    }\n   \
    \ if (months2.find(month) != -1)\n    {\n        if (day > 30)\n            return\
    \ false;\n    }\n    if (months3.find(month) != -1)\n    {\n        if (day >\
    \ 29)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptvh1osio.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto d = split(date, '-');\n    if (d.length != 3)\
    \ return false;\n    int month = to!int(d[0]);\n    int day = to!int(d[1]);\n\
    \    int year = to!int(d[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) return day <=\
    \ 29;\n    if (month == 4 || month == 6 || month == 9 || month == 11) return day\
    \ <= 30;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jiw25de.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    string[] parts\
    \ = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int month\
    \ = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > months[month\
    \ - 1]) return false;\n    if (month == 2 && day == 29 && !isLeapYear(year)) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5bw8_1n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ d = date.split(\"-\");\n    if (d.length != 3) return false;\n    int year =\
    \ to!int(d[2]);\n    int month = to!int(d[0]);\n    int day = to!int(d[1]);\n\
    \    if (year < 0 || month < 1 || month > 12 || day < 1) return false;\n    if\
    \ (month == 2) {\n        if (year % 4 == 0 && (year % 100 != 0 || year % 400\
    \ == 0)) {\n            return day <= 29;\n        } else {\n            return\
    \ day <= 28;\n        }\n    } else if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n        return day <= 30;\n    } else {\n        return day\
    \ <= 31;\n    }\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmyy8n5u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3) return false;\n\
    \    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3w21rl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, '-');\n    if (parts.length != 3)\n        return false;\n\
    \    auto day = to!int(parts[1]);\n    auto month = to!int(parts[0]);\n    auto\
    \ year = to!int(parts[2]);\n    if (day < 1 || day > 31)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (month == 2)\n\
    \    {\n        if (day > 29)\n            return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0)\n                return false;\n  \
    \          if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxqc__zo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ split = date.split(\"-\");\n    if (split.length != 3) return false;\n    int\
    \ month = to!int(split[0]);\n    int day = to!int(split[1]);\n    int year = to!int(split[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpiq7uk3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!int.array;\n    if(date_arr.length != 3)\n        return\
    \ false;\n    if(date_arr[0] < 1 || date_arr[0] > 12)\n        return false;\n\
    \    if(date_arr[1] < 1 || date_arr[1] > days[date_arr[0] - 1])\n        return\
    \ false;\n    if(date_arr[0] == 2 && date_arr[1] == 29)\n    {\n        if(date_arr[2]\
    \ % 4 != 0)\n            return false;\n        if(date_arr[2] % 100 == 0 && date_arr[2]\
    \ % 400 != 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cds88cx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31];\n    int[] date_arr = date.split(\"-\").map!(a => to!int(a)).array;\n\
    \    if (date_arr.length != 3) return false;\n    if (date_arr[0] < 1 || date_arr[0]\
    \ > 12) return false;\n    if (date_arr[1] < 1 || date_arr[1] > months[date_arr[0]\
    \ - 1]) return false;\n    if (date_arr[0] == 2 && date_arr[1] == 29) \n    {\n\
    \        if (date_arr[2] % 4 != 0) return false;\n        if (date_arr[2] % 100\
    \ == 0 && date_arr[2] % 400 != 0) return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ylr1bpp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = split(date, \"-\");\n    if (date_parts.length != 3) return false;\n\
    \    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjyeplad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [1,3,5,7,8,10,12];\n    int[] months2 = [4,6,9,11];\n    int[] months3\
    \ = [2];\n    int[] days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\
    \    int[] days2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n\
    \    int[] days3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];\n\
    \    int[] years = [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzb9f631r.d(37): Error: expression expected, not \''unittest\''\n/tmp/tmpzb9f631r.d(38):
    Error: comma expected separating array initializers, not {\n/tmp/tmpzb9f631r.d(58):
    Error: comma expected separating array initializers, not void\n/tmp/tmpzb9f631r.d(58):
    Error: semicolon expected, not \''main\''\n/tmp/tmpzb9f631r.d(58): Error: found
    \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpzb9f631r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, '-');\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2) {\n        if (day > 29)\
    \ return false;\n        if (day == 29) {\n            if (year % 4 != 0) return\
    \ false;\n            if (year % 100 == 0 && year % 400 != 0) return false;\n\
    \        }\n    } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) return false;\n    } else {\n        if (day >\
    \ 31) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfspt7hp1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    if (date_tuple.length != 3) return\
    \ false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (year < 0) return false;\n    if\
    \ (month < 1 || month > 12) return false;\n    if (day < 1) return false;\n  \
    \  if (month == 2) {\n        if (year % 4 == 0) {\n            if (day > 29)\
    \ return false;\n        } else {\n            if (day > 28) return false;\n \
    \       }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) return false;\n    } else {\n        if (day > 31)\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8g8o5ip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29)\n            return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0)\n                return false;\n  \
    \          if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmvjlyae.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5o6xfrg5.d(78): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o6xfrg5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if(date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(isLeapYear(year))\n\
    \        {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbmo7aoa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    auto month = to!int(date_tuple[0]);\n\
    \    auto day = to!int(date_tuple[1]);\n    auto year = to!int(date_tuple[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsly17nkv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    // your\
    \ code here\n    int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\
    \    if (date.length == 0)\n        return false;\n    if (date.find(\"/\") !=\
    \ -1)\n        return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day\
    \ = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    if (day < 1 || day > months[month -\
    \ 1])\n        return false;\n    if (month == 2 && day == 29)\n    {\n      \
    \  if (year % 4 != 0)\n            return false;\n        if (year % 100 == 0\
    \ && year % 400 != 0)\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4t5tgs2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ != 10)\n        return false;\n    if (date[2] != '-' || date[5] != '-')\n \
    \       return false;\n    int month = to!int(date[0..1]);\n    int day = to!int(date[3..4]);\n\
    \    int year = to!int(date[6..9]);\n    if (month < 1 || month > 12)\n      \
    \  return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (day > 29)\n            return false;\n    \
    \    if (day == 29)\n        {\n            if (year % 4 != 0)\n             \
    \   return false;\n            if (year % 100 == 0 && year % 400 != 0)\n     \
    \           return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxg5iccna.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0) return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3) return false;\n    int month = date_arr[0].to!int;\n    int day = date_arr[1].to!int;\n\
    \    int year = date_arr[2].to!int;\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2)\n    {\n      \
    \  if(year % 4 == 0)\n        {\n            if(day > 29) return false;\n    \
    \    }\n        else\n        {\n            if(day > 28) return false;\n    \
    \    }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11)\n    {\n        if(day > 30) return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4i_aafr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.string;\n    import std.algorithm;\n    import std.conv;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    if(date.length == 0)\n  \
    \      return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    if(date_arr[0].length != 2 || date_arr[1].length\
    \ != 2 || date_arr[2].length != 4)\n        return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day >\
    \ 31)\n        return false;\n    if(month == 2)\n    {\n        if(year % 4 ==\
    \ 0)\n        {\n            if(day > 29)\n                return false;\n   \
    \     }\n        else\n        {\n            if(day > 28)\n                return\
    \ false;\n        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfn0fwpbr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] days =\
    \ [0, 0, 0];\n    int i = 0;\n    foreach(c; date)\n    {\n        if(c == '-')\n\
    \        {\n            i++;\n            continue;\n        }\n        if(!isdigit(c))\n\
    \            return false;\n        days[i] = days[i] * 10 + c - '0';\n    }\n\
    \    if(days[0] == 0 || days[1] == 0 || days[2] == 0)\n        return false;\n\
    \    if(days[0] > 12 || days[0] < 1)\n        return false;\n    if(days[1] >\
    \ months[days[0] - 1] || days[1] < 1)\n        return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhqzdwr8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    // Your\
    \ code here\n    if(date.length < 10)\n        return false;\n    if(date[2] !=\
    \ '-' || date[5] != '-')\n        return false;\n    int month = to!int(date[0..1]);\n\
    \    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(month == 2)\n    {\n     \
    \   if(day < 1 || day > 29)\n            return false;\n        if(day == 29)\n\
    \        {\n            if(year % 4 != 0)\n                return false;\n   \
    \         if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n\
    \    }\n    else\n    {\n        if(day < 1 || day > 31)\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjq6m3bu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.conv;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    if (date.length == 0) return\
    \ false;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\
    \ return false;\n    auto day = to!int(date_arr[0]);\n    auto month = to!int(date_arr[1]);\n\
    \    auto year = to!int(date_arr[2]);\n    if (day < 1 || day > 31) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (year < 1) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n        if (day ==\
    \ 29) {\n            if (year % 4 != 0) return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvz03xkxg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    int[] days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n    int[] date_arr = date.split(\"-\").map!(to!int).array;\n    if\
    \ (date_arr.length != 3) return false;\n    if (date_arr[0] < 1 || date_arr[0]\
    \ > 12) return false;\n    if (date_arr[1] < 1 || date_arr[1] > days[date_arr[0]\
    \ - 1]) return false;\n    if (date_arr[0] == 2 && date_arr[1] == 29) {\n    \
    \    if (date_arr[2] % 4 != 0) return false;\n        if (date_arr[2] % 100 ==\
    \ 0 && date_arr[2] % 400 != 0) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpei0fvkir.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n        if (day == 29) {\n            if (year % 4\
    \ != 0) return false;\n            if (year % 100 == 0 && year % 400 != 0) return\
    \ false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvw6lbbzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length\
    \ < 10)\n        return false;\n    int month = to!int(date[0..1]);\n    int day\
    \ = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if (date[2] !=\
    \ '-' || date[5] != '-')\n        return false;\n    if (month < 1 || month >\
    \ 12)\n        return false;\n    if (day < 1 || day > months[month - 1])\n  \
    \      return false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx13b4wcm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiclrp59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(day > 29)\n       \
    \     return false;\n        if(day == 29)\n        {\n            if(year % 4\
    \ != 0)\n                return false;\n            if(year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4w6yri_q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto d = split(date, \"-\");\n    if(d.length\
    \ != 3)\n        return false;\n    int month = to!int(d[0]);\n    int day = to!int(d[1]);\n\
    \    int year = to!int(d[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month ==\
    \ 2)\n    {\n        if(day > 29)\n            return false;\n        if(day ==\
    \ 29)\n        {\n            if(year % 4 != 0)\n                return false;\n\
    \            if(year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj9exefd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3) return false;\n    auto month = to!int(date_split[0]);\n    auto day =\
    \ to!int(date_split[1]);\n    auto year = to!int(date_split[2]);\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n        if (day ==\
    \ 29) {\n            if (year % 4 != 0) return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyy7z0vf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhickqzd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.conv;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    auto\
    \ date_arr = date.split(\"-\");\n    if(date_arr.length != 3) return false;\n\
    \    if(date_arr[0].length != 2 || date_arr[1].length != 2 || date_arr[2].length\
    \ != 4) return false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2 && day > 29) return\
    \ false;\n    if(month == 2 && day == 29 && !isLeapYear(year)) return false;\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n      \
    \  if(day > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bwm_nob.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29) return false;\n        }\n        else\n\
    \        {\n            if (day > 28) return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30) return false;\n    }\n    else\n    {\n        if (day > 31) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ycybq4v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n        return\
    \ false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (day > 29)\n            return false;\n    \
    \    if (day == 29)\n        {\n            if (year % 4 != 0)\n             \
    \   return false;\n            if (year % 100 == 0 && year % 400 != 0)\n     \
    \           return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikfnzim4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    if(date.length != 10)\n        return false;\n\
    \    if(date[2] != '-' || date[5] != '-')\n        return false;\n    int month\
    \ = to!int(date[0..1]);\n    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n\
    \        if(day > 30)\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphy26qzrk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3) return false;\n    int\
    \ month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n    int\
    \ year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > months[month - 1]) return false;\n    if (month == 2\
    \ && day == 29 && !isLeapYear(year)) return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs3mhr60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    auto month = to!int(parts[0]);\n    auto day = to!int(parts[1]);\n    auto\
    \ year = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n       \
    \ if (day > 29)\n            return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0)\n                return false;\n            if\
    \ (year % 100 == 0 && year % 400 != 0)\n                return false;\n      \
    \  }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    else\n  \
    \  {\n        if (day > 31)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f_er1oz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : isInputRange;\n\
    \    import std.string : split;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n   \nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj63any4m.d(79): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj63any4m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiclrp59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    string[] date_arr = date.split(\"-\");\n \
    \   if(date_arr.length != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day >\
    \ 31)\n        return false;\n    if(month == 2 && day > 29)\n        return false;\n\
    \    if(month == 2 && day == 29 && !isLeapYear(year))\n        return false;\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n      \
    \  if(day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpij_sbwdt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5o6xfrg5.d(78): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o6xfrg5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    int month = to!int(date[0..1]);\n    int day\
    \ = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if (month < 1\
    \ || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n      \
    \  return false;\n    if (month == 2)\n    {\n        if (day > 29)\n        \
    \    return false;\n        if (day == 29)\n        {\n            if (year %\
    \ 4 != 0)\n                return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsvct_31.d(32): Error: template instance `to!int` template `to`
    is not defined, did you mean No?\n/tmp/tmpfsvct_31.d(33): Error: template instance
    `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpfsvct_31.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsvct_31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length\
    \ == 0) return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > days[month-1]) return false;\n    if (month == 2 &&\
    \ day == 29) {\n        if (year % 4 != 0) return false;\n        if (year % 100\
    \ == 0 && year % 400 != 0) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0aeya74u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] days =\
    \ [0, 0, 0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n   \
    \ int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj =\
    \ 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n   \
    \ int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss =\
    \ 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n   \
    \ int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb\
    \ = 0;\n    int ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n\
    \    int ggg = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int\
    \ kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo\
    \ = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr =\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkmhdc8b6.d(94): Error: expression expected, not \''unittest\''\n/tmp/tmpkmhdc8b6.d(95):
    Error: semicolon expected, not \''{\''\n/tmp/tmpkmhdc8b6.d(115): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkmhdc8b6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [1,3,5,7,8,10,12];\n    int[] months2 = [4,6,9,11];\n    int[] months3\
    \ = [2];\n    int[] days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\
    \    int[] days2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n\
    \    int[] days3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];\n\
    \    int[] years = [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzb9f631r.d(37): Error: expression expected, not \''unittest\''\n/tmp/tmpzb9f631r.d(38):
    Error: comma expected separating array initializers, not {\n/tmp/tmpzb9f631r.d(58):
    Error: comma expected separating array initializers, not void\n/tmp/tmpzb9f631r.d(58):
    Error: semicolon expected, not \''main\''\n/tmp/tmpzb9f631r.d(58): Error: found
    \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpzb9f631r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2)\n    {\n        if (year\
    \ % 4 == 0 && year % 100 != 0 || year % 400 == 0)\n        {\n            if (day\
    \ > 29) return false;\n        }\n        else\n        {\n            if (day\
    \ > 28) return false;\n        }\n    }\n    else if (month == 4 || month == 6\
    \ || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    else\n    {\n        if (day > 31) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0lfpucy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    if (date.length != 10)\n        return false;\n\
    \    if (date[2] != '-' || date[5] != '-')\n        return false;\n    if (date[0]\
    \ < '0' || date[0] > '9' || date[1] < '0' || date[1] > '9' || date[3] < '0' ||\
    \ date[3] > '9' || date[4] < '0' || date[4] > '9' || date[6] < '0' || date[6]\
    \ > '9' || date[7] < '0' || date[7] > '9' || date[8] < '0' || date[8] > '9' ||\
    \ date[9] < '0' || date[9] > '9')\n        return false;\n    int month = (date[0]\
    \ - '0') * 10 + (date[1] - '0');\n    int day = (date[3] - '0') * 10 + (date[4]\
    \ - '0');\n    if (month < 1 || month > 12)\n        return false;\n    if (month\
    \ == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n\
    \    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n \
    \   else\n    {\n        if (day < 1 || day > 31)\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18uoapqd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    // write\
    \ your code here\n    string[] date_array = date.split(\"-\");\n    if(date_array.length\
    \ != 3)\n        return false;\n    int month = to!int(date_array[0]);\n    int\
    \ day = to!int(date_array[1]);\n    int year = to!int(date_array[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(day > 29)\n       \
    \     return false;\n        else if(day == 29)\n        {\n            if(year\
    \ % 4 != 0)\n                return false;\n            else if(year % 100 ==\
    \ 0 && year % 400 != 0)\n                return false;\n        }\n    }\n   \
    \ else if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n    \
    \    if(day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_5aluatw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!(a => a.to!int).array;\n    if (date_arr.length != 3)\
    \ return false;\n    if (date_arr[0] < 1 || date_arr[0] > 12) return false;\n\
    \    if (date_arr[1] < 1 || date_arr[1] > months[date_arr[0] - 1]) return false;\n\
    \    if (date_arr[0] == 2 && date_arr[1] == 29) {\n        if (date_arr[2] % 4\
    \ != 0) return false;\n        if (date_arr[2] % 100 == 0 && date_arr[2] % 400\
    \ != 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegj53fkb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : take,\
    \ drop;\n    import std.string : split;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.math : max;\n    import std.typecons :\
    \ tuple;\n    import std.array : array;\n    import std.algorithm : map;\n   \
    \ import std.conv : to;\n    import std.range : take, drop;\n    import std.string\
    \ : split;\n    import std.math : max;\n    import std.typecons : tuple;\n   \
    \ import std.array : array;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.range : take, drop;\n    import std.string : split;\n\
    \    import std.math : max;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.range : take, drop;\n    import std.string : split;\n    import std.math\
    \ : max;\n    import std.typecons : tuple;\n    import std.array : array;\n  \
    \  import std.algorithm : map;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.string : split;\n    import std.math : max;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : take, drop;\n    import\
    \ std.string : split;\n    import std.math : max;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.range : take, drop;\n    import std.string : split;\n\
    \    import std.math : max;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.algorithm : map;\n    import std.conv : to;\n    import\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf7zwrllt.d(84): Error: Identifier expected following import\n/tmp/tmpf7zwrllt.d(84):
    Error: \'';\'' expected\n/tmp/tmpf7zwrllt.d(105): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf7zwrllt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (day > 29) return false;\n\
    \        if (day == 29) {\n            if (year % 4 != 0) return false;\n    \
    \        if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n  \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \   if (day > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99du1p26.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month > 12 || month < 1)\n        return false;\n    if (day > 31 ||\
    \ day < 1)\n        return false;\n    if (month == 2)\n    {\n        if (year\
    \ % 4 == 0)\n        {\n            if (day > 29)\n                return false;\n\
    \        }\n        else\n        {\n            if (day > 28)\n             \
    \   return false;\n        }\n    }\n    else if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11)\n    {\n        if (day > 30)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxetszt8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons :\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_38lj0bo.d(81): Error: Identifier expected following :\n/tmp/tmp_38lj0bo.d(81):
    Error: \'';\'' expected\n/tmp/tmp_38lj0bo.d(102): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_38lj0bo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if(date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(day > 29)\n\
    \            return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 4 != 0)\n                return false;\n            if(year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwslswrhi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n       \
    \ if (day > 29)\n            return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0)\n                return false;\n            if\
    \ (year % 100 == 0 && year % 400 != 0)\n                return false;\n      \
    \  }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    else\n  \
    \  {\n        if (day > 31)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxywlk4n5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2)\n    {\n        if (year\
    \ % 4 == 0 && (year % 100 != 0 || year % 400 == 0))\n        {\n            if\
    \ (day > 29) return false;\n        }\n        else\n        {\n            if\
    \ (day > 28) return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    else\n    {\n        if (day > 31) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprn5hk8fk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : isInputRange;\n\
    \    import std.string : split;\n    import std.typecons : Tuple;\n    import\
    \ std.traits : isIntegral;\n    import std.math : isNaN;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.stdio : writeln;\n\
    \    import std.range : iota;\n    import std.traits : isUnsigned;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : map;\n    import std.conv\
    \ : to;\n    import std.range : isInputRange;\n    import std.string : split;\n\
    \    import std.typecons : Tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.typecons :\
    \ tuple;\n    import std.stdio : writeln;\n    import std.range : iota;\n    import\
    \ std.traits : isUnsigned;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.conv : to;\n    import std.range : isInputRange;\n  \
    \  import std.string : split;\n    import std.typecons : Tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.math : isNaN;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.stdio : writeln;\n    import\
    \ std.range : iota;\n    import std.traits : isUnsigned;\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.range : isInputRange;\n    import std.string : split;\n    import std.typecons\
    \ : Tuple;\n    import std.traits : isIntegral;\n    import std.math : isNaN;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.stdio\
    \ : writeln;\n   \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6jm40zfq.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jm40zfq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto parts = date.split(\"\
    -\");\n    if (parts.length != 3) return false;\n    int month = to!int(parts[0]);\n\
    \    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > days[month-1]) return\
    \ false;\n    if (month == 2 && day == 29 && !isLeapYear(year)) return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1y9hqr34.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ day = to!int(parts[0]);\n    auto month = to!int(parts[1]);\n    auto year =\
    \ to!int(parts[2]);\n    if (day < 1 || day > 31) return false;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (year < 1) return false;\n    if (month\
    \ == 2) {\n        if (year % 4 == 0) {\n            if (day > 29) return false;\n\
    \        } else {\n            if (day > 28) return false;\n        }\n    } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day\
    \ > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2c5t4ma.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ day = to!int(parts[0]);\n    int month = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (day < 1 || day > 31) return false;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (month == 2) return day <= 29;\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) return day <= 30;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1vgcc2q5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.stdio;\n    import std.string;\n    import std.algorithm;\n    import std.conv;\n\
    \    import std.range;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.format;\n    import std.datetime;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n   \n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl_1byat5.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_1byat5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : split;\n    import std.conv : to;\n    import std.array : array;\n\
    \    import std.range : take;\n    import std.string : toLower;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n  \
    \  import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range\
    \ : take;\n    import std.array : array;\n    import std.typecons : tuple;\n \
    \   import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map;\n    import std.range : take;\n  \
    \  import std.array : array;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n\
    \    import std.algorithm : map;\n    import std.range : take;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n \
    \   import std.stdio : writeln;\n    import std.typecons : tuple;\n    import\
    \ std.algorithm : map;\n    import std.range : take;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio\
    \ : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n\
    \    import std.range : take;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n  \
    \  import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range\
    \ : take;\n    import std.array : array;\n    import std.typecons : tuple;\n \
    \   import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.typecons\
    \ : tuple;\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u9svw9i.d(82): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u9svw9i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length\
    \ == 0) return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > days[month - 1]) return false;\n    if (month == 2 &&\
    \ day == 29 && !isLeapYear(year)) return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyokib8d_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!(to!int).array;\n    if (date_arr.length != 3)\n   \
    \     return false;\n    if (date_arr[0] < 1 || date_arr[0] > 12)\n        return\
    \ false;\n    if (date_arr[1] < 1 || date_arr[1] > months[date_arr[0] - 1])\n\
    \        return false;\n    if (date_arr[0] == 2 && date_arr[1] == 29 && !isLeapYear(date_arr[2]))\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpza_rineh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    return\
    \ date.length > 0 && date.length == 10 && date[2] == '-' && date[5] == '-' &&\
    \ date[0..1].to!int > 0 && date[0..1].to!int < 13 && date[3..4].to!int > 0 &&\
    \ date[3..4].to!int < 32 && date[6..9].to!int > 0;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptv2gzrhp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : take;\n    import std.string : split;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.typecons : tuple;\n \
    \   import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n   \nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpssp2fwze.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssp2fwze.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    auto month = to!int(date_split[0]);\n\
    \    auto day = to!int(date_split[1]);\n    auto year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpheahgx7w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n        if (day == 29) {\n            if (year % 4\
    \ != 0) return false;\n            if (year % 100 == 0 && year % 400 != 0) return\
    \ false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvw6lbbzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if\
    \ (date_arr.length != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf9cj2e0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ day = to!int(parts[0]);\n    auto month = to!int(parts[1]);\n    auto year =\
    \ to!int(parts[2]);\n    if (day < 1 || day > 31) return false;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (month == 2 && day > 29) return false;\n\
    \    if (month == 2 && day == 29 && !isLeapYear(year)) return false;\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzhowibj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.array;\n    import std.conv;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    auto date_array = date.split(\"\
    -\");\n    if (date_array.length != 3)\n        return false;\n    auto month\
    \ = to!int(date_array[0]);\n    auto day = to!int(date_array[1]);\n    auto year\
    \ = to!int(date_array[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month == 2)\n  \
    \  {\n        if (day > 29)\n            return false;\n        if (day == 29)\n\
    \        {\n            if (year % 4 != 0)\n                return false;\n  \
    \          if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo8bm51ns.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if(date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(day > 29)\n\
    \            return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 4 != 0)\n                return false;\n            if(year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwslswrhi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.conv : to;\n    import std.array : split;\n    import std.algorithm : map;\n\
    \    import std.range : take;\n    import std.math : min;\n    import std.typecons\
    \ : tuple;\n    import std.traits : isIntegral;\n    import std.meta : AliasSeq;\n\
    \    import std.meta : AliasSeqOf;\n    import std.meta : AliasSeqOfInts;\n  \
    \  import std.meta : AliasSeqOfTuples;\n    import std.meta : AliasSeqOfTuplesOfInts;\n\
    \    import std.meta : AliasSeqOfTuplesOfIntegrals;\n    import std.meta : AliasSeqOfIntegrals;\n\
    \    import std.meta : AliasSeqOfIntegralsOf;\n    import std.meta : AliasSeqOfIntegralsOfInts;\n\
    \    import std.meta : AliasSeqOfIntegralsOfTuples;\n    import std.meta : AliasSeqOfIntegralsOfTuplesOf;\n\
    \    import std.meta : AliasSeqOfIntegralsOfTuplesOfInts;\n    import std.meta\
    \ : AliasSeqOfIntegralsOfTuplesOfIntegrals;\n    import std.meta : AliasSeqOfTuplesOfIntegrals;\n\
    \    import std.meta : AliasSeqOfTuplesOfIntegralsOf;\n    import std.meta : AliasSeqOfTuplesOfIntegralsOfInts;\n\
    \    import std.meta : AliasSeqOfTuplesOfIntegralsOfTuples;\n    import std.meta\
    \ : AliasSeqOfTuplesOfIntegralsOfTuplesOf;\n    import std.meta : AliasSeqOfTuplesOfIntegralsOfTuplesOfInts;\n\
    \    import std.meta : AliasSeqOfTuplesOfIntegralsOfTuplesOfIntegrals;\n    import\
    \ std.meta : AliasSeqOfTuplesOfTuples;\n    import std.meta : AliasSeqOfTuplesOfTuplesOf;\n\
    \    import std.meta : AliasSeqOfTuplesOfTuplesOfInts;\n    import std.meta :\
    \ AliasSeqOfTuplesOfTu\nunittest\n{\n    alias candidate = valid_date;\n\n   \
    \ assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn77rnp25.d(61): Error: \'';\'' expected\n/tmp/tmpn77rnp25.d(82):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn77rnp25.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if\
    \ (date_arr.length != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf9cj2e0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int day = to!int(date_parts[0]);\n    int month = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (day < 1 || day > 31)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (month == 2 && day > 29)\n        return false;\n    if (month == 2 && day\
    \ == 29 && !isLeapYear(year))\n        return false;\n    if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n        if (day > 30)\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6u7dmpm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.string : split;\n    import std.typecons : tuple;\n    import\
    \ std.math : abs;\n    import std.range : iota;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw09wmd65.d(82): Error: \'';\'' expected\n/tmp/tmpw09wmd65.d(103):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw09wmd65.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhickqzd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3) return false;\n\
    \    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3dorhye.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (isLeapYear(year))\n        {\n         \
    \   if (day > 29)\n                return false;\n        }\n        else\n  \
    \      {\n            if (day > 28)\n                return false;\n        }\n\
    \    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4pyipw80.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] days =\
    \ [0, 0, 0];\n    int i = 0;\n    foreach(c; date)\n    {\n        if(c == '-')\n\
    \        {\n            i++;\n            continue;\n        }\n        if(c <\
    \ '0' || c > '9')\n            return false;\n        days[i] = days[i] * 10 +\
    \ (c - '0');\n    }\n    if(days[0] < 1 || days[0] > 12)\n        return false;\n\
    \    if(days[2] < 1 || days[2] > 31)\n        return false;\n    if(days[1] <\
    \ 1 || days[1] > months[days[0] - 1])\n        return false;\n    if(days[0] ==\
    \ 2 && days[1] == 29 && !isLeapYear(days[2]))\n        return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0r893bwb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto date_parts = date.split(\"-\");\n    if (date_parts.length\
    \ != 3) return false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkwftb5r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqq9hpx7.d(79): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqq9hpx7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.string;\n    import std.algorithm;\n    import std.conv;\n    import std.array;\n\
    \    import std.range;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n   \
    \ import std.conv;\n    import std.string;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n   \
    \ import std.conv;\n    import std.string;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcjhxvyb7.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjhxvyb7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3)\n        return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wgf4nuj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    int[] months = [31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31];\n    auto parts = date.split(\"-\");\n    if (parts.length != 3)\
    \ return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > months[month - 1]) return false;\n    if (month == 2\
    \ && day == 29 && !isLeapYear(year)) return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzumn1muf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    auto month = to!int(parts[0]);\n    auto day = to!int(parts[1]);\n    auto\
    \ year = to!int(parts[2]);\n    if (year < 0)\n        return false;\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1)\n        return\
    \ false;\n    if (month == 2)\n    {\n        if (day > 29)\n            return\
    \ false;\n        if (day == 29)\n        {\n            if (year % 4 != 0)\n\
    \                return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    else\n    {\n        if (day > 31)\n  \
    \          return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6z0_zn_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    if (date_tuple.length != 3)\n  \
    \      return false;\n    int month = to!int(date_tuple[0]);\n    int day = to!int(date_tuple[1]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0t8q6qlw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] days =\
    \ [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n    int[] leap_days\
    \ = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n    int[] date_array\
    \ = date.split(\"-\").map!int.array;\n    if (date_array.length != 3) return false;\n\
    \    int month = date_array[0];\n    int day = date_array[1];\n    int year =\
    \ date_array[2];\n    if (month < 1 || month > 12) return false;\n    if (day\
    \ < 1 || day > months[month - 1]) return false;\n    if (month == 2 && day ==\
    \ 29)\n    {\n        if (year % 4 != 0) return false;\n        if (year % 100\
    \ == 0 && year % 400 != 0) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiwssg_7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    bool\
    \ result = true;\n    if (date.length == 0)\n        return false;\n    if (date.find(\"\
    /\") != -1)\n        return false;\n    auto date_parts = date.split(\"-\");\n\
    \    if (date_parts.length != 3)\n        return false;\n    int month = to!int(date_parts[0]);\n\
    \    int day = to!int(date_parts[1]);\n    int year = to!int(date_parts[2]);\n\
    \    if (year < 0)\n        return false;\n    if (month < 1 || month > 12)\n\
    \        return false;\n    if (day < 1)\n        return false;\n    if (month\
    \ == 2)\n    {\n        if (day > 29)\n            return false;\n        if (day\
    \ == 29)\n        {\n            if (year % 4 != 0)\n                return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ else\n    {\n        if (day > 31)\n            return false;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpasufrgyn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    auto month = to!int(date_parts[0]);\n    auto day = to!int(date_parts[1]);\n\
    \    auto year = to!int(date_parts[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (year % 4 == 0 &&\
    \ (year % 100 != 0 || year % 400 == 0))\n        {\n            if (day > 29)\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (day > 28)\n                return false;\n        }\n    }\n    else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day\
    \ > 30)\n            return false;\n    }\n    else\n    {\n        if (day >\
    \ 31)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgmg3kce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[]\
    \ date_arr = date.split(\"-\").map!(a => a.to!int).array;\n    if (date_arr.length\
    \ != 3) return false;\n    if (date_arr[0] < 1 || date_arr[0] > 12) return false;\n\
    \    if (date_arr[1] < 1 || date_arr[1] > days_in_month[date_arr[0] - 1]) return\
    \ false;\n    if (date_arr[0] == 2 && date_arr[1] == 29) {\n        if (date_arr[2]\
    \ % 4 != 0) return false;\n        if (date_arr[2] % 100 == 0 && date_arr[2] %\
    \ 400 != 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0w0ft59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_array = date.split(\"-\");\n   \
    \ if(date_array.length != 3)\n        return false;\n    int month = to!int(date_array[0]);\n\
    \    int day = to!int(date_array[1]);\n    int year = to!int(date_array[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(day > 29)\n\
    \            return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 4 != 0)\n                return false;\n            if(year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgy84yqzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n    int\
    \ day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n   \
    \     return false;\n    if(month == 2)\n    {\n        if(day > 29)\n       \
    \     return false;\n        if(day == 29)\n        {\n            if(year % 4\
    \ != 0)\n                return false;\n            if(year % 100 == 0 && year\
    \ % 400 != 0)\n                return false;\n        }\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4w6yri_q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    int month = to!int(date[0..1]);\n    int day = to!int(date[3..4]);\n\
    \    int year = to!int(date[6..9]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2)\n    {\n    \
    \    if (day > 29) return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0) return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0) return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl66m4p_x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int month = to!int(date[0..1]);\n\
    \    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if\
    \ (date.length != 10) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > days[month - 1]) return false;\n    if (month == 2 &&\
    \ day == 29 && !isLeapYear(year)) return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh8fm8hg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = parts[0].to!int;\n    int day = parts[1].to!int;\n    int year = parts[2].to!int;\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (day > 29) return false;\n\
    \        if (day == 29) {\n            if (year % 4 != 0) return false;\n    \
    \        if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n  \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \   if (day > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1oet6r1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    auto month = to!int(parts[0]);\n    auto day = to!int(parts[1]);\n    auto\
    \ year = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n       \
    \ if (day > 29)\n            return false;\n        if (day == 29)\n        {\n\
    \            if (year % 4 != 0)\n                return false;\n            if\
    \ (year % 100 == 0 && year % 400 != 0)\n                return false;\n      \
    \  }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    else\n  \
    \  {\n        if (day > 31)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f_er1oz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    if (date.length != 10) return false;\n    if (date[2]\
    \ != '-' || date[5] != '-') return false;\n    int month = to!int(date[0..1]);\n\
    \    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if\
    \ (month < 1 || month > 12) return false;\n    if (month == 2) {\n        if (year\
    \ % 4 == 0) {\n            if (day < 1 || day > 29) return false;\n        } else\
    \ {\n            if (day < 1 || day > 28) return false;\n        }\n    } else\
    \ if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n  \
    \  } else {\n        if (day < 1 || day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2d3f7oo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_tuple = split(date, \"-\");\n  \
    \  if (date_tuple.length != 3)\n        return false;\n    int month = to!int(date_tuple[0]);\n\
    \    int day = to!int(date_tuple[1]);\n    int year = to!int(date_tuple[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 == 0)\n            {\n                if (year % 100 == 0)\n\
    \                {\n                    if (year % 400 == 0)\n               \
    \         return true;\n                    else\n                        return\
    \ false;\n                }\n                else\n                    return\
    \ true;\n            }\n            else\n                return false;\n    \
    \    }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11)\n    {\n        if (day > 30)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6aw8xnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    bool\
    \ result = true;\n    string[] date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3)\n    {\n        result = false;\n    }\n    else\n    {\n        int month\
    \ = to!int(date_arr[0]);\n        int day = to!int(date_arr[1]);\n        int\
    \ year = to!int(date_arr[2]);\n        if (month < 1 || month > 12)\n        {\n\
    \            result = false;\n        }\n        else\n        {\n           \
    \ if (month == 2)\n            {\n                if (day < 1 || day > 29)\n \
    \               {\n                    result = false;\n                }\n  \
    \          }\n            else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n            {\n                if (day < 1 || day > 30)\n          \
    \      {\n                    result = false;\n                }\n           \
    \ }\n            else\n            {\n                if (day < 1 || day > 31)\n\
    \                {\n                    result = false;\n                }\n \
    \           }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwanhyv0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhickqzd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhickqzd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.traits :\
    \ isIntegral;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.algorithm : map;\n    import std.range : isInputRange;\n    import\
    \ std.conv : to;\n    import std.string : split;\n    import std.math : isNaN;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.algorithm : map;\n    import std.range :\
    \ isInputRange;\n    import std.conv : to;\n    import std.string : split;\n \
    \   import std.math : isNaN;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.algorithm\
    \ : map;\n    import std.range : isInputRange;\n    import std.conv : to;\n  \
    \  import std.string : split;\n    import std.math : isNaN;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.algorithm : map;\n    import std.range : isInputRange;\n    import\
    \ std.conv : to;\n    import std.string : split;\n    import std.math : isNaN;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.algorithm : map;\n    import std.range :\
    \ isInputRange;\n    import std.conv : to;\n    import std.string : split;\n \
    \   import std.math : isNaN;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6_u0u1dy.d(81): Error: identifier expected following package\n/tmp/tmp6_u0u1dy.d(81):
    Error: \'';\'' expected\n/tmp/tmp6_u0u1dy.d(102): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6_u0u1dy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : split;\n    import std.conv : to;\n    import std.range : empty;\n\
    \    import std.string : strip;\n    import std.typecons : tuple;\n    import\
    \ std.math : max, min;\n    import std.array : array;\n    import std.traits :\
    \ isIntegral;\n    import std.meta : AliasSeq;\n    import std.meta : staticMap;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n    import std.meta : staticIndexOf;\n\
    \    import std.meta : staticIndexOf;\n   \nunittest\n{\n    alias candidate =\
    \ valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9pd4l112.d(78): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pd4l112.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    string[]\
    \ parts = date.split(\"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n       \
    \ if (isLeapYear(year))\n        {\n            if (day > 29)\n              \
    \  return false;\n        }\n        else\n        {\n            if (day > 28)\n\
    \                return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    else\n    {\n        if (day > 31)\n           \
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3bcsq2g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if\
    \ (date_arr.length != 3)\n        return false;\n    auto month = to!int(date_arr[0]);\n\
    \    auto day = to!int(date_arr[1]);\n    auto year = to!int(date_arr[2]);\n \
    \   if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7gmuplam.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31,28,31,30,31,30,31,31,30,31,30,31];\n    int[] date_arr = date.split(\"\
    -\").map!(to!int).array;\n    if (date_arr.length != 3) return false;\n    if\
    \ (date_arr[0] < 1 || date_arr[0] > 12) return false;\n    if (date_arr[1] < 1\
    \ || date_arr[1] > months[date_arr[0]-1]) return false;\n    if (date_arr[0] ==\
    \ 2 && date_arr[1] == 29 && !isLeapYear(date_arr[2])) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpp6l_sb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11)\n    {\n        if (day > 30)\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqlbig42.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.array;\n    import std.algorithm;\n    import std.conv;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    auto date_arr = date.split(\"\
    -\");\n    if (date_arr.length != 3)\n        return false;\n    auto month =\
    \ to!int(date_arr[0]);\n    auto day = to!int(date_arr[1]);\n    auto year = to!int(date_arr[2]);\n\
    \    if (year < 0)\n        return false;\n    if (month < 1 || month > 12)\n\
    \        return false;\n    if (day < 1)\n        return false;\n    if (month\
    \ == 2)\n    {\n        if (isLeapYear(year))\n        {\n            if (day\
    \ > 29)\n                return false;\n        }\n        else\n        {\n \
    \           if (day > 28)\n                return false;\n        }\n    }\n \
    \   else if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12)\n    {\n        if (day > 31)\n           \
    \ return false;\n    }\n    else\n    {\n        if (day > 30)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmped5t899d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio :\
    \ writeln;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : T\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuvvvcxhr.d(79): Error: \'';\'' expected\n/tmp/tmpuvvvcxhr.d(100):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvvvcxhr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5o6xfrg5.d(78): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o6xfrg5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ month = parts[0].to!int;\n    auto day = parts[1].to!int;\n    auto year = parts[2].to!int;\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (day > 29) return false;\n\
    \        if (day == 29) {\n            if (year % 4 != 0) return false;\n    \
    \        if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n  \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \   if (day > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggcf6nop.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [1,3,5,7,8,10,12];\n    int[] months2 = [4,6,9,11];\n    int[] months3\
    \ = [2];\n    string[] date_split = date.split(\"-\");\n    int day = to!int(date_split[0]);\n\
    \    int month = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if(date.length == 0)\n        return false;\n    if(day < 1 || day > 31)\n\
    \        return false;\n    if(month < 1 || month > 12)\n        return false;\n\
    \    if(year < 1)\n        return false;\n    if(month in months)\n    {\n   \
    \     if(day > 31)\n            return false;\n    }\n    if(month in months2)\n\
    \    {\n        if(day > 30)\n            return false;\n    }\n    if(month in\
    \ months3)\n    {\n        if(day > 29)\n            return false;\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lp7nj75.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    if (date_tuple.length != 3)\n  \
    \      return false;\n    auto day = to!int(date_tuple[1]);\n    auto month =\
    \ to!int(date_tuple[0]);\n    auto year = to!int(date_tuple[2]);\n    if (day\
    \ < 1 || day > 31)\n        return false;\n    if (month < 1 || month > 12)\n\
    \        return false;\n    if (month == 2)\n    {\n        if (day > 29)\n  \
    \          return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgkwzqip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int day = to!int(date_parts[0]);\n    int month = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (day > 29)\n   \
    \         return false;\n        if (day == 29)\n        {\n            if (year\
    \ % 4 != 0)\n                return false;\n            if (year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    else if (day > 31)\n     \
    \   return false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifsn1w6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0) return false;\n    auto parts = date.split(\"-\");\n    if(parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(year < 1) return false;\n    if(day < 1) return false;\n    if(month ==\
    \ 2)\n    {\n        if(isLeapYear(year))\n        {\n            if(day > 29)\
    \ return false;\n        }\n        else\n        {\n            if(day > 28)\
    \ return false;\n        }\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n   \
    \     if(day > 31) return false;\n    }\n    else\n    {\n        if(day > 30)\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph55ngqz_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, '-');\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) return day <= 29;\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) return day <= 30;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4q7s640.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3) return false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtyvyg9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    enum\
    \ months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    ];\n    auto date_split = date.split(\"-\");\n    if (date_split.length != 3)\
    \ return false;\n    if (date_split[0].length != 2 || date_split[1].length !=\
    \ 2 || date_split[2].length != 4) return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n       \
    \     if (day > 29) return false;\n        } else {\n            if (day > 28)\
    \ return false;\n        }\n    } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9432u8do.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : isInputRange;\n\
    \    import std.string : split;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0l4d_f3o.d(79): Error: \'';\'' expected\n/tmp/tmp0l4d_f3o.d(100):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0l4d_f3o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3) return false;\n    auto month = date_arr[0].to!int;\n    auto day = date_arr[1].to!int;\n\
    \    auto year = date_arr[2].to!int;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (month == 2) {\n        if (year % 4 == 0) {\n            if\
    \ (day < 1 || day > 29) return false;\n        } else {\n            if (day <\
    \ 1 || day > 28) return false;\n        }\n    } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if (day < 1 || day > 31) return false;\n    } else {\n        if\
    \ (day < 1 || day > 30) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh42qh_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3)\n        return\
    \ false;\n    auto month = to!int(date_split[0]);\n    auto day = to!int(date_split[1]);\n\
    \    auto year = to!int(date_split[2]);\n    if (year < 0)\n        return false;\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1)\n \
    \       return false;\n    if (month == 2)\n    {\n        if (year % 4 == 0)\n\
    \        {\n            if (day > 29)\n                return false;\n       \
    \ }\n        else\n        {\n            if (day > 28)\n                return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n      \
    \  if (day > 31)\n            return false;\n    }\n    else\n    {\n        if\
    \ (day > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34cz201w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ day = to!int(parts[1]);\n    auto month = to!int(parts[0]);\n    auto year =\
    \ to!int(parts[2]);\n    if (day < 1 || day > 31) return false;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29) return false;\n        }\n        else\n\
    \        {\n            if (day > 28) return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_4g0t58.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = split(date, \"-\");\n    if (date_parts.length != 3) return false;\n\
    \    if (date_parts[0].length != 2 || date_parts[1].length != 2 || date_parts[2].length\
    \ != 4) return false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (year < 0) return false;\n    if\
    \ (month < 1 || month > 12) return false;\n    if (day < 1) return false;\n  \
    \  if (month == 2)\n    {\n        if (isLeapYear(year))\n        {\n        \
    \    if (day > 29) return false;\n        }\n        else\n        {\n       \
    \     if (day > 28) return false;\n        }\n    }\n    else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return\
    \ false;\n    }\n    else\n    {\n        if (day > 31) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0pla8um.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : split;\n    import std.conv : to;\n    import std.range : take;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.string : format;\n    import std.stdio : writeln;\n\
    \    import std.exception : assertThrown;\n    import std.exception : enforce;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : TupleOf;\n    import std.typecons\
    \ : FieldTypeTuple;\n    import std.typecons : FieldTypeTuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpopynjr3b.d(77): Error: \'';\'' expected\n/tmp/tmpopynjr3b.d(98):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopynjr3b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_array = date.split(\"-\");\n   \
    \ if(date_array.length != 3)\n        return false;\n    int month = to!int(date_array[0]);\n\
    \    int day = to!int(date_array[1]);\n    int year = to!int(date_array[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(day > 29)\n\
    \            return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 4 != 0)\n                return false;\n            if(year % 100 == 0 &&\
    \ year % 400 != 0)\n                return false;\n        }\n    }\n    else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgy84yqzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2)\n    {\n        if (isLeapYear(year))\n\
    \        {\n            if (day > 29) return false;\n        }\n        else\n\
    \        {\n            if (day > 28) return false;\n        }\n    }\n    else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if\
    \ (day > 30) return false;\n    }\n    else\n    {\n        if (day > 31) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8osgjyb2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    string[] date_parts = date.split(\"-\");\n    if (date_parts.length\
    \ != 3) return false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsj3e1g0k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    // check\
    \ if date is empty\n    if(date.empty)\n        return false;\n    \n    // check\
    \ if date is in the format mm-dd-yyyy\n    if(date.count('-') != 2)\n        return\
    \ false;\n    \n    // split date into month, day, year\n    auto date_split =\
    \ date.split('-');\n    if(date_split.length != 3)\n        return false;\n  \
    \  \n    // convert month, day, year to int\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    \n    // check if month is in range 1-12\n    if(month < 1 || month > 12)\n\
    \        return false;\n    \n    // check if day is in range 1-31 for months\
    \ 1,3,5,7,8,10,12\n    if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day\
    \ > 31)\n            return false;\n    }\n    // check if day is in range 1-30\
    \ for months 4,6,9,11\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n\
    \    }\n    // check if day is in range 1-29 for month 2\n    else if(month ==\
    \ 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n\
    \    \n    // check if day is in range 1-28 for month 2 if year is not a leap\
    \ year\n    if(month == 2 && !isLeapYear(year))\n    {\n        if(day < 1 ||\
    \ day > 28)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25ozkgno.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1) return false;\n    if (month == 2) return day <= 29;\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) return day <= 30;\n\
    \    return day <= 31;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2b1lving.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiclrp59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    return\
    \ date.length > 0 && date.length == 10 && date[2] == '-' && date[5] == '-' &&\
    \ date[0..1].to!int > 0 && date[0..1].to!int < 13 && date[3..4].to!int > 0 &&\
    \ date[3..4].to!int < 32 && date[6..9].to!int > 0;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptv2gzrhp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.string : split;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typetuple\
    \ : TypeTuple;\n    import std.meta : AliasSeq;\n    import std.meta : AliasSeqOf;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    \    import std.meta : AliasSeqOfTypeTuple;\n    import std.meta : AliasSeqOfTuple;\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpffh299f6.d(66): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpffh299f6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if(date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(isLeapYear(year))\n\
    \        {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbmo7aoa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    string[] date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ != 3) return false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbglcph8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : isInputRange;\n\
    \    import std.string : split;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_vvlz2z.d(77): Error: \'';\'' expected\n/tmp/tmpf_vvlz2z.d(98):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_vvlz2z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if (date_split.length != 3)\n        return false;\n    int month = to!int(date_split[0]);\n\
    \    int day = to!int(date_split[1]);\n    int year = to!int(date_split[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhickqzd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    string[] date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3)\n        return false;\n\
    \    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > months[month - 1])\n        return\
    \ false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n        return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_oiia62x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0)\n        return false;\n    auto date_split = date.split(\"-\");\n   \
    \ if(date_split.length != 3)\n        return false;\n    auto month = date_split[0].to!int;\n\
    \    auto day = date_split[1].to!int;\n    auto year = date_split[2].to!int;\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(isLeapYear(year))\n\
    \        {\n            if(day > 29)\n                return false;\n        }\n\
    \        else\n        {\n            if(day > 28)\n                return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if(day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j5l1u3e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n        return\
    \ false;\n    int month = date_arr[0].to!int;\n    int day = date_arr[1].to!int;\n\
    \    int year = date_arr[2].to!int;\n    if (month < 1 || month > 12)\n      \
    \  return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (isLeapYear(year))\n        {\n            if\
    \ (day > 29)\n                return false;\n        }\n        else\n       \
    \ {\n            if (day > 28)\n                return false;\n        }\n   \
    \ }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n \
    \       if (day > 30)\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqm10cwj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    auto parts =\
    \ date.split(\"-\");\n    if (parts.length != 3) return false;\n    int month\
    \ = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > months[month - 1]) return false;\n    if (month == 2\
    \ && day == 29) {\n        if (year % 4 != 0) return false;\n        if (year\
    \ % 100 == 0 && year % 400 != 0) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5e5lz0r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[]\
    \ date_parts = date.split(\"-\").map!(a => to!int(a)).array;\n    if (date_parts.length\
    \ != 3) return false;\n    if (date_parts[0] < 1 || date_parts[0] > 12) return\
    \ false;\n    if (date_parts[1] < 1 || date_parts[1] > days_in_month[date_parts[0]\
    \ - 1]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate =\
    \ valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_6nu18c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : take, drop;\n    import std.typecons : tuple;\n    import\
    \ std.math : max;\n    import std.string : split;\n    import std.typecons : tuple;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.traits : isIntegral;\n\
    \    import std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.traits : isIntegral;\n    import std.typecons\
    \ : tuple;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.traits : isIntegral;\n\
    \    import std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.traits : isIntegral;\n    import std.typecons\
    \ : tuple;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.traits : isIntegral;\n    import std.typecons : tuple;\n    import std.traits\
    \ : isIntegral;\n    import std.typecons : tuple;\n    import std.traits : isIntegral;\n\
    \    import std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.traits : isIntegral;\n    import\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfg02anpo.d(78): Error: Identifier expected following import\n/tmp/tmpfg02anpo.d(78):
    Error: \'';\'' expected\n/tmp/tmpfg02anpo.d(99): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfg02anpo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    auto\
    \ date_arr = date.split(\"-\");\n    if (date_arr.length != 3)\n        return\
    \ false;\n    int month = to!int(date_arr[0]);\n    int day = to!int(date_arr[1]);\n\
    \    int year = to!int(date_arr[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > 31)\n        return false;\n    if\
    \ (month == 2)\n    {\n        if (day > 29)\n            return false;\n    \
    \    if (day == 29)\n        {\n            if (year % 4 != 0)\n             \
    \   return false;\n            if (year % 100 == 0 && year % 400 != 0)\n     \
    \           return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3asox3f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3) return false;\n    int\
    \ month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year = to!int(parts[2]);\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n        if (day ==\
    \ 29) {\n            if (year % 4 != 0) return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n        }\n    } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    } else {\n        if (day > 31) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpov_s17zu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    string[] date_split\
    \ = date.split(\"-\");\n    if (date_split.length != 3)\n        return false;\n\
    \    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > days[month - 1])\n        return\
    \ false;\n    if (month == 2 && day == 29 && !isLeapYear(year))\n        return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2g0ce3wy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.array;\n    import std.conv;\n    import std.math;\n    import std.string;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.string;\n    import std.conv;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp16f9kmgy.d(100): Error: identifier expected following package\n/tmp/tmp16f9kmgy.d(100):
    Error: \'';\'' expected\n/tmp/tmp16f9kmgy.d(121): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp16f9kmgy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!(a => a.to!int).array;\n    if (date_arr.length != 3)\
    \ return false;\n    if (date_arr[0] < 1 || date_arr[0] > 12) return false;\n\
    \    if (date_arr[1] < 1 || date_arr[1] > months[date_arr[0] - 1]) return false;\n\
    \    if (date_arr[0] == 2 && date_arr[1] == 29) {\n        if (date_arr[2] % 4\
    \ != 0) return false;\n        if (date_arr[2] % 100 == 0 && date_arr[2] % 400\
    \ != 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegj53fkb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3)\n        return\
    \ false;\n    int month = to!int(date_split[0]);\n    int day = to!int(date_split[1]);\n\
    \    int year = to!int(date_split[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9amqt8t8.d(30): Error: no property `split` for type `string`\n/tmp/tmp9amqt8t8.d(33):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp9amqt8t8.d(34):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmp9amqt8t8.d(35):
    Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9amqt8t8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_parts = date.split(\"-\");\n   \
    \ if (date_parts.length != 3)\n        return false;\n    int month = to!int(date_parts[0]);\n\
    \    int day = to!int(date_parts[1]);\n    int year = to!int(date_parts[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbdvmvuq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_tuple = tuple(date.split(\"-\"));\n    if (date_tuple.length != 3)\n  \
    \      return false;\n    int day = to!int(date_tuple[1]);\n    int month = to!int(date_tuple[0]);\n\
    \    int year = to!int(date_tuple[2]);\n    if (day < 1 || day > 31)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (year < 1)\n        return false;\n    if (month == 2)\n    {\n        if\
    \ (day > 29)\n            return false;\n        if (day == 29)\n        {\n \
    \           if (year % 4 != 0)\n                return false;\n            if\
    \ (year % 100 == 0 && year % 400 != 0)\n                return false;\n      \
    \  }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb2u_von.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length\
    \ == 0) return false;\n    auto splitted = date.split(\"-\");\n    if(splitted.length\
    \ != 3) return false;\n    int month = to!int(splitted[0]);\n    int day = to!int(splitted[1]);\n\
    \    int year = to!int(splitted[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2)\n    {\n      \
    \  if(day > 29) return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 4 != 0) return false;\n            if(year % 100 == 0 && year % 400 != 0)\
    \ return false;\n        }\n    }\n    else if(month == 4 || month == 6 || month\
    \ == 9 || month == 11)\n    {\n        if(day > 30) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_vnxgkv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    bool\
    \ result = true;\n    if (date.length == 0)\n        return false;\n    auto date_array\
    \ = date.split(\"-\");\n    if (date_array.length != 3)\n        return false;\n\
    \    auto month = to!int(date_array[0]);\n    auto day = to!int(date_array[1]);\n\
    \    auto year = to!int(date_array[2]);\n    if (month < 1 || month > 12)\n  \
    \      return false;\n    if (day < 1 || day > 31)\n        return false;\n  \
    \  if (month == 2)\n    {\n        if (day > 29)\n            return false;\n\
    \        if (day == 29)\n        {\n            if (year % 4 != 0)\n         \
    \       return false;\n            if (year % 100 == 0 && year % 400 != 0)\n \
    \               return false;\n        }\n    }\n    if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n            return\
    \ false;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxh5y43y9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    //split\
    \ date into parts\n    auto parts = split(date, \"-\");\n    //check if parts\
    \ are valid\n    if(parts.length != 3)\n        return false;\n    //check if\
    \ date is valid\n    if(parts[0].length != 2 || parts[1].length != 2 || parts[2].length\
    \ != 4)\n        return false;\n    //check if month is valid\n    if(to!int(parts[0])\
    \ < 1 || to!int(parts[0]) > 12)\n        return false;\n    //check if day is\
    \ valid\n    if(to!int(parts[1]) < 1 || to!int(parts[1]) > 31)\n        return\
    \ false;\n    //check if year is valid\n    if(to!int(parts[2]) < 1)\n       \
    \ return false;\n    //check if day is valid for month\n    if(to!int(parts[0])\
    \ == 2)\n    {\n        if(to!int(parts[1]) > 29)\n            return false;\n\
    \    }\n    else if(to!int(parts[0]) == 4 || to!int(parts[0]) == 6 || to!int(parts[0])\
    \ == 9 || to!int(parts[0]) == 11)\n    {\n        if(to!int(parts[1]) > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1_ah5cl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!(to!int).array;\n    if (date_arr.length != 3) return\
    \ false;\n    if (date_arr[0] < 1 || date_arr[0] > 12) return false;\n    if (date_arr[1]\
    \ < 1 || date_arr[1] > months[date_arr[0] - 1]) return false;\n    if (date_arr[0]\
    \ == 2 && date_arr[1] == 29)\n    {\n        if (date_arr[2] % 4 != 0) return\
    \ false;\n        if (date_arr[2] % 100 == 0 && date_arr[2] % 400 != 0) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvumyky9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3)\n        return false;\n    int month = to!int(parts[0]);\n    int day\
    \ = to!int(parts[1]);\n    int year = to!int(parts[2]);\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return\
    \ false;\n    if (month == 2)\n    {\n        if (day > 29)\n            return\
    \ false;\n        if (day == 29)\n        {\n            if (year % 4 != 0)\n\
    \                return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0)\n                return false;\n        }\n    }\n    else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0mjzg1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.array;\n    import std.conv;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    auto\
    \ date_split = date.split(\"-\");\n    if (date_split.length != 3) return false;\n\
    \    auto month = to!int(date_split[0]);\n    auto day = to!int(date_split[1]);\n\
    \    auto year = to!int(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk4peeshz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_arr\
    \ = date.split(\"-\").map!int.array;\n    if (date_arr.length != 3) return false;\n\
    \    int month = date_arr[0];\n    int day = date_arr[1];\n    int year = date_arr[2];\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > months[month\
    \ - 1]) return false;\n    if (month == 2 && day == 29 && !isLeapYear(year)) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0e0x3m1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3) return false;\n    auto\
    \ month = to!int(parts[0]);\n    auto day = to!int(parts[1]);\n    auto year =\
    \ to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n    if (day\
    \ < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day > 29)\
    \ return false;\n        if (day == 29) {\n            if (year % 4 != 0) return\
    \ false;\n            if (year % 100 == 0 && year % 400 != 0) return false;\n\
    \        }\n    } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3smcaza.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.string : strip;\n    import std.typecons : tuple;\n    import\
    \ std.math : isNaN;\n    import std.array : array;\n    import std.stdio : writeln;\n\
    \    import std.range : isInputRange;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpokb7yde5.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokb7yde5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    int[]\
    \ months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    int[] date_parts\
    \ = date.split(\"-\").map!(to!int).array;\n    if (date_parts.length != 3)\n \
    \       return false;\n    int day = date_parts[0];\n    int month = date_parts[1];\n\
    \    int year = date_parts[2];\n    if (year % 4 == 0 && year % 100 != 0 || year\
    \ % 400 == 0)\n        months[1] = 29;\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > months[month - 1])\n        return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm5k0x6j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ date_parts = date.split(\"-\");\n    if (date_parts.length != 3)\n        return\
    \ false;\n    int month = to!int(date_parts[0]);\n    int day = to!int(date_parts[1]);\n\
    \    int year = to!int(date_parts[2]);\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1 || day > 31)\n        return false;\n   \
    \ if (month == 2)\n    {\n        if (day > 29)\n            return false;\n \
    \       if (day == 29)\n        {\n            if (year % 4 != 0)\n          \
    \      return false;\n            if (year % 100 == 0 && year % 400 != 0)\n  \
    \              return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiclrp59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : all;\n    import std.conv : to;\n    import std.range : split;\n\
    \    import std.array : array;\n    import std.string : strip;\n    import std.typecons\
    \ : tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n  \
    \  import std.format : format;\n    import std.traits : isIntegral;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n   \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzuw5h5rg.d(84): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzuw5h5rg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto parts = date.split(\"-\");\n    if (parts.length\
    \ != 3) return false;\n    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n\
    \    int year = to!int(parts[2]);\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2)\n    {\n    \
    \    if (day > 29) return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0) return false;\n            if (year % 100 == 0 && year\
    \ % 400 != 0) return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapz3vg4g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_arr = date.split(\"-\");\n    if\
    \ (date_arr.length != 3)\n        return false;\n    int month = to!int(date_arr[0]);\n\
    \    int day = to!int(date_arr[1]);\n    int year = to!int(date_arr[2]);\n   \
    \ if (year < 0)\n        return false;\n    if (month < 1 || month > 12)\n   \
    \     return false;\n    if (day < 1)\n        return false;\n    if (month ==\
    \ 2)\n    {\n        if (day > 29)\n            return false;\n        if (day\
    \ == 29)\n        {\n            if (year % 4 != 0)\n                return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n    {\n        if (day > 30)\n            return false;\n    }\n   \
    \ else\n    {\n        if (day > 31)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs5ujt_u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    if (date.length != 10) return false;\n    if (date[2]\
    \ != '-' || date[5] != '-') return false;\n    int month = to!int(date[0..1]);\n\
    \    int day = to!int(date[3..4]);\n    int year = to!int(date[6..9]);\n    if\
    \ (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month == 2) {\n        if (day > 29) return false;\n       \
    \ if (day == 29) {\n            if (year % 4 != 0) return false;\n           \
    \ if (year % 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n  \
    \  if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day\
    \ > 30) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zc_zj8w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0) return false;\n    auto date_split = date.split(\"-\");\n    if (date_split.length\
    \ != 3) return false;\n    auto month = to!int(date_split[0]);\n    auto day =\
    \ to!int(date_split[1]);\n    auto year = to!int(date_split[2]);\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n        if (day ==\
    \ 29) {\n            if (year % 4 != 0) return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n        }\n    }\n    else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lrnq2a9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.range : isInputRange;\n    import std.typecons : tuple;\n    import\
    \ std.math : isNaN;\n    import std.string : split;\n    import std.typecons :\
    \ tuple;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.traits : isIntegral;\n    import std.array : array;\n    import\
    \ std.range : isInputRange;\n    import std.conv : to;\n    import std.math :\
    \ isNaN;\n    import std.traits : isIntegral;\n    import std.typecons : tuple;\n\
    \    import std.array : array;\n    import std.range : isInputRange;\n    import\
    \ std.conv : to;\n    import std.math : isNaN;\n    import std.traits : isIntegral;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.range\
    \ : isInputRange;\n    import std.conv : to;\n    import std.math : isNaN;\n \
    \   import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.range : isInputRange;\n    import std.conv\
    \ : to;\n    import std.math : isNaN;\n    import std.traits : isIntegral;\n \
    \   import std.typecons : tuple;\n    import std.array : array;\n    import std.range\
    \ : isInputRange;\n    import std.conv : to;\n    import std.math : isNaN;\n \
    \   import std.traits : isIntegral;\n    import std.typecons : tuple;\n    import\
    \ std.array : array;\n    import std.range : isInputRange;\n    import std.conv\
    \ : to;\n    import std.math : isNaN;\n    import std.traits : isIntegral;\n \
    \   import std.typecons : tuple;\n    import std.array : array;\n    import std.range\
    \ : isInputRange;\n    import std.\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptqwmnanx.d(80): Error: identifier expected following package\n/tmp/tmptqwmnanx.d(80):
    Error: \'';\'' expected\n/tmp/tmptqwmnanx.d(101): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptqwmnanx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length\
    \ == 0)\n        return false;\n    auto date_parts = date.split(\"-\");\n   \
    \ if (date_parts.length != 3)\n        return false;\n    auto month = to!int(date_parts[0]);\n\
    \    auto day = to!int(date_parts[1]);\n    auto year = to!int(date_parts[2]);\n\
    \    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day\
    \ > 31)\n        return false;\n    if (month == 2)\n    {\n        if (day >\
    \ 29)\n            return false;\n        if (day == 29)\n        {\n        \
    \    if (year % 4 != 0)\n                return false;\n            if (year %\
    \ 100 == 0 && year % 400 != 0)\n                return false;\n        }\n   \
    \ }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lzuebcw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
    \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n\
    \    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
    06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    auto\
    \ parts = split(date, \"-\");\n    if (parts.length != 3)\n        return false;\n\
    \    int month = to!int(parts[0]);\n    int day = to!int(parts[1]);\n    int year\
    \ = to!int(parts[2]);\n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1)\n        return false;\n    if (month == 2)\n    {\n       \
    \ if (isLeapYear(year))\n        {\n            if (day > 29)\n              \
    \  return false;\n        }\n        else\n        {\n            if (day > 28)\n\
    \                return false;\n        }\n    }\n    else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if (day > 30)\n         \
    \   return false;\n    }\n    else\n    {\n        if (day > 31)\n           \
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5lj4tao.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800211
